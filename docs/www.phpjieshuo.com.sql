/*
Navicat MySQL Data Transfer

Source Server         : 腾讯云自用MySQL
Source Server Version : 50636
Source Host           : 193.112.101.85:3306
Source Database       : www.phpjieshuo.com

Target Server Type    : MYSQL
Target Server Version : 50636
File Encoding         : 65001

Date: 2018-09-05 14:41:58
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for gm_question
-- ----------------------------
DROP TABLE IF EXISTS `gm_question`;
CREATE TABLE `gm_question` (
  `question_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '题目ID',
  `cat_code` varchar(50) NOT NULL DEFAULT '' COMMENT '题目分类 CODE。对应 ms_category.cat_code。',
  `title` char(255) NOT NULL COMMENT '题目标题',
  `image_url` char(100) NOT NULL DEFAULT '' COMMENT '题目图片',
  `option_data` text NOT NULL COMMENT '题目选项数据。json格式。',
  `answer` char(50) NOT NULL DEFAULT '' COMMENT '题目答案：A、B、C。多个答案：A,B,C',
  `total_ok_time` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '总正确次数。定时更新。',
  `total_error_times` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '错误总次数。定时更新。',
  `total_times` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '参与总次数。定时更新。',
  `explain` text NOT NULL COMMENT '题目解析。对题目做最终解读。',
  `total_people` int(11) unsigned NOT NULL COMMENT '参与总人数。定时更新。',
  `status` tinyint(1) NOT NULL COMMENT '状态：0无效、1正常、2删除',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '修改人',
  `modified_time` datetime DEFAULT NULL COMMENT '修改时间戳',
  `created_by` int(11) unsigned NOT NULL COMMENT '创建人',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间戳',
  PRIMARY KEY (`question_id`),
  KEY `title` (`title`)
) ENGINE=InnoDB AUTO_INCREMENT=100022 DEFAULT CHARSET=utf8 COMMENT='题库表';

-- ----------------------------
-- Records of gm_question
-- ----------------------------
INSERT INTO `gm_question` VALUES ('100001', '108100000000000000000000000000', '以下选项中能正确转换为 true 的有哪些？', '', '{\"A\":{\"op_title\":\"var_dump((bool) \\\"\\\");\"},\"B\":{\"op_title\":\"var_dump((bool) 1);\"},\"C\":{\"op_title\":\"var_dump((bool) -2);\"},\"D\":{\"op_title\":\"var_dump((bool) 2.3e5);\"},\"E\":{\"op_title\":\"var_dump((bool) array(12));\"}}', 'B,C,D,E', '0', '0', '0', '当转换为 boolean（布尔类型）时，以下值被认为是 FALSE。\r\n1）布尔值 FALSE 本身。\r\n2）整型值 0 （零）。\r\n3）浮点型 0.0 （零）。\r\n4）空字符串，以及字符串 \"0\"。\r\n5）不包括任何元素的数组。如：array();\r\n6）特殊类型 NULL （包括尚未赋值的变量）。\r\n7）从空标记生成的 SimpleXML 对象。\r\n\r\n除此之外，所有其他值都被认为是 TRUE（包括任何资源和 NAN）。', '0', '1', '1', '2018-05-12 13:30:45', '1', '2017-04-21 23:50:01');
INSERT INTO `gm_question` VALUES ('100002', '108100000000000000000000000000', 'PHP 数据类型有几种？', '', '{\"A\":{\"op_title\":\"6\"},\"B\":{\"op_title\":\"7\"},\"C\":{\"op_title\":\"8\"},\"D\":{\"op_title\":\"9\"},\"E\":{\"op_title\":\"10\"}}', 'D', '0', '0', '0', 'PHP 支持 9 种原始数据类型。四种标题类型：boolean(布尔型)、integer(整型)、float(浮点型,也称作 double)、string(字符串)。三种复合类型：array(数组)、object(对象)、callable(可调用)。最后是两种特殊类型：resource(资源)、NULL(无类型)。为了确保代码的易读性，PHP 手册当中还介绍一了些伪类型：mixed(混合类型)、number(数字类型)、callback(回调类型，又称为 callable )、array|object(数组|对象类型)、void(无类型)。', '0', '1', '1', '2018-05-12 12:56:45', '1', '2018-01-09 09:45:14');
INSERT INTO `gm_question` VALUES ('100003', '108100000000000000000000000000', '以下选项中能正确转换为 false 的有哪些？', '', '{\"A\":{\"op_title\":\"var_dump((bool) \"},\"B\":{\"op_title\":\"var_dump((bool) \"},\"C\":{\"op_title\":\"var_dump((bool) \"},\"D\":{\"op_title\":\"var_dump((bool) \"},\"E\":{\"op_title\":\"var_dump(array(null));\"}}', 'D', '0', '0', '0', '当转换为 boolean（布尔类型）时，以下值被认为是 FALSE。\r\n1）布尔值 FALSE 本身。\r\n2）整型值 0 （零）。\r\n3）浮点型 0.0 （零）。\r\n4）空字符串，以及字符串 \"0\"。\r\n5）不包括任何元素的数组。如：array();\r\n6）特殊类型 NULL （包括尚未赋值的变量）。\r\n7）从空标记生成的 SimpleXML 对象。\r\n\r\n除此之外，所有其他值都被认为是 TRUE（包括任何资源和 NAN）。', '0', '1', '1', '2018-05-12 14:22:42', '1', '2018-05-09 15:13:48');
INSERT INTO `gm_question` VALUES ('100004', '108100000000000000000000000000', '以下布尔类型(boolean)写法正确的有哪些？', '', '{\"A\":{\"op_title\":\"$b = True;\"},\"B\":{\"op_title\":\"$b = False;\"},\"C\":{\"op_title\":\"$b = TRUE;\"},\"D\":{\"op_title\":\"$b = true;\"},\"E\":{\"op_title\":\"$b = tRue;\"}}', 'A,B,C,D,E', '0', '0', '0', '布尔类型不区分大小写。但是，通常我们要么大写 TRUE，要么小写 true。', '0', '1', '0', null, '1', '2018-05-12 13:22:37');
INSERT INTO `gm_question` VALUES ('100005', '108100000000000000000000000000', '$a = 1234; $a = 01234; 分别代表的十进制值是多少？', '', '{\"A\":{\"op_title\":\"1234\\u300183\"},\"B\":{\"op_title\":\"1234\\u30011234\"},\"C\":{\"op_title\":\"\"},\"D\":{\"op_title\":\"\"},\"E\":{\"op_title\":\"\"}}', 'A', '0', '0', '0', '数字前面加 0 代表八进制，加 0x 代表十六进制，加 0b 代表二进制。', '0', '1', '0', null, '1', '2018-05-12 14:34:23');
INSERT INTO `gm_question` VALUES ('100006', '108100000000000000000000000000', '在 PHP 7 之前的版本当中 $a = 019 等于多少？', '', '{\"A\":{\"op_title\":\"17\"},\"B\":{\"op_title\":\"16\"},\"C\":{\"op_title\":\"8\"},\"D\":{\"op_title\":\"\\u62a5\\u9519\"},\"E\":{\"op_title\":\"\"}}', 'C', '0', '0', '0', 'PHP 7 以前的版本里，如果向八进制数传递了一个非法数字（即 8 或 9），则后面其余数字会被忽略。PHP 7 以后，会产生 Parse Error。', '0', '1', '0', null, '1', '2018-05-12 14:36:01');
INSERT INTO `gm_question` VALUES ('100007', '108100000000000000000000000000', '在 32 位系统当中当一个整型变量超出了 integer 的范围，此时该变量的值是什么类型？', '', '{\"A\":{\"op_title\":\"int\"},\"B\":{\"op_title\":\"float\"},\"C\":{\"op_title\":\"\\u6ea2\\u51fa\\u53d8\\u8d1f\\u6570\"},\"D\":{\"op_title\":\"\"},\"E\":{\"op_title\":\"\"}}', 'B', '0', '0', '0', '如果给定的一个数超出了 integer 的范围，将会被解释为 float。同样如果执行的运算结果超出了 integer 范围，也会返回 float。', '0', '1', '0', null, '1', '2018-05-12 14:48:32');
INSERT INTO `gm_question` VALUES ('100008', '108100000000000000000000000000', '在 PHP 中以下哪个常量是用来表示 int 最大值的？', '', '{\"A\":{\"op_title\":\"PHP_MAX\"},\"B\":{\"op_title\":\"PHP_MAX_INT\"},\"C\":{\"op_title\":\"PHP_INT_MAX\"},\"D\":{\"op_title\":\"\"},\"E\":{\"op_title\":\"\"}}', 'C', '0', '0', '0', 'Integer 值的字长可以用常量 PHP_INT_SIZE来表示，自 PHP 4.4.0 和 PHP 5.0.5后，最大值可以用常量 PHP_INT_MAX 来表示，最小值可以在 PHP 7.0.0 及以后的版本中用常量 PHP_INT_MIN 表示。', '0', '1', '0', null, '1', '2018-05-13 16:54:27');
INSERT INTO `gm_question` VALUES ('100009', '108100000000000000000000000000', '下图中输出结果是多少？', '/upload/images/voucher/20180513/5af7fe6d09201.png', '{\"A\":{\"op_title\":\"true\"},\"B\":{\"op_title\":\"false\"},\"C\":{\"op_title\":\"\"},\"D\":{\"op_title\":\"\"},\"E\":{\"op_title\":\"\"}}', 'A', '0', '0', '0', '$a 和 $b 在小数点后五位精度内都是相等的。详情参见 PHP 文档：http://php.net/manual/zh/language.types.float.php', '0', '1', '0', null, '1', '2018-05-13 17:00:28');
INSERT INTO `gm_question` VALUES ('100010', '108100000000000000000000000000', '字符串最大可以多大？', '', '{\"A\":{\"op_title\":\"256MB\"},\"B\":{\"op_title\":\"1GB\"},\"C\":{\"op_title\":\"2GB\"},\"D\":{\"op_title\":\"4GB\"},\"E\":{\"op_title\":\"\\u53d6\\u51b3\\u4e8e\\u7cfb\\u7edf\\u5b57\\u957f\"}}', 'C', '0', '0', '0', '一个字符串 string 就是由一系列的字符组成，其中每个字符等同于一个字节。这意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode 。string 最大可以达到 2GB。', '0', '1', '0', null, '1', '2018-05-13 17:01:52');
INSERT INTO `gm_question` VALUES ('100011', '108100000000000000000000000000', '一个字符串可以有几种表达方式？', '', '{\"A\":{\"op_title\":\"1\"},\"B\":{\"op_title\":\"2\"},\"C\":{\"op_title\":\"3\"},\"D\":{\"op_title\":\"4\"},\"E\":{\"op_title\":\"5\"}}', 'D', '0', '0', '0', '1）单引号、2）双引号、3）heredoc 语法结构、4）nowdoc 语法结构（自 PHP 5.3.0 起）。', '0', '1', '0', null, '1', '2018-05-13 17:03:21');
INSERT INTO `gm_question` VALUES ('100012', '108100000000000000000000000000', '$str = \"\\n\"; 输出结果是什么？', '', '{\"A\":{\"op_title\":\"\\\\n\"},\"B\":{\"op_title\":\"\\u6362\\u884c\"},\"C\":{\"op_title\":\"\\u56de\\u8f66\"},\"D\":{\"op_title\":\"\"},\"E\":{\"op_title\":\"\"}}', 'B', '0', '0', '0', '在双引号当中的转义字符都会被正确转义。\\n 代表换行转义符。\\r 代表回车转义符。\\t 代表水平制表转义符。\\v 垂直转义符。', '0', '1', '0', null, '1', '2018-05-13 17:06:39');
INSERT INTO `gm_question` VALUES ('100013', '108100000000000000000000000000', '下图中在 $str 字符串中 $a 会被解析成 1 输出吗？', '/upload/images/voucher/20180513/5af8006861850.png', '{\"A\":{\"op_title\":\"\\u4f1a\"},\"B\":{\"op_title\":\"\\u4e0d\\u4f1a\"},\"C\":{\"op_title\":\"\\u62a5\\u9519\"},\"D\":{\"op_title\":\"\"},\"E\":{\"op_title\":\"\"}}', 'A', '0', '0', '0', '在字符串 Heredoc  表示法中，任何 PHP 变量都会被解析输出。', '0', '1', '0', null, '1', '2018-05-13 17:09:01');
INSERT INTO `gm_question` VALUES ('100014', '108100000000000000000000000000', '下图中的 PI 常量在字符串会被解析为 3.14 输出吗？', '/upload/images/voucher/20180513/5af800eef2b18.png', '{\"A\":{\"op_title\":\"\\u4e0d\\u4f1a\"},\"B\":{\"op_title\":\"\\u4f1a\"},\"C\":{\"op_title\":\"\\u62a5\\u9519\"},\"D\":{\"op_title\":\"\"},\"E\":{\"op_title\":\"\"}}', 'A', '0', '0', '0', '在字符串 heredoc 表示法中任何常量都不会被解析。', '0', '1', '0', null, '1', '2018-05-13 17:10:48');
INSERT INTO `gm_question` VALUES ('100015', '108100000000000000000000000000', '下图中的代码会报错吗？', '/upload/images/voucher/20180513/5af8016779d8d.png', '{\"A\":{\"op_title\":\"\\u4f1a\"},\"B\":{\"op_title\":\"\\u4e0d\\u4f1a\"},\"C\":{\"op_title\":\"\"},\"D\":{\"op_title\":\"\"},\"E\":{\"op_title\":\"\"}}', 'B', '0', '0', '0', 'heredoc 在数组中是可以这样使用的。', '0', '1', '0', null, '1', '2018-05-13 17:12:40');
INSERT INTO `gm_question` VALUES ('100016', '108100000000000000000000000000', '下图中的代码会报错吗？', '/upload/images/voucher/20180513/5af801a496064.png', '{\"A\":{\"op_title\":\"\\u4f1a\"},\"B\":{\"op_title\":\"\\u4e0d\\u4f1a\"},\"C\":{\"op_title\":\"\"},\"D\":{\"op_title\":\"\"},\"E\":{\"op_title\":\"\"}}', 'B', '0', '0', '0', '字符串 heredoc 表示法是可以在类中赋值给常量。', '0', '1', '0', null, '1', '2018-05-13 17:13:52');
INSERT INTO `gm_question` VALUES ('100017', '108100000000000000000000000000', '下图中输出结果是？', '/upload/images/voucher/20180513/5af80379aa8dc.png', '{\"A\":{\"op_title\":\"I am a {$nickname}!\"},\"B\":{\"op_title\":\"I am a superman!\"},\"C\":{\"op_title\":\"\\u62a5\\u9519\"},\"D\":{\"op_title\":\"\"},\"E\":{\"op_title\":\"\"}}', 'B', '0', '0', '0', '在字符串，一个变量可以用花括号包含起来。一定要注意花括号内部与变量不能有空格。如：{ $nickname} 或 {$nickname } 都是错误写法。', '0', '1', '1', '2018-05-13 17:20:58', '1', '2018-05-13 17:20:09');
INSERT INTO `gm_question` VALUES ('100018', '108100000000000000000000000000', '如果想在字符串输出包含 $ 符号字符串 $str，以下做法正确的是？', '', '{\"A\":{\"op_title\":\"echo \\\"\\\\$str\\\";\"},\"B\":{\"op_title\":\"echo \\\"$str\\\"\"},\"C\":{\"op_title\":\"\"},\"D\":{\"op_title\":\"\"},\"E\":{\"op_title\":\"\"}}', 'A', '0', '0', '0', '如果 $ 符号前面不加转义符 \\，那么，PHP 会认为这是一个变量。就会报 Notice 错误。', '0', '1', '0', null, '1', '2018-05-13 17:24:36');
INSERT INTO `gm_question` VALUES ('100019', '108100000000000000000000000000', '下图中代码输出结果是多少？', '/upload/images/voucher/20180513/5af804c42c652.png', '{\"A\":{\"op_title\":\"1\"},\"B\":{\"op_title\":\"2\"},\"C\":{\"op_title\":\"\\u62a5\\u9519\"},\"D\":{\"op_title\":\"\"},\"E\":{\"op_title\":\"\"}}', 'B', '0', '0', '0', 'PHP 当中是允许把字符串当数组进行读取。下标 0 代表第一个字符，以此类推。', '0', '1', '0', null, '1', '2018-05-13 17:27:18');
INSERT INTO `gm_question` VALUES ('100020', '108100000000000000000000000000', '以下代码能输出\"是\"吗？', '/upload/images/voucher/20180513/5af805382fb09.png', '{\"A\":{\"op_title\":\"\\u80fd\"},\"B\":{\"op_title\":\"\\u4e0d\\u80fd\"},\"C\":{\"op_title\":\"\\u62a5\\u9519\"},\"D\":{\"op_title\":\"\"},\"E\":{\"op_title\":\"\"}}', 'B', '0', '0', '0', '在 PHP 当中是允许把字符串当作数组读取。但是，该图中由于我们是中文。在 Unicode 表示中，一个中文是用三个字节表示。而这种读取方式是以字节读取。所以，取下标为 1 只能得到第一个字符的第2个字节。', '0', '1', '0', null, '1', '2018-05-13 17:30:15');
INSERT INTO `gm_question` VALUES ('100021', '108100000000000000000000000000', '以下代码输出的结果是多少？', '/upload/images/voucher/20180513/5af805e9ed169.png', '{\"A\":{\"op_title\":\"1\"},\"B\":{\"op_title\":\"2\"},\"C\":{\"op_title\":\"3\"},\"D\":{\"op_title\":\"\\u62a5\\u9519\"},\"E\":{\"op_title\":\"\"}}', 'B', '0', '0', '0', '在 PHP 当中是可以使用 {} 把字符串当作数组读取。0 代表下标第一个字节。以此类推。', '0', '1', '1', '2018-06-10 00:37:22', '1', '2018-06-10 00:37:22');

-- ----------------------------
-- Table structure for gm_question_record
-- ----------------------------
DROP TABLE IF EXISTS `gm_question_record`;
CREATE TABLE `gm_question_record` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `question_id` int(11) unsigned NOT NULL COMMENT '题目ID',
  `user_id` int(11) unsigned NOT NULL COMMENT '用户ID',
  `user_answer` char(1) NOT NULL COMMENT '答案编号。单选时：A，多选时：A,B,C',
  `right_or_no` tinyint(1) NOT NULL COMMENT '用户回答结果正确与否。1正确、0错误。',
  `status` tinyint(1) NOT NULL COMMENT '状态：0无效、1正常、2删除',
  `modified_time` datetime DEFAULT NULL COMMENT '修改时间戳',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间戳',
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `guess_id` (`question_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COMMENT='题库参与记录表';

-- ----------------------------
-- Records of gm_question_record
-- ----------------------------
INSERT INTO `gm_question_record` VALUES ('1', '1', '1', 'A', '0', '1', '2017-09-17 19:14:05', '2017-09-16 16:07:24');
INSERT INTO `gm_question_record` VALUES ('2', '1', '1', 'A', '0', '1', '2017-09-17 19:14:05', '2017-09-16 16:07:24');
INSERT INTO `gm_question_record` VALUES ('3', '1', '1', 'A', '0', '1', '2017-09-17 19:14:05', '2017-09-16 16:07:26');
INSERT INTO `gm_question_record` VALUES ('4', '1', '1', 'A', '0', '1', '2017-09-17 19:14:05', '2017-09-16 16:07:26');

-- ----------------------------
-- Table structure for ms_admin
-- ----------------------------
DROP TABLE IF EXISTS `ms_admin`;
CREATE TABLE `ms_admin` (
  `admin_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '管理员ID',
  `realname` char(20) NOT NULL COMMENT '真实姓名',
  `username` char(20) NOT NULL COMMENT '账号',
  `password` char(32) NOT NULL COMMENT '密码',
  `salt` char(6) NOT NULL COMMENT '密码盐',
  `mobilephone` char(11) NOT NULL DEFAULT '' COMMENT '手机号码',
  `roleid` smallint(3) NOT NULL DEFAULT '0' COMMENT '角色ID',
  `lastlogintime` datetime DEFAULT NULL COMMENT '最后登录时间戳',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态：0失效、1有效、2删除',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '修改人ID',
  `modified_time` datetime DEFAULT NULL COMMENT '修改时间',
  `created_by` int(11) unsigned NOT NULL COMMENT '创建人ID',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`admin_id`),
  KEY `username` (`username`),
  KEY `mobilephone` (`mobilephone`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COMMENT='管理员表';

-- ----------------------------
-- Records of ms_admin
-- ----------------------------
INSERT INTO `ms_admin` VALUES ('1', '超级管理员', 'admin', '55f529b73cc731cc7f65a15da4cc5a43', 'jCSaub', '14801010101', '1', '2018-09-05 14:33:18', '1', '1', '2018-09-05 14:33:18', '0', '2018-09-05 14:33:18');

-- ----------------------------
-- Table structure for ms_admin_login_history
-- ----------------------------
DROP TABLE IF EXISTS `ms_admin_login_history`;
CREATE TABLE `ms_admin_login_history` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
  `admin_id` int(11) unsigned NOT NULL COMMENT '管理员ID',
  `browser_type` char(10) NOT NULL COMMENT '浏览器类型。tablet平板、phone手机、computer电脑',
  `user_agent` varchar(200) NOT NULL COMMENT '浏览器UA',
  `ip` char(15) NOT NULL COMMENT '登录IP',
  `address` varchar(100) NOT NULL DEFAULT '' COMMENT 'IP对应的地址信息',
  `modified_time` datetime NOT NULL COMMENT '更新时间',
  `created_time` datetime NOT NULL COMMENT '登录时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=72 DEFAULT CHARSET=utf8 COMMENT='管理员登录历史表';

-- ----------------------------
-- Records of ms_admin_login_history
-- ----------------------------
INSERT INTO `ms_admin_login_history` VALUES ('1', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36', '10.0.2.2', '', '0000-00-00 00:00:00', '2018-02-07 09:22:03');
INSERT INTO `ms_admin_login_history` VALUES ('2', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '183.15.179.225', '', '0000-00-00 00:00:00', '2018-02-27 15:14:42');
INSERT INTO `ms_admin_login_history` VALUES ('3', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '183.15.179.225', '', '0000-00-00 00:00:00', '2018-02-27 18:14:36');
INSERT INTO `ms_admin_login_history` VALUES ('4', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '183.15.178.65', '', '0000-00-00 00:00:00', '2018-02-28 09:02:44');
INSERT INTO `ms_admin_login_history` VALUES ('5', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '183.14.134.232', '', '0000-00-00 00:00:00', '2018-02-28 14:52:18');
INSERT INTO `ms_admin_login_history` VALUES ('6', '1', 'computer', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36', '183.15.178.65', '', '0000-00-00 00:00:00', '2018-02-28 17:45:41');
INSERT INTO `ms_admin_login_history` VALUES ('7', '1', 'computer', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36', '183.15.178.65', '', '0000-00-00 00:00:00', '2018-02-28 17:48:42');
INSERT INTO `ms_admin_login_history` VALUES ('8', '4', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '183.15.178.65', '', '0000-00-00 00:00:00', '2018-03-01 08:32:32');
INSERT INTO `ms_admin_login_history` VALUES ('9', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '183.15.178.65', '', '0000-00-00 00:00:00', '2018-03-01 15:51:51');
INSERT INTO `ms_admin_login_history` VALUES ('10', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '10.0.2.2', '', '0000-00-00 00:00:00', '2018-03-01 17:06:12');
INSERT INTO `ms_admin_login_history` VALUES ('11', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '10.0.2.2', '', '0000-00-00 00:00:00', '2018-03-01 19:07:10');
INSERT INTO `ms_admin_login_history` VALUES ('12', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '183.15.178.65', '', '0000-00-00 00:00:00', '2018-03-01 19:56:16');
INSERT INTO `ms_admin_login_history` VALUES ('13', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '113.87.162.252', '', '0000-00-00 00:00:00', '2018-03-01 23:11:56');
INSERT INTO `ms_admin_login_history` VALUES ('14', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '183.15.176.91', '', '0000-00-00 00:00:00', '2018-03-02 09:51:59');
INSERT INTO `ms_admin_login_history` VALUES ('15', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '10.0.2.2', '', '0000-00-00 00:00:00', '2018-03-02 11:40:02');
INSERT INTO `ms_admin_login_history` VALUES ('16', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '183.14.135.106', '', '0000-00-00 00:00:00', '2018-03-02 14:34:08');
INSERT INTO `ms_admin_login_history` VALUES ('17', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '116.24.66.102', '', '0000-00-00 00:00:00', '2018-03-05 18:57:06');
INSERT INTO `ms_admin_login_history` VALUES ('18', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '116.24.64.237', '', '0000-00-00 00:00:00', '2018-03-06 17:17:47');
INSERT INTO `ms_admin_login_history` VALUES ('19', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '61.141.65.49', '', '0000-00-00 00:00:00', '2018-03-08 11:28:16');
INSERT INTO `ms_admin_login_history` VALUES ('20', '1', 'computer', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36', '183.132.48.245', '', '0000-00-00 00:00:00', '2018-03-20 14:05:30');
INSERT INTO `ms_admin_login_history` VALUES ('21', '1', 'computer', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36', '183.132.48.245', '', '0000-00-00 00:00:00', '2018-03-20 21:28:01');
INSERT INTO `ms_admin_login_history` VALUES ('22', '1', 'phone', 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_2_6 like Mac OS X) AppleWebKit/604.5.6 (KHTML, like Gecko) Version/11.0 Mobile/15D100 Safari/604.1', '112.97.62.96', '', '0000-00-00 00:00:00', '2018-03-22 11:10:58');
INSERT INTO `ms_admin_login_history` VALUES ('23', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '183.15.179.52', '', '0000-00-00 00:00:00', '2018-03-27 08:46:52');
INSERT INTO `ms_admin_login_history` VALUES ('24', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36', '183.14.29.9', '', '0000-00-00 00:00:00', '2018-03-27 16:55:00');
INSERT INTO `ms_admin_login_history` VALUES ('25', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36', '183.15.177.216', '', '0000-00-00 00:00:00', '2018-03-29 11:12:07');
INSERT INTO `ms_admin_login_history` VALUES ('26', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36', '183.15.177.216', '', '0000-00-00 00:00:00', '2018-03-30 15:53:46');
INSERT INTO `ms_admin_login_history` VALUES ('27', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36', '116.24.66.146', '', '0000-00-00 00:00:00', '2018-04-03 11:31:35');
INSERT INTO `ms_admin_login_history` VALUES ('28', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36', '183.15.177.53', '', '0000-00-00 00:00:00', '2018-04-10 20:00:15');
INSERT INTO `ms_admin_login_history` VALUES ('29', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36', '183.15.177.53', '', '0000-00-00 00:00:00', '2018-04-10 20:01:46');
INSERT INTO `ms_admin_login_history` VALUES ('30', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36', '183.15.177.53', '', '0000-00-00 00:00:00', '2018-04-10 20:02:28');
INSERT INTO `ms_admin_login_history` VALUES ('31', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36', '183.15.177.53', '', '0000-00-00 00:00:00', '2018-04-10 20:02:30');
INSERT INTO `ms_admin_login_history` VALUES ('32', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36', '183.15.177.53', '', '0000-00-00 00:00:00', '2018-04-10 20:02:42');
INSERT INTO `ms_admin_login_history` VALUES ('33', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '163.125.115.146', '', '0000-00-00 00:00:00', '2018-04-12 22:21:35');
INSERT INTO `ms_admin_login_history` VALUES ('34', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36', '116.24.65.14', '', '0000-00-00 00:00:00', '2018-04-23 11:10:55');
INSERT INTO `ms_admin_login_history` VALUES ('35', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '10.0.2.2', '', '0000-00-00 00:00:00', '2018-05-01 11:56:05');
INSERT INTO `ms_admin_login_history` VALUES ('36', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36', '10.0.2.2', '', '0000-00-00 00:00:00', '2018-05-03 08:34:21');
INSERT INTO `ms_admin_login_history` VALUES ('37', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36', '10.0.2.2', '', '0000-00-00 00:00:00', '2018-05-03 16:49:53');
INSERT INTO `ms_admin_login_history` VALUES ('38', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36', '10.0.2.2', '', '0000-00-00 00:00:00', '2018-05-03 19:25:03');
INSERT INTO `ms_admin_login_history` VALUES ('39', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '10.0.2.2', '', '0000-00-00 00:00:00', '2018-05-07 21:03:58');
INSERT INTO `ms_admin_login_history` VALUES ('40', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36', '10.0.2.2', '', '0000-00-00 00:00:00', '2018-05-09 11:22:37');
INSERT INTO `ms_admin_login_history` VALUES ('41', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '163.125.232.160', '', '0000-00-00 00:00:00', '2018-05-12 12:48:13');
INSERT INTO `ms_admin_login_history` VALUES ('42', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36', '163.125.222.73', '', '0000-00-00 00:00:00', '2018-05-13 16:50:18');
INSERT INTO `ms_admin_login_history` VALUES ('43', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36', '183.15.177.63', '', '0000-00-00 00:00:00', '2018-05-14 11:40:21');
INSERT INTO `ms_admin_login_history` VALUES ('44', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36', '183.14.132.86', '', '0000-00-00 00:00:00', '2018-05-14 17:05:44');
INSERT INTO `ms_admin_login_history` VALUES ('45', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36', '183.15.177.63', '', '0000-00-00 00:00:00', '2018-05-14 18:13:23');
INSERT INTO `ms_admin_login_history` VALUES ('46', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36', '183.15.177.63', '', '0000-00-00 00:00:00', '2018-05-14 19:50:39');
INSERT INTO `ms_admin_login_history` VALUES ('47', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36', '116.24.67.220', '', '0000-00-00 00:00:00', '2018-05-15 13:58:08');
INSERT INTO `ms_admin_login_history` VALUES ('48', '1', 'computer', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '127.0.0.1', '', '2018-06-10 00:36:08', '2018-06-10 00:36:08');
INSERT INTO `ms_admin_login_history` VALUES ('49', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '183.14.133.68', '', '2018-06-16 14:56:27', '2018-06-16 14:56:27');
INSERT INTO `ms_admin_login_history` VALUES ('50', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '61.141.65.82', '', '2018-07-19 10:39:18', '2018-07-19 10:39:18');
INSERT INTO `ms_admin_login_history` VALUES ('51', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '61.141.65.82', '', '2018-07-19 10:45:50', '2018-07-19 10:45:50');
INSERT INTO `ms_admin_login_history` VALUES ('52', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '10.0.2.2', '', '2018-07-19 14:27:29', '2018-07-19 14:27:29');
INSERT INTO `ms_admin_login_history` VALUES ('53', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '183.14.31.96', '', '2018-07-19 14:32:20', '2018-07-19 14:32:20');
INSERT INTO `ms_admin_login_history` VALUES ('54', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '10.0.2.2', '', '2018-07-19 15:54:11', '2018-07-19 15:54:11');
INSERT INTO `ms_admin_login_history` VALUES ('55', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '61.141.65.82', '', '2018-07-19 16:53:27', '2018-07-19 16:53:27');
INSERT INTO `ms_admin_login_history` VALUES ('56', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '10.0.2.2', '', '2018-07-19 18:07:41', '2018-07-19 18:07:41');
INSERT INTO `ms_admin_login_history` VALUES ('57', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '61.141.65.82', '', '2018-07-19 18:14:53', '2018-07-19 18:14:53');
INSERT INTO `ms_admin_login_history` VALUES ('58', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '183.14.31.96', '', '2018-07-20 08:53:52', '2018-07-20 08:53:52');
INSERT INTO `ms_admin_login_history` VALUES ('59', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '183.15.178.112', '', '2018-07-23 15:11:55', '2018-07-23 15:11:55');
INSERT INTO `ms_admin_login_history` VALUES ('60', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '116.24.65.33', '', '2018-07-30 14:49:31', '2018-07-30 14:49:31');
INSERT INTO `ms_admin_login_history` VALUES ('61', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '116.24.65.33', '', '2018-07-31 11:29:42', '2018-07-31 11:29:42');
INSERT INTO `ms_admin_login_history` VALUES ('62', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36', '61.141.65.177', '', '2018-08-01 09:08:28', '2018-08-01 09:08:28');
INSERT INTO `ms_admin_login_history` VALUES ('63', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36', '61.141.64.98', '', '2018-08-03 11:58:10', '2018-08-03 11:58:10');
INSERT INTO `ms_admin_login_history` VALUES ('64', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36', '116.24.66.169', '', '2018-08-20 11:21:12', '2018-08-20 11:21:12');
INSERT INTO `ms_admin_login_history` VALUES ('65', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36', '183.15.179.191', '', '2018-08-28 17:34:17', '2018-08-28 17:34:17');
INSERT INTO `ms_admin_login_history` VALUES ('66', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36', '183.15.176.83', '', '2018-08-30 09:15:59', '2018-08-30 09:15:59');
INSERT INTO `ms_admin_login_history` VALUES ('67', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36', '183.15.176.83', '', '2018-08-30 11:27:02', '2018-08-30 11:27:02');
INSERT INTO `ms_admin_login_history` VALUES ('68', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36', '116.24.65.49', '', '2018-09-04 10:14:07', '2018-09-04 10:14:07');
INSERT INTO `ms_admin_login_history` VALUES ('69', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36', '116.24.66.87', '', '2018-09-05 14:22:06', '2018-09-05 14:22:06');
INSERT INTO `ms_admin_login_history` VALUES ('70', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36', '116.24.66.87', '', '2018-09-05 14:22:30', '2018-09-05 14:22:30');
INSERT INTO `ms_admin_login_history` VALUES ('71', '1', 'computer', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36', '116.24.66.87', '', '2018-09-05 14:33:18', '2018-09-05 14:33:18');

-- ----------------------------
-- Table structure for ms_admin_role
-- ----------------------------
DROP TABLE IF EXISTS `ms_admin_role`;
CREATE TABLE `ms_admin_role` (
  `roleid` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '角色ID',
  `rolename` char(20) NOT NULL COMMENT '角色名称',
  `listorder` smallint(3) NOT NULL DEFAULT '0' COMMENT '排序。小在前。',
  `description` char(255) NOT NULL DEFAULT '' COMMENT '角色说明',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态：0失效、1有效、2删除',
  `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT '默认角色拥有最高权限。不可删除此默认角色。超级管理员只能属于此角色，其他用户不可分配此角色',
  `modified_time` datetime NOT NULL COMMENT '更新时间',
  `created_time` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`roleid`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT='角色表';

-- ----------------------------
-- Records of ms_admin_role
-- ----------------------------
INSERT INTO `ms_admin_role` VALUES ('1', '超级管理员', '0', '超级管理员', '1', '1', '2018-07-19 14:28:11', '2018-07-19 14:28:11');
INSERT INTO `ms_admin_role` VALUES ('2', '开发人员', '0', '开发人员', '1', '0', '2018-07-19 14:28:13', '2018-07-19 14:28:13');

-- ----------------------------
-- Table structure for ms_admin_role_priv
-- ----------------------------
DROP TABLE IF EXISTS `ms_admin_role_priv`;
CREATE TABLE `ms_admin_role_priv` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
  `roleid` smallint(3) unsigned NOT NULL DEFAULT '0' COMMENT '角色ID',
  `menu_id` int(11) unsigned NOT NULL COMMENT '菜单ID',
  `modified_time` datetime NOT NULL COMMENT '更新时间',
  `created_time` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`),
  KEY `roleid` (`roleid`)
) ENGINE=InnoDB AUTO_INCREMENT=181 DEFAULT CHARSET=utf8 COMMENT='角色权限表';

-- ----------------------------
-- Records of ms_admin_role_priv
-- ----------------------------
INSERT INTO `ms_admin_role_priv` VALUES ('71', '1', '1000', '2018-07-19 10:50:16', '2018-07-19 10:50:16');
INSERT INTO `ms_admin_role_priv` VALUES ('72', '1', '1001', '2018-07-19 10:50:16', '2018-07-19 10:50:16');
INSERT INTO `ms_admin_role_priv` VALUES ('73', '1', '1002', '2018-07-19 10:50:16', '2018-07-19 10:50:16');
INSERT INTO `ms_admin_role_priv` VALUES ('74', '1', '1003', '2018-07-19 10:50:16', '2018-07-19 10:50:16');
INSERT INTO `ms_admin_role_priv` VALUES ('75', '1', '2000', '2018-07-19 10:50:16', '2018-07-19 10:50:16');
INSERT INTO `ms_admin_role_priv` VALUES ('76', '1', '2001', '2018-07-19 10:50:16', '2018-07-19 10:50:16');
INSERT INTO `ms_admin_role_priv` VALUES ('77', '1', '2002', '2018-07-19 10:50:16', '2018-07-19 10:50:16');
INSERT INTO `ms_admin_role_priv` VALUES ('78', '1', '2003', '2018-07-19 10:50:16', '2018-07-19 10:50:16');
INSERT INTO `ms_admin_role_priv` VALUES ('79', '1', '2004', '2018-07-19 10:50:16', '2018-07-19 10:50:16');
INSERT INTO `ms_admin_role_priv` VALUES ('80', '1', '2005', '2018-07-19 10:50:16', '2018-07-19 10:50:16');
INSERT INTO `ms_admin_role_priv` VALUES ('81', '1', '2006', '2018-07-19 10:50:16', '2018-07-19 10:50:16');
INSERT INTO `ms_admin_role_priv` VALUES ('82', '1', '2007', '2018-07-19 10:50:16', '2018-07-19 10:50:16');
INSERT INTO `ms_admin_role_priv` VALUES ('83', '1', '2008', '2018-07-19 10:50:16', '2018-07-19 10:50:16');
INSERT INTO `ms_admin_role_priv` VALUES ('84', '1', '2009', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('85', '1', '2010', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('86', '1', '2011', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('87', '1', '2012', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('88', '1', '2013', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('89', '1', '2014', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('90', '1', '2015', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('91', '1', '2016', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('92', '1', '2017', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('93', '1', '2018', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('94', '1', '2019', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('95', '1', '2020', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('96', '1', '2021', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('97', '1', '2022', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('98', '1', '2023', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('99', '1', '8103', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('100', '1', '2500', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('101', '1', '2501', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('102', '1', '2700', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('103', '1', '2701', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('104', '1', '2702', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('105', '1', '2703', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('106', '1', '2704', '2018-07-19 10:50:17', '2018-07-19 10:50:17');
INSERT INTO `ms_admin_role_priv` VALUES ('107', '2', '1000', '2018-07-19 10:50:34', '2018-07-19 10:50:34');
INSERT INTO `ms_admin_role_priv` VALUES ('108', '2', '1001', '2018-07-19 10:50:34', '2018-07-19 10:50:34');
INSERT INTO `ms_admin_role_priv` VALUES ('109', '2', '1002', '2018-07-19 10:50:34', '2018-07-19 10:50:34');
INSERT INTO `ms_admin_role_priv` VALUES ('110', '2', '1003', '2018-07-19 10:50:34', '2018-07-19 10:50:34');
INSERT INTO `ms_admin_role_priv` VALUES ('111', '2', '2000', '2018-07-19 10:50:34', '2018-07-19 10:50:34');
INSERT INTO `ms_admin_role_priv` VALUES ('112', '2', '2001', '2018-07-19 10:50:34', '2018-07-19 10:50:34');
INSERT INTO `ms_admin_role_priv` VALUES ('113', '2', '2002', '2018-07-19 10:50:34', '2018-07-19 10:50:34');
INSERT INTO `ms_admin_role_priv` VALUES ('114', '2', '2003', '2018-07-19 10:50:34', '2018-07-19 10:50:34');
INSERT INTO `ms_admin_role_priv` VALUES ('115', '2', '2004', '2018-07-19 10:50:34', '2018-07-19 10:50:34');
INSERT INTO `ms_admin_role_priv` VALUES ('116', '2', '2005', '2018-07-19 10:50:34', '2018-07-19 10:50:34');
INSERT INTO `ms_admin_role_priv` VALUES ('117', '2', '2006', '2018-07-19 10:50:34', '2018-07-19 10:50:34');
INSERT INTO `ms_admin_role_priv` VALUES ('118', '2', '2007', '2018-07-19 10:50:34', '2018-07-19 10:50:34');
INSERT INTO `ms_admin_role_priv` VALUES ('119', '2', '2008', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('120', '2', '2009', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('121', '2', '2010', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('122', '2', '2011', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('123', '2', '2012', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('124', '2', '2013', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('125', '2', '2014', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('126', '2', '2015', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('127', '2', '2016', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('128', '2', '2017', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('129', '2', '2018', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('130', '2', '2019', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('131', '2', '2020', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('132', '2', '2021', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('133', '2', '2022', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('134', '2', '2023', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('135', '2', '8103', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('136', '2', '2500', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('137', '2', '2501', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('138', '2', '2700', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('139', '2', '2701', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('140', '2', '2702', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('141', '2', '2703', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('142', '2', '2704', '2018-07-19 10:50:35', '2018-07-19 10:50:35');
INSERT INTO `ms_admin_role_priv` VALUES ('143', '2', '3000', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('144', '2', '3001', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('145', '2', '3002', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('146', '2', '3100', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('147', '2', '3101', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('148', '2', '3102', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('149', '2', '3103', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('150', '2', '3104', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('151', '2', '3105', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('152', '2', '4000', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('153', '2', '4001', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('154', '2', '4002', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('155', '2', '4003', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('156', '2', '4004', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('157', '2', '4005', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('158', '2', '4006', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('159', '2', '4100', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('160', '2', '4101', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('161', '2', '4102', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('162', '2', '4103', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('163', '2', '4104', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('164', '2', '4105', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('165', '2', '8104', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('166', '2', '5000', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('167', '2', '5001', '2018-07-19 10:50:36', '2018-07-19 10:50:36');
INSERT INTO `ms_admin_role_priv` VALUES ('168', '2', '5002', '2018-07-19 10:50:37', '2018-07-19 10:50:37');
INSERT INTO `ms_admin_role_priv` VALUES ('169', '2', '5003', '2018-07-19 10:50:37', '2018-07-19 10:50:37');
INSERT INTO `ms_admin_role_priv` VALUES ('170', '2', '5004', '2018-07-19 10:50:37', '2018-07-19 10:50:37');
INSERT INTO `ms_admin_role_priv` VALUES ('171', '2', '5005', '2018-07-19 10:50:37', '2018-07-19 10:50:37');
INSERT INTO `ms_admin_role_priv` VALUES ('172', '2', '5006', '2018-07-19 10:50:37', '2018-07-19 10:50:37');
INSERT INTO `ms_admin_role_priv` VALUES ('173', '2', '5007', '2018-07-19 10:50:37', '2018-07-19 10:50:37');
INSERT INTO `ms_admin_role_priv` VALUES ('174', '2', '7000', '2018-07-19 10:50:37', '2018-07-19 10:50:37');
INSERT INTO `ms_admin_role_priv` VALUES ('175', '2', '7200', '2018-07-19 10:50:37', '2018-07-19 10:50:37');
INSERT INTO `ms_admin_role_priv` VALUES ('176', '2', '7201', '2018-07-19 10:50:37', '2018-07-19 10:50:37');
INSERT INTO `ms_admin_role_priv` VALUES ('177', '2', '7202', '2018-07-19 10:50:37', '2018-07-19 10:50:37');
INSERT INTO `ms_admin_role_priv` VALUES ('178', '2', '7203', '2018-07-19 10:50:37', '2018-07-19 10:50:37');
INSERT INTO `ms_admin_role_priv` VALUES ('179', '2', '7204', '2018-07-19 10:50:37', '2018-07-19 10:50:37');
INSERT INTO `ms_admin_role_priv` VALUES ('180', '2', '7205', '2018-07-19 10:50:37', '2018-07-19 10:50:37');

-- ----------------------------
-- Table structure for ms_category
-- ----------------------------
DROP TABLE IF EXISTS `ms_category`;
CREATE TABLE `ms_category` (
  `cat_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '分类ID',
  `cat_name` varchar(50) NOT NULL COMMENT '分类名称',
  `cat_type` smallint(3) NOT NULL COMMENT '分类类型。见category_type_list字典。',
  `parentid` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '父分类ID',
  `lv` smallint(3) NOT NULL COMMENT '菜单层级',
  `cat_code` varchar(50) NOT NULL COMMENT '分类code编',
  `is_out_url` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否外部链接：1是、0否',
  `out_url` varchar(255) NOT NULL DEFAULT '' COMMENT '外部链接地址',
  `display` tinyint(1) NOT NULL DEFAULT '0' COMMENT '显示状态：1是、0否',
  `tpl_name` char(50) NOT NULL DEFAULT '' COMMENT '模板名称',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态：0无效、1正常、2删除',
  `listorder` smallint(5) NOT NULL DEFAULT '0' COMMENT '排序值。小到大排列。',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '修改人',
  `modified_time` datetime DEFAULT NULL COMMENT '修改时间戳',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间戳',
  `created_by` int(11) unsigned NOT NULL COMMENT '管理员账号ID',
  PRIMARY KEY (`cat_id`),
  KEY `cat_code` (`cat_code`)
) ENGINE=InnoDB AUTO_INCREMENT=77 DEFAULT CHARSET=utf8 COMMENT='分类表';

-- ----------------------------
-- Records of ms_category
-- ----------------------------
INSERT INTO `ms_category` VALUES ('1', 'PHP 基础', '1', '0', '1', '100000000000000000000000000000', '0', '', '1', '', '1', '1', '0', '2018-09-04 10:34:33', '2018-09-04 10:34:33', '1');
INSERT INTO `ms_category` VALUES ('2', 'PHP 高级', '1', '0', '1', '101000000000000000000000000000', '0', '', '1', '', '1', '1', '0', '2018-09-04 10:34:33', '2018-09-04 10:34:33', '1');
INSERT INTO `ms_category` VALUES ('3', 'MySQL 基础', '1', '0', '1', '102000000000000000000000000000', '0', '', '1', '', '1', '1', '1', '2018-09-04 10:34:33', '2018-09-04 10:34:33', '1');
INSERT INTO `ms_category` VALUES ('4', 'MySQL 高级', '1', '0', '1', '103000000000000000000000000000', '0', '', '1', '', '1', '1', '0', '2018-09-04 10:34:33', '2018-09-04 10:34:33', '1');
INSERT INTO `ms_category` VALUES ('5', 'PHP 必读', '1', '0', '1', '104000000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:32', '2018-09-04 10:34:32', '1');
INSERT INTO `ms_category` VALUES ('6', '必读', '1', '5', '2', '104100000000000000000000000000', '0', '', '1', '', '1', '0', '1', '2018-09-04 10:34:32', '2018-09-04 10:34:32', '1');
INSERT INTO `ms_category` VALUES ('14', 'PHP 环境', '1', '1', '2', '100100000000000000000000000000', '0', '', '1', '', '1', '0', '1', '2018-09-04 10:34:33', '2018-09-04 10:34:33', '1');
INSERT INTO `ms_category` VALUES ('15', '精品收集', '1', '2', '2', '101100000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:33', '2018-09-04 10:34:33', '1');
INSERT INTO `ms_category` VALUES ('16', '服务器部署', '1', '2', '2', '101101000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:33', '2018-09-04 10:34:33', '1');
INSERT INTO `ms_category` VALUES ('17', 'Linux 服务器', '1', '0', '1', '106000000000000000000000000000', '0', '', '1', '', '1', '0', '1', '2018-09-04 10:34:31', '2018-09-04 10:34:31', '1');
INSERT INTO `ms_category` VALUES ('18', '基础', '1', '17', '2', '106100000000000000000000000000', '0', '', '1', '', '1', '0', '1', '2018-09-04 10:34:31', '2018-09-04 10:34:31', '1');
INSERT INTO `ms_category` VALUES ('19', 'CURD', '1', '3', '2', '102100000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:33', '2018-09-04 10:34:33', '1');
INSERT INTO `ms_category` VALUES ('20', '优化', '1', '4', '2', '103100000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:33', '2018-09-04 10:34:33', '1');
INSERT INTO `ms_category` VALUES ('25', 'PHP 基础', '2', '0', '1', '108000000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 08:50:29', '1');
INSERT INTO `ms_category` VALUES ('26', '数据类型', '2', '25', '2', '108100000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 16:32:53', '1');
INSERT INTO `ms_category` VALUES ('27', '类与对象', '2', '25', '2', '108101000000000000000000000000', '0', '', '1', '', '1', '0', '1', '2018-05-03 16:56:26', '2018-05-03 16:33:02', '1');
INSERT INTO `ms_category` VALUES ('28', '文件操作', '2', '25', '2', '108102000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 16:33:11', '1');
INSERT INTO `ms_category` VALUES ('29', '预定义常量', '2', '25', '2', '108103000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 16:51:36', '1');
INSERT INTO `ms_category` VALUES ('30', '预定义接口', '2', '25', '2', '108104000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 16:51:46', '1');
INSERT INTO `ms_category` VALUES ('31', '预定义变量', '2', '25', '2', '108105000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 16:52:24', '1');
INSERT INTO `ms_category` VALUES ('32', '生成器', '2', '25', '2', '108106000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 16:53:10', '1');
INSERT INTO `ms_category` VALUES ('33', '异常', '2', '25', '2', '108107000000000000000000000000', '0', '', '1', '', '1', '0', '1', '2018-05-03 16:53:36', '2018-05-03 16:53:18', '1');
INSERT INTO `ms_category` VALUES ('34', 'Errors', '2', '25', '2', '108108000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 16:53:50', '1');
INSERT INTO `ms_category` VALUES ('35', '引用', '2', '25', '2', '108109000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 16:54:11', '1');
INSERT INTO `ms_category` VALUES ('36', '命名空间', '2', '25', '2', '108110000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 16:56:09', '1');
INSERT INTO `ms_category` VALUES ('37', '函数', '2', '25', '2', '108111000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 16:56:43', '1');
INSERT INTO `ms_category` VALUES ('38', '运算符', '2', '25', '2', '108112000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 16:57:00', '1');
INSERT INTO `ms_category` VALUES ('39', '协议', '2', '25', '2', '108113000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 16:58:12', '1');
INSERT INTO `ms_category` VALUES ('40', 'PHP 高级', '2', '0', '1', '109000000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 17:38:35', '1');
INSERT INTO `ms_category` VALUES ('41', 'Cookie', '2', '25', '2', '108114000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 17:40:09', '1');
INSERT INTO `ms_category` VALUES ('42', 'Session', '2', '25', '2', '108115000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 17:40:20', '1');
INSERT INTO `ms_category` VALUES ('43', 'Header 头', '2', '25', '2', '108116000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 18:10:08', '1');
INSERT INTO `ms_category` VALUES ('44', 'Session', '2', '40', '2', '109100000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 18:16:11', '1');
INSERT INTO `ms_category` VALUES ('45', 'PHP 命令行', '2', '40', '2', '109101000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 18:16:49', '1');
INSERT INTO `ms_category` VALUES ('46', '加密', '2', '40', '2', '109102000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 18:17:04', '1');
INSERT INTO `ms_category` VALUES ('47', '多进程', '2', '40', '2', '109103000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 18:17:13', '1');
INSERT INTO `ms_category` VALUES ('48', 'PHP-FPM', '2', '40', '2', '109104000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 18:17:23', '1');
INSERT INTO `ms_category` VALUES ('49', 'Socket', '2', '40', '2', '109105000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 19:36:10', '1');
INSERT INTO `ms_category` VALUES ('50', 'PHP 配置', '2', '40', '2', '109106000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 19:42:21', '1');
INSERT INTO `ms_category` VALUES ('51', '数学扩展', '2', '40', '2', '109107000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 19:42:54', '1');
INSERT INTO `ms_category` VALUES ('52', 'XML', '2', '40', '2', '109108000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 19:44:20', '1');
INSERT INTO `ms_category` VALUES ('53', 'PHP & MySQL', '2', '40', '2', '109109000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 19:48:57', '1');
INSERT INTO `ms_category` VALUES ('54', 'PHP & Redis', '2', '40', '2', '109110000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 19:50:24', '1');
INSERT INTO `ms_category` VALUES ('55', '图片处理', '2', '40', '2', '109111000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 20:03:21', '1');
INSERT INTO `ms_category` VALUES ('56', '国际化(i18n)', '2', '40', '2', '109112000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 20:07:10', '1');
INSERT INTO `ms_category` VALUES ('57', '日期时间扩展', '2', '40', '2', '109113000000000000000000000000', '0', '', '1', '', '1', '0', '0', null, '2018-05-03 20:07:56', '1');
INSERT INTO `ms_category` VALUES ('58', '消息中间件', '1', '0', '1', '110000000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:32', '2018-09-04 10:34:32', '1');
INSERT INTO `ms_category` VALUES ('59', 'Redis', '1', '58', '2', '110100000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:32', '2018-09-04 10:34:32', '1');
INSERT INTO `ms_category` VALUES ('60', 'RabbitMQ', '1', '58', '2', '110101000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:32', '2018-09-04 10:34:32', '1');
INSERT INTO `ms_category` VALUES ('61', '综合', '1', '2', '2', '101102000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:33', '2018-09-04 10:34:33', '1');
INSERT INTO `ms_category` VALUES ('62', '性能优化', '1', '17', '2', '106101000000000000000000000000', '0', '', '1', '', '1', '0', '1', '2018-09-04 10:34:31', '2018-09-04 10:34:31', '1');
INSERT INTO `ms_category` VALUES ('63', '安全', '1', '17', '2', '106102000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:31', '2018-09-04 10:34:31', '1');
INSERT INTO `ms_category` VALUES ('64', 'Nginx', '1', '0', '1', '111000000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:32', '2018-09-04 10:34:32', '1');
INSERT INTO `ms_category` VALUES ('65', '基础', '1', '64', '2', '111100000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:32', '2018-09-04 10:34:32', '1');
INSERT INTO `ms_category` VALUES ('66', '高级', '1', '64', '2', '111101000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:32', '2018-09-04 10:34:32', '1');
INSERT INTO `ms_category` VALUES ('67', 'PHP 知多少', '1', '0', '1', '112000000000000000000000000000', '0', '', '1', '', '1', '1', '0', '2018-09-04 10:34:32', '2018-09-04 10:34:32', '1');
INSERT INTO `ms_category` VALUES ('68', '开篇', '1', '67', '2', '112100000000000000000000000000', '0', '', '1', '', '1', '0', '1', '2018-09-04 10:34:32', '2018-09-04 10:34:32', '1');
INSERT INTO `ms_category` VALUES ('69', '基础篇', '1', '67', '2', '112101000000000000000000000000', '0', '', '1', '', '1', '0', '1', '2018-09-04 10:34:32', '2018-09-04 10:34:32', '1');
INSERT INTO `ms_category` VALUES ('70', '进阶篇', '1', '67', '2', '112102000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:32', '2018-09-04 10:34:32', '1');
INSERT INTO `ms_category` VALUES ('72', '安全篇', '1', '67', '2', '112103000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:32', '2018-09-04 10:34:32', '1');
INSERT INTO `ms_category` VALUES ('73', '案例篇', '1', '67', '2', '112104000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:33', '2018-09-04 10:34:33', '1');
INSERT INTO `ms_category` VALUES ('74', '理论篇', '1', '67', '2', '112105000000000000000000000000', '0', '', '1', '', '1', '0', '0', '2018-09-04 10:34:33', '2018-09-04 10:34:33', '1');

-- ----------------------------
-- Table structure for ms_config
-- ----------------------------
DROP TABLE IF EXISTS `ms_config`;
CREATE TABLE `ms_config` (
  `config_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
  `ctitle` char(255) NOT NULL COMMENT '配置标题',
  `cname` char(255) NOT NULL COMMENT '名称',
  `cvalue` char(255) NOT NULL DEFAULT '' COMMENT '配置值',
  `description` char(255) NOT NULL DEFAULT '' COMMENT '配置描述',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态：0失效、1有效、2删除',
  `created_by` int(11) unsigned NOT NULL COMMENT '类型创建人',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '类型修改人',
  `modified_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`config_id`),
  KEY `cname` (`cname`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8 COMMENT='系统配置表';

-- ----------------------------
-- Records of ms_config
-- ----------------------------
INSERT INTO `ms_config` VALUES ('1', '排他登录', 'is_unique_login', '1', '1是、0否。即同一时间账号只能在一个地方登录。不允许账号在其他地方登录。', '1', '1', '2018-07-19 14:27:46', '1', '2018-07-19 14:27:46');
INSERT INTO `ms_config` VALUES ('2', '网站名称', 'site_name', 'PHP 解说', '', '1', '1', '2018-07-19 10:46:49', '1', '2018-07-19 10:46:49');
INSERT INTO `ms_config` VALUES ('3', 'PC登录超时时间(分钟)', 'pc_logout_time', '60000', '登录超时时间。距离上次最后操作时间大于当前指定时间分钟内将登录超时并退出登录', '1', '1', '2018-07-19 10:46:54', '1', '2018-07-19 10:46:54');
INSERT INTO `ms_config` VALUES ('9', '后台登录超时时间(分钟)', 'admin_logout_time', '60', '超时则需要重新登录', '1', '1', '2018-07-19 10:46:46', '1', '2018-07-19 10:46:46');

-- ----------------------------
-- Table structure for ms_dict
-- ----------------------------
DROP TABLE IF EXISTS `ms_dict`;
CREATE TABLE `ms_dict` (
  `dict_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
  `dict_type_id` int(11) unsigned NOT NULL COMMENT '主键',
  `dict_code` char(50) NOT NULL COMMENT '字典编码',
  `dict_value` char(255) NOT NULL DEFAULT '' COMMENT '字典值',
  `description` char(255) NOT NULL DEFAULT '' COMMENT '字典类型描述',
  `listorder` smallint(1) NOT NULL DEFAULT '0' COMMENT '排序。小在前',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态：0失效、1有效、2删除',
  `created_by` int(11) unsigned NOT NULL COMMENT '类型创建人',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '类型修改人',
  `modified_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`dict_id`),
  KEY `dict_type_id` (`dict_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8 COMMENT='字典数据表';

-- ----------------------------
-- Records of ms_dict
-- ----------------------------
INSERT INTO `ms_dict` VALUES ('1', '1', '1', '技术文档', '文章分类的值最好别更改。因为，会影响此分类关联的子分类。如确实要变更，请检查此ID对应的表ms_category的分类是否有值。如果有请处理之后再变更此值。', '0', '1', '1', '2018-07-19 10:46:30', '1', '2018-07-19 10:46:30');
INSERT INTO `ms_dict` VALUES ('41', '1', '2', '题库分类', '题库分类，必须二级分类。这样保证了数据展示方面的 UI 协调性。', '0', '1', '1', '2018-01-04 16:42:04', '1', '2018-02-27 15:29:50');

-- ----------------------------
-- Table structure for ms_dict_type
-- ----------------------------
DROP TABLE IF EXISTS `ms_dict_type`;
CREATE TABLE `ms_dict_type` (
  `dict_type_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
  `type_code` char(50) NOT NULL COMMENT '字典类型编码',
  `type_name` char(50) NOT NULL COMMENT '字典类型名称',
  `description` char(200) NOT NULL DEFAULT '' COMMENT '字典类型描述',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态：0失效、1有效、2删除',
  `created_by` int(11) unsigned NOT NULL COMMENT '类型创建人',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '类型修改人',
  `modified_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`dict_type_id`),
  KEY `type_code` (`type_code`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=utf8 COMMENT='字典类型表';

-- ----------------------------
-- Records of ms_dict_type
-- ----------------------------
INSERT INTO `ms_dict_type` VALUES ('1', 'category_type_list', '分类类型列表', '此分类类型列表用在分类列表中。', '1', '1', '2018-07-19 14:27:42', '1', '2018-07-19 14:27:42');

-- ----------------------------
-- Table structure for ms_error_log
-- ----------------------------
DROP TABLE IF EXISTS `ms_error_log`;
CREATE TABLE `ms_error_log` (
  `log_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
  `log_time` datetime DEFAULT NULL COMMENT '日志产生时间',
  `errcode` int(11) NOT NULL DEFAULT '0' COMMENT '错误编号',
  `content` text NOT NULL COMMENT '日志内容',
  `modified_time` datetime DEFAULT NULL,
  `created_time` datetime DEFAULT NULL COMMENT '日志创建时间',
  PRIMARY KEY (`log_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT='系统日志表';

-- ----------------------------
-- Records of ms_error_log
-- ----------------------------
INSERT INTO `ms_error_log` VALUES ('1', '2018-09-05 00:00:00', '901', 'ErrorTime:2018-09-05 14:33:12\nErrorCode:901\nErrorLog:Error Message: 登录超时,请重新登录 \nError Code: [901] \nClass Name and Method: common\\controllers\\Admin->init\nMethod Params:\nArray\n(\n)\n\nStack trace:\n#0 /data/wwwroot/www.phpjieshuo.com/library/common/controllers/Admin.php(74): common\\YCore::exception(901, \'\\xE7\\x99\\xBB\\xE5\\xBD\\x95\\xE8\\xB6\\x85\\xE6\\x97\\xB6,\\xE8\\xAF...\')\n#1 [internal function]: common\\controllers\\Admin->init()\n#2 /data/wwwroot/www.phpjieshuo.com/public/index.php(17): Yaf_Application->run()\n#3 {main}\nRequest IP:116.24.66.87\nRequest Url:http://www.phpjieshuo.com/Backend/Index/leftMenu?menu_id=3000\n\n', '2018-09-05 14:33:12', '2018-09-05 14:33:12');
INSERT INTO `ms_error_log` VALUES ('2', '2018-09-05 00:00:00', '901', 'ErrorTime:2018-09-05 14:33:12\nErrorCode:901\nErrorLog:Error Message: 登录超时,请重新登录 \nError Code: [901] \nClass Name and Method: common\\controllers\\Admin->init\nMethod Params:\nArray\n(\n)\n\nStack trace:\n#0 /data/wwwroot/www.phpjieshuo.com/library/common/controllers/Admin.php(74): common\\YCore::exception(901, \'\\xE7\\x99\\xBB\\xE5\\xBD\\x95\\xE8\\xB6\\x85\\xE6\\x97\\xB6,\\xE8\\xAF...\')\n#1 [internal function]: common\\controllers\\Admin->init()\n#2 /data/wwwroot/www.phpjieshuo.com/public/index.php(17): Yaf_Application->run()\n#3 {main}\nRequest IP:116.24.66.87\nRequest Url:http://www.phpjieshuo.com/Backend/Index/arrow?menu_id=3000\n\n', '2018-09-05 14:33:12', '2018-09-05 14:33:12');

-- ----------------------------
-- Table structure for ms_favorites
-- ----------------------------
DROP TABLE IF EXISTS `ms_favorites`;
CREATE TABLE `ms_favorites` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` int(11) unsigned NOT NULL COMMENT '用户ID',
  `obj_type` tinyint(1) NOT NULL COMMENT '收藏类型：1商品收藏、2文章收藏、3友情链接、4题库、5培训资料文章',
  `obj_id` int(11) unsigned NOT NULL COMMENT '商品ID/文章ID',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态：0无效、1正常、2删除',
  `modified_time` datetime DEFAULT NULL COMMENT '修改时间',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户收藏夹';

-- ----------------------------
-- Records of ms_favorites
-- ----------------------------

-- ----------------------------
-- Table structure for ms_files
-- ----------------------------
DROP TABLE IF EXISTS `ms_files`;
CREATE TABLE `ms_files` (
  `file_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
  `file_name` char(150) NOT NULL COMMENT '文件名称',
  `file_type` tinyint(1) NOT NULL COMMENT '文件类型：1-图片、2-其他文件',
  `file_size` int(11) unsigned NOT NULL COMMENT '文件大小。单位：(byte)',
  `file_md5` char(32) NOT NULL COMMENT '文件md5值',
  `user_type` tinyint(1) NOT NULL COMMENT '用户类型：1管理员、2普通用户',
  `user_id` int(11) unsigned NOT NULL COMMENT '用户ID',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态：0失效、1有效、2删除',
  `modified_time` datetime NOT NULL COMMENT '更新时间',
  `created_time` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`file_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文件表';

-- ----------------------------
-- Records of ms_files
-- ----------------------------

-- ----------------------------
-- Table structure for ms_find_pwd
-- ----------------------------
DROP TABLE IF EXISTS `ms_find_pwd`;
CREATE TABLE `ms_find_pwd` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `user_id` int(11) unsigned NOT NULL COMMENT '用户ID',
  `find_type` tinyint(1) NOT NULL COMMENT '找回密码类型：1手机号找回、2邮箱找回',
  `to_account` char(50) NOT NULL COMMENT '手机或邮箱或其他',
  `code` char(6) NOT NULL COMMENT '验证码',
  `check_times` smallint(3) NOT NULL DEFAULT '0' COMMENT '验证次数',
  `is_ok` tinyint(1) NOT NULL DEFAULT '0' COMMENT '最后一次否验证通过标记。0未使用、1已通过验证、2未验证通过',
  `ip` char(15) NOT NULL COMMENT 'IP地址',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间',
  `modified_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`),
  KEY `find_type` (`find_type`,`to_account`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='找回密码记录表';

-- ----------------------------
-- Records of ms_find_pwd
-- ----------------------------

-- ----------------------------
-- Table structure for ms_menu
-- ----------------------------
DROP TABLE IF EXISTS `ms_menu`;
CREATE TABLE `ms_menu` (
  `menu_id` smallint(6) unsigned NOT NULL AUTO_INCREMENT,
  `name` char(40) NOT NULL DEFAULT '',
  `parentid` smallint(6) NOT NULL DEFAULT '0',
  `c` char(50) NOT NULL DEFAULT '',
  `a` char(50) NOT NULL DEFAULT '',
  `data` char(255) NOT NULL DEFAULT '',
  `listorder` smallint(6) unsigned NOT NULL DEFAULT '0',
  `display` enum('1','0') NOT NULL DEFAULT '1',
  `modified_time` datetime NOT NULL COMMENT '更新时间',
  `created_time` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`menu_id`),
  KEY `listorder` (`listorder`),
  KEY `parentid` (`parentid`),
  KEY `module` (`c`,`a`)
) ENGINE=InnoDB AUTO_INCREMENT=8105 DEFAULT CHARSET=utf8 COMMENT='后台菜单表';

-- ----------------------------
-- Records of ms_menu
-- ----------------------------
INSERT INTO `ms_menu` VALUES ('1000', '常用功能', '0', '', '', '', '0', '1', '2018-07-19 14:27:50', '2018-07-19 14:27:50');
INSERT INTO `ms_menu` VALUES ('1001', '常用功能', '1000', '', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('1002', '修改密码', '1001', 'Admin', 'editPwd', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('1003', '登录历史', '1001', 'Admin', 'loginHistory', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2000', '系统设置', '0', '', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2001', '系统配置', '2000', '', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2002', '字典管理', '2001', 'Dict', 'index', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2003', '添加字典类型', '2001', 'Dict', 'addType', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2004', '编辑字典类型', '2001', 'Dict', 'editType', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2005', '删除字典类型', '2001', 'Dict', 'deleteType', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2006', '字典列表', '2001', 'Dict', 'dict', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2007', '删除字典', '2001', 'Dict', 'delete', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2008', '添加字典', '2001', 'Dict', 'add', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2009', '更新字典', '2001', 'Dict', 'edit', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2010', '字典类型排序', '2001', 'Dict', 'sortType', '', '0', '0', '2018-07-19 10:47:24', '2018-07-19 10:47:24');
INSERT INTO `ms_menu` VALUES ('2011', '字典排序', '2001', 'Dict', 'sortDict', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2012', '字典缓存清除', '2001', 'Dict', 'ClearCache', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2013', '配置管理', '2001', 'Config', 'index', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2014', '添加配置', '2001', 'Config', 'add', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2015', '编辑配置', '2001', 'Config', 'edit', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2016', '删除配置', '2001', 'Config', 'delete', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2017', '配置排序', '2001', 'Config', 'sort', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2018', '配置缓存清除', '2001', 'Config', 'ClearCache', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2019', '菜单列表', '2001', 'Menu', 'index', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2020', '添加菜单', '2001', 'Menu', 'add', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2021', '编辑菜单', '2001', 'Menu', 'edit', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2022', '删除菜单', '2001', 'Menu', 'delete', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2023', '菜单排序', '2001', 'Menu', 'sort', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2500', '日志管理', '2000', 'Log', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2501', '日志查看', '2500', 'Log', 'index', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2700', '文件管理', '2000', 'File', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2701', '文件列表', '2700', 'File', 'index', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2702', '更新文件', '2700', 'File', 'edit', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2703', '添加文件', '2700', 'File', 'add', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('2704', '删除文件', '2700', 'File', 'delete', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('3000', '权限管理', '0', '', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('3001', '管理员管理', '3000', 'Admin', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('3002', '管理员列表', '3001', 'Admin', 'index', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('3003', '添加管理员', '3002', 'Admin', 'add', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('3004', '更新管理员', '3003', 'Admin', 'edit', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('3005', '删除管理员', '3004', 'Admin', 'delete', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('3100', '角色管理', '3000', 'Role', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('3101', '角色列表', '3100', 'Role', 'index', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('3102', '添加角色', '3100', 'Role', 'add', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('3103', '更新角色', '3100', 'Role', 'update', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('3104', '删除角色', '3100', 'Role', 'delete', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('3105', '角色赋权', '3100', 'Role', 'setPermission', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('4000', '内容管理', '0', '', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('4001', '分类管理', '4000', 'Category', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('4002', '分类列表', '4001', 'Category', 'index', '', '0', '1', '2018-07-19 10:47:27', '2018-07-19 10:47:27');
INSERT INTO `ms_menu` VALUES ('4003', '添加分类', '4001', 'Category', 'add', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('4004', '更新分类', '4001', 'Category', 'edit', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('4005', '删除分类', '4001', 'Category', 'delete', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('4006', '分类排序', '4001', 'Category', 'sort', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('4100', '文章管理', '4000', 'News', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('4101', '文章列表', '4100', 'News', 'index', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('4102', '添加文章', '4100', 'News', 'add', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('4103', '更新文章', '4100', 'News', 'edit', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('4104', '删除文章', '4100', 'News', 'sort', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('4105', '文章排序', '4100', 'News', 'sort', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('5000', '用户管理', '0', '', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('5001', '用户管理', '5000', 'User', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('5002', '用户列表', '5001', 'User', 'index', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('5003', '添加用户', '5001', 'User', 'add', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('5004', '更新用户', '5001', 'User', 'edit', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('5005', '禁用用户', '5001', 'User', 'forbid', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('5006', '查看用户详情', '5001', 'User', 'view', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('5007', '解禁用户', '5001', 'User', 'unforbid', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('7000', '培训管理', '0', '', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('7200', '题库管理', '7000', 'Question', '', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('7201', '题目列表', '7200', 'Question', 'list', '', '0', '1', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('7202', '题目添加', '7200', 'Question', 'add', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('7203', '题目修改', '7200', 'Question', 'edit', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('7204', '题目删除', '7200', 'Question', 'delete', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('7205', '用户答题记录', '7200', 'Question', 'record', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('8103', '删除字典', '2001', 'Dict', 'delete', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_menu` VALUES ('8104', '图片上传', '4100', 'News', 'upload', '', '0', '0', '0000-00-00 00:00:00', '0000-00-00 00:00:00');

-- ----------------------------
-- Table structure for ms_news
-- ----------------------------
DROP TABLE IF EXISTS `ms_news`;
CREATE TABLE `ms_news` (
  `news_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '文章ID、主键',
  `cat_code` varchar(50) NOT NULL COMMENT '分类编码。对应ms_category.cat_code',
  `title` char(50) NOT NULL COMMENT '文章标题',
  `intro` char(250) NOT NULL COMMENT '文章简介。也是SEO中的description',
  `keywords` char(50) NOT NULL DEFAULT '' COMMENT '文章关键词。也是SEO中的keywords',
  `image_url` char(150) NOT NULL DEFAULT '' COMMENT '文章列表图片',
  `source` char(20) NOT NULL DEFAULT '' COMMENT '文章来源',
  `display` tinyint(1) NOT NULL DEFAULT '0' COMMENT '文章是否显示。1显示、0隐藏',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '文章状态：0无效、1正常、2删除',
  `listorder` smallint(6) unsigned NOT NULL DEFAULT '0' COMMENT '排序。小到大排序。',
  `hits` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '文章访问量',
  `created_by` int(11) unsigned NOT NULL COMMENT '创建人',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '修改人',
  `modified_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`news_id`),
  KEY `created_time` (`created_time`),
  KEY `created_by` (`created_by`)
) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=utf8 COMMENT='文章表';

-- ----------------------------
-- Records of ms_news
-- ----------------------------
INSERT INTO `ms_news` VALUES ('1', '104100000000000000000000000000', 'PHP 开发规范[必读]', 'PHP 开发规范[必读]', 'PHP', 'http://files.phpjieshuo.com/images/voucher/20180719/5b505341049bb.jpg', '7031', '1', '1', '0', '0', '1', '2018-07-19 10:50:50', '1', '2018-07-19 10:50:50');
INSERT INTO `ms_news` VALUES ('12', '100100000000000000000000000000', 'PHP C 扩展安装', 'PHP C 扩展安装', 'PHP C 扩展安装', 'http://files.phpjieshuo.com/images/voucher/20180719/5b505341049bb.jpg', '7031', '1', '1', '0', '0', '1', '2018-03-02 11:39:12', '1', '2018-05-14 11:42:11');
INSERT INTO `ms_news` VALUES ('14', '101100000000000000000000000000', 'PHP程序员技术等级划分', 'PHP程序员技术等级划分', 'PHP程序员技术等级划分', 'http://files.phpjieshuo.com/images/voucher/20180719/5b505341049bb.jpg', '7031', '1', '1', '0', '0', '1', '2018-03-06 17:18:32', '1', '2018-05-14 11:42:05');
INSERT INTO `ms_news` VALUES ('15', '101101000000000000000000000000', 'deployer 服务器代码部署', 'deployer 服务器代码部署', 'deployer 服务器代码部署', 'http://files.phpjieshuo.com/images/voucher/20180719/5b505341049bb.jpg', '7031', '1', '1', '0', '0', '1', '2018-03-06 19:54:01', '1', '2018-05-14 11:41:52');
INSERT INTO `ms_news` VALUES ('16', '106100000000000000000000000000', 'Centos 6.3安装配置 vsFTPd 环境的 FTP 服务器', 'Centos 6.3安装配置vsFTPd环境的FTP服务器', 'Centos 6.3安装配置vsFTPd环境的FTP服务器', 'http://files.phpjieshuo.com/images/voucher/20180719/5b505341049bb.jpg', '7031', '1', '1', '0', '0', '1', '2018-03-06 20:16:32', '1', '2018-05-14 11:41:46');
INSERT INTO `ms_news` VALUES ('17', '106100000000000000000000000000', 'CentOS 系统更改 yum 源', 'Centos系统更改yum 源为 163', 'Centos 系统更改 yum 源为 163', 'http://files.phpjieshuo.com/images/voucher/20180719/5b505341049bb.jpg', '7031', '1', '1', '0', '0', '1', '2018-03-06 20:23:30', '1', '2018-05-14 11:41:39');
INSERT INTO `ms_news` VALUES ('18', '103100000000000000000000000000', 'MySQL 索引优化', 'MySQL 索引优化', 'MySQL 索引优化', 'http://files.phpjieshuo.com/images/voucher/20180719/5b505341049bb.jpg', '7031', '1', '1', '0', '0', '1', '2018-03-08 11:29:28', '1', '2018-05-14 11:41:32');
INSERT INTO `ms_news` VALUES ('19', '103100000000000000000000000000', 'MySQL Explain 使用详解', 'MySQL Explain 使用详解', 'MySQL Explain 使用详解', 'http://files.phpjieshuo.com/images/voucher/20180719/5b505341049bb.jpg', '7031', '1', '1', '0', '0', '1', '2018-03-08 15:37:05', '1', '2018-05-14 11:41:23');
INSERT INTO `ms_news` VALUES ('23', '110101000000000000000000000000', 'CentOS7 + RabbitMQ3.7.5 + PHP', 'CentOS7 + RabbitMQ3.7.5 + PHP', ' RabbitMQ', 'http://files.phpjieshuo.com/images/voucher/20180719/5b505341049bb.jpg', 'fingerQin', '1', '1', '0', '0', '1', '2018-05-14 19:53:23', '1', '2018-05-15 15:24:57');
INSERT INTO `ms_news` VALUES ('28', '110100000000000000000000000000', '阿里云Redis开发规范', 'Redis 在 PHP 开发过程中被经常用到。要想把 Redis 使用好，那么我们必须遵循一些必要的规范。该规范来自阿里云云栖社区。具体非常高的参考作用。', 'redis', 'http://files.phpjieshuo.com/images/voucher/20180730/5b5eb514430d9.jpg', '阿里云', '1', '1', '0', '0', '1', '2018-07-30 14:51:34', '0', '2018-07-30 14:51:34');
INSERT INTO `ms_news` VALUES ('30', '103100000000000000000000000000', 'show processlist 命令详解', 'show processlist 命令详解', 'processlist', 'http://files.phpjieshuo.com/images/voucher/20180731/5b600659d62f9.jpg', '整理', '1', '1', '0', '0', '1', '2018-07-31 14:49:50', '1', '2018-07-31 14:49:50');
INSERT INTO `ms_news` VALUES ('31', '111101000000000000000000000000', 'Fail2ban 阻止暴力破解', 'Fail2ban 阻止暴力破解', 'Fail2ban', 'http://files.phpjieshuo.com/images/voucher/20180801/5b610ab1ca4cb.png', '整理', '1', '1', '0', '0', '1', '2018-08-01 09:19:47', '0', '2018-08-01 09:19:47');
INSERT INTO `ms_news` VALUES ('32', '101100000000000000000000000000', 'Linux lsof 调试 PHP', 'Linux lsof 调试 PHP', 'Linux lsof 调试 PHP', 'http://files.phpjieshuo.com/images/voucher/20180801/5b6161a47e382.jpg', '整理', '1', '1', '0', '0', '1', '2018-08-01 16:07:11', '1', '2018-08-01 16:07:11');
INSERT INTO `ms_news` VALUES ('33', '106100000000000000000000000000', 'Linux find 命令', 'Linux find 命令', 'Linux find 命令', 'http://files.phpjieshuo.com/images/voucher/20180801/5b6173080af4e.jpg', '整理', '1', '1', '0', '0', '1', '2018-08-01 16:46:03', '0', '2018-08-01 16:46:03');
INSERT INTO `ms_news` VALUES ('34', '106101000000000000000000000000', 'ab 压力测试工具介绍', 'ab 压力测试工具介绍', 'ab 压力测试工具介绍', 'http://files.phpjieshuo.com/images/voucher/20180802/5b6262141301e.jpg', '整理', '1', '1', '0', '0', '1', '2018-08-02 09:49:30', '1', '2018-08-02 09:49:29');
INSERT INTO `ms_news` VALUES ('35', '101100000000000000000000000000', 'PHP 性能优化', 'PHP 性能优化', 'PHP 性能优化', 'http://files.phpjieshuo.com/images/voucher/20180802/5b62c92155eb7.jpg', '整理', '1', '1', '0', '0', '1', '2018-08-02 17:05:09', '0', '2018-08-02 17:05:09');
INSERT INTO `ms_news` VALUES ('37', '112100000000000000000000000000', 'PHP 能做什么', 'PHP 做为当今流行的 Web 开发语言。常年占据开发语言的榜单前 6 名的位置。那么，PHP 是什么？它能做什么？', 'PHP 能做什么', 'http://files.phpjieshuo.com/images/voucher/20180904/5b8defe793a33.jpg', 'fingerQin', '1', '1', '0', '0', '1', '2018-09-04 11:14:37', '1', '2018-09-04 11:14:36');
INSERT INTO `ms_news` VALUES ('38', '112100000000000000000000000000', '学习 PHP 要具备哪些知识', '学习 PHP 要具备哪些知识', '学习 PHP 要具备哪些知识', 'http://files.phpjieshuo.com/images/voucher/20180904/5b8e027f53701.jpg', 'fingerQin', '1', '1', '0', '0', '1', '2018-09-04 11:57:06', '0', '2018-09-04 11:57:06');

-- ----------------------------
-- Table structure for ms_news_data
-- ----------------------------
DROP TABLE IF EXISTS `ms_news_data`;
CREATE TABLE `ms_news_data` (
  `news_id` int(11) unsigned NOT NULL COMMENT '文章ID',
  `content` mediumtext COMMENT '文章内容',
  `modified_time` datetime NOT NULL COMMENT '更新时间',
  `created_time` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`news_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文章副表';

-- ----------------------------
-- Records of ms_news_data
-- ----------------------------
INSERT INTO `ms_news_data` VALUES ('1', '<h2>\r\n	PHP 代码规范\r\n</h2>\r\n<blockquote>\r\n	<p>\r\n		<a href=\"http://www.php-fig.org/\">FIG </a>制定的PHP规范，简称PSR，是PHP开发的事实标准。FIG是Framework Interoperability Group(框架可互用小组) 的缩写，由几位开源框架的开发者成立于 2009 年。该组织的目的在于：以最低程度的限制，来统一各个项目的编码规范，避免各家自行发展的风格阻碍了程序设计师开发的困扰。PSR是Proposing a Standards Recommendation(提出标准建议) 的缩写。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	PSR 原来有四个规范，分别是：\r\n</p>\r\n<ul>\r\n	<li>\r\n		PSR-0 (Autoloading Standard)自动加载标准。\r\n	</li>\r\n	<li>\r\n		PSR-1 (Basic Coding Standard)基础编码标准。\r\n	</li>\r\n	<li>\r\n		PSR-2 (Coding Style Guide)编码风格向导。\r\n	</li>\r\n	<li>\r\n		PSR-3 (Logger Interface)日志接口。\r\n	</li>\r\n	<li>\r\n		PSR-4 (Improved Autoloading)自动加载的增强版，可以替换掉PSR-0了。\r\n	</li>\r\n</ul>\r\n<p>\r\n	今天我们的代码规范是基于以上规范进行了整理。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	1、PHP源文件只能使用&lt;?php和&lt;?=这两种标签\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		&lt;?php标签通常用于纯PHP的脚本当中，而&lt;?=通常用于模板当中。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	2、PHP源文件必须是不带BOM的UTF-8编码的文件\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		BOM（Byte Order Mark)，字节顺序标记，出现在文本文件头部，Unicode编码标准中用于标识文件是采用哪种格式的编码。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	3、PHP源文件缩进采用 4 个空格\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		很多编辑器使用Tab作为缩进。会造成空格性问题。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	4、纯PHP代码的源文件关闭标签?&gt;必须省略\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		PHP解析器在对文件进行解释的时候，会有性能提升。并且，这能一定程序避免在?&gt;之后有多余的空格导致程序报错。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	5、请严格控制每行 120 个字符\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		过长的代码会导致多种分辨率的显示器造成兼容问题。并且，过长的代码也会造成难以阅读理解。如果实在太长，请把代码换行。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	6、所有的类必须设定一个命令空间\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		命令空间给代码结构有较强的说明性，以及杜绝同名类的冲突问题。同时，也能用到 Composer 的自动加载优势特性。\r\n	</p>\r\n</blockquote>\r\n<pre>&lt;?php\r\nnamespace core;</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	7、命名空间(namespace)的声明后面必须有一行空行\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		空行会让代码看起来更加清晰容易阅读。\r\n	</p>\r\n</blockquote>\r\n<pre>&lt;?php\r\nnamespace core;\r\n\r\nuse common;</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	8、所有的导入(use)声明必须放在命名空间(namespace)声明的下面\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		这样会让代码结构变得清晰容易阅读。\r\n	</p>\r\n</blockquote>\r\n<pre>&lt;?php\r\nnamespace core;\r\n\r\nuse common;</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	9、一句声明中，必须只有一个导入(use)关键字\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		虽然 PHP 允许一行代码当中允许使用多个 use 关键字导入一个类。但是，这会使代码阅读造成障碍。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	错误：\r\n</p>\r\n<pre>&lt;?php\r\nnamespace core;\r\n\r\nuse common, library;</pre>\r\n<p>\r\n	正确：\r\n</p>\r\n<pre>&lt;?php\r\nnamespace core;\r\n\r\nuse common;\r\nuse library;</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	10、在导入(use)声明代码块后面必须有一行空行\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		空行让代码结构变得容易理解。\r\n	</p>\r\n</blockquote>\r\n<pre>&lt;?php\r\nnamespace core;\r\n\r\nuse common;\r\nuse library;\r\n\r\nclass Person {\r\n    \r\n}</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	11、PHP 关键字必须小写\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		PHP 的关键字，必须小写，boolean 值：true，false，null 也必须小写。下面的关键字，也必须小写：\r\n	</p>\r\n</blockquote>\r\n<pre>\'__halt_compiler\', \'abstract\', \'and\', \'array\', \'as\', \'break\', \'callable\', \'case\', \'catch\', \'class\', \'clone\', \'const\', \'continue\', \'declare\', \'default\', \'die\', \'do\', \'echo\', \'else\', \'elseif\', \'empty\', \'enddeclare\', \'endfor\', \'endforeach\', \'endif\', \'endswitch\', \'endwhile\', \'eval\', \'exit\', \'extends\', \'final\', \'for\', \'foreach\', \'function\', \'global\', \'goto\', \'if\', \'implements\', \'include\', \'include_once\', \'instanceof\', \'insteadof\', \'interface\', \'isset\', \'list\', \'namespace\', \'new\', \'or\', \'print\', \'private\', \'protected\', \'public\', \'require\', \'require_once\', \'return\', \'static\', \'switch\', \'throw\', \'trait\', \'try\', \'unset\', \'use\', \'var\', \'while\', \'xor\'</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	12、继承(extends) 和实现(implement) 必须和 class name 写在一行，切花括号要换行写。\r\n</h3>\r\n<pre>&lt;?php\r\nnamespace Lib\\Databaes;\r\n \r\nclass Mysql extends ParentClass implements \\PDO, \\DB // 写一行\r\n{ // 换行写{\r\n     \r\n}</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	13、成员属性访问修饰符必须显示声明不能省略\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		成员属性有三种访问修饰符：public、protected、private。不能使用老式的var来声音成员属性。\r\n	</p>\r\n</blockquote>\r\n<pre>&lt;?php\r\nnamespace Lib\\Databaes;\r\n \r\nclass Mysql extends ParentClass implements \\PDO, \\DB // 写一行\r\n{\r\n    public    $foo    = null;\r\n    private   $name   = \'sam\';\r\n    protected $age    = \'17\';\r\n}</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	14、成员方法访问修饰符必须显示声明不能省略\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		成员方法有三种访问修饰符：public、protected、private。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	错误：\r\n</p>\r\n<pre>&lt;?php\r\nnamespace Lib\\Databases;\r\n\r\nclass MySQL\r\n{\r\n    function fetchOne()\r\n    {\r\n        // ......\r\n    }\r\n}</pre>\r\n<p>\r\n	正确：\r\n</p>\r\n<pre>&lt;?php\r\nnamespace Lib\\Databases;\r\n\r\nclass MySQL\r\n{\r\n    public function fetchOne()\r\n    {\r\n        // ......\r\n    }\r\n}</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	15、方法的参数有多个的时候，每个参数的逗号后面必须加个空格\r\n</h3>\r\n<pre>namespace Lib\\Databaes;\r\n \r\nclass Mysql extends ParentClass implements \\PDO, \\DB // 写一行\r\n{\r\n    public getInfo ($name, $age, $gender = 1)\r\n    {\r\n    }\r\n}</pre>\r\n<h3>\r\n	16、当用到抽象(abstract)和终结(final)来做类声明时，它们必须放在可见性声明(public 还是protected还是private)的前面。而当用到静态(static)来做类声明时，则必须放在可见性声明的后面。\r\n</h3>\r\n<pre>&lt;?php\r\nnamespace Vendor\\Package;\r\n \r\nabstract class ClassName\r\n{\r\n    protected static $foo; // static 放后面\r\n \r\n    abstract protected function zim(); // abstract 放前面\r\n \r\n    final public static function bar() // final 放前面，static 放最后。\r\n    {\r\n        // 方法主体部分\r\n    }\r\n}</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	17、控制结构花括号、换行、空格等规范\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		if、else、elseif、switch、for、foreach、case、while、go、try、catch 等关键词后面必须加空格。可以说，没有特殊说明的情况下，基本上所有的 PHP 关键词后面都必须加空格。\r\n	</p>\r\n	<p>\r\n		流程控制语句起始的花括号是不需要另起一行。\r\n	</p>\r\n</blockquote>\r\n<pre>if ($expr1) { // 左右空格\r\n    // if body\r\n} elseif ($expr2) { // elesif 连着写\r\n    // elseif body\r\n} else {\r\n    // else body;\r\n}\r\n\r\nswitch ($expr) { // 左右空格\r\n    case 0:\r\n        echo \'First case, with a break\'; // 对齐\r\n        break; // 换行写break，也对齐。\r\n    case 1:\r\n        echo \'Second case, which falls through\';\r\n        // no break\r\n    case 2:\r\n    case 3:\r\n    case 4:\r\n        echo \'Third case, return instead of break\';\r\n        return;\r\n    default:\r\n        echo \'Default case\';\r\n        break;\r\n}\r\n\r\nwhile ($expr) { // 左右空格\r\n    // structure body\r\n}\r\n \r\ndo {\r\n    // structure body; // 左右空格\r\n} while ($expr);\r\n\r\nfor ($i = 0; $i &lt; 10; $i++) { // 注意几个参数之间的空格\r\n    // for body\r\n}\r\n\r\nforeach ($iterable as $key =&gt; $value) { // 还是空格问题\r\n    // foreach body\r\n}\r\n\r\ntry {\r\n    // try body\r\n} catch (FirstExceptionType $e) { // 同样也是注意空格。\r\n    // catch body\r\n} catch (OtherExceptionType $e) {\r\n    // catch body\r\n}</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	18、类名必须与文件名一样\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		这个很容易理解，没啥好补充说明的。除非框架有特殊的加载规则。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	19、类的命名<strong>必须</strong>遵循StudlyCaps大写开头的驼峰命名规范\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		StudlyCaps 即单词首字母大写风格。有些人也称它为大驼峰。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	20、方法名称<strong>必须</strong>符合camelCase式的小写开头驼峰命名规范\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		camelCase 即第一个单词首字母小写后面的单词首字母大写的风格。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	21、类中的常量所有字母都<strong>必须</strong>大写，单词间用下划线分隔\r\n</h3>\r\n<pre>ORDER_STATUS = 1;</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	22、变量必须使用驼峰命名风格\r\n</h3>\r\n<pre>$cardNo   = \'\'; // 卡号。 \r\n$idCardNo = \'\'; // 身份证号。</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	23、参数必须使用驼峰命名风格\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		参数也是变量的一种。故与变量的命名风格一致。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	24、所有方法的起始花括号必须另起一行。\r\n</h3>\r\n<p>\r\n	虽然以下两种在实际开发中都是允许的。但是，为了保持代码一致。所以，必须强制使用。\r\n</p>\r\n<p>\r\n	错误：\r\n</p>\r\n<pre>&lt;?php\r\n\r\nclass MySQL\r\n{\r\n    public function fetchOne() {\r\n        \r\n    }\r\n}</pre>\r\n<p>\r\n	正确：\r\n</p>\r\n<pre>&lt;?php\r\n\r\nclass MySQL\r\n{\r\n    public function fetchOne() \r\n    {\r\n        \r\n    }\r\n}</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	25、直接在方法中写数组参数时格式如下\r\n</h3>\r\n<pre>$object-&gt;callFunc([\r\n    \'userId\'   =&gt; 1,\r\n    \'username\' =&gt; \'sam\',\r\n    \'age\'      =&gt; 20,\r\n    \'sex\'      =&gt; \'male\'\r\n]);</pre>\r\n<h3>\r\n	26、方法参数注释\r\n</h3>\r\n<pre>/**\r\n * 管理后台获取优惠券发送记录。\r\n *\r\n * @author 7031 2018-02-23\r\n * @modify 7031 2019-02-25 修复了 SQL 性能问题。\r\n *\r\n * @param int    $couponId      优惠券ID。\r\n * @param string $username      用户名。\r\n * @param string $mobilephone   用户手机号。\r\n * @param int    $page          当前分页页码。\r\n * @param int    $count         每页显示条数。\r\n * @param array  $data          请求参数。\r\n *\r\n * ------------------- eg:start ---------------------\r\n * $data = [\r\n *     \'username\' =&gt; \'用户账号,没有时传空字符串\',\r\n *     \'age\'      =&gt; \'用户年龄,没有时传0\',\r\n * ];\r\n * ------------------- eg:end -----------------------\r\n *\r\n * @return array\r\n */\r\npublic static function getBackendSendHistory($couponId = -1, $username, $mobilephone, $page, $count, $data) {\r\n\r\n}</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	可以看出，有以下几个注释特点：\r\n</p>\r\n<p>\r\n	1）方法说明。\r\n</p>\r\n<p>\r\n	2）创建方法的同事编号以及时间。\r\n</p>\r\n<p>\r\n	3）修改方法的同事编号以及时间与修改的内容。\r\n</p>\r\n<p>\r\n	4）参数注释：类型、名称、参数说明。参数与其他注释之间要有空行。\r\n</p>\r\n<p>\r\n	5）参数示例：如果参数当中有复杂的参数。可以在参数下方给出示例以增强说明。\r\n</p>\r\n<p>\r\n	6）返回值。需要给出返回的类型。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	27、方法的代码行数不能超过一屏\r\n</h3>\r\n<p>\r\n	每个人的显示器分辨率不一样。既然不超过一屏也会出现别的同事一屏会超出的情况。所以，即使未超过一屏，也尽量保证代码行在 40 行以内。如果发现自己的代码超过了 40 行，那么就需要考虑自己的代码是不是有拆分不合理的地方。特殊情况允许超过 40 行。但是，整个方法里面的代码必须是简单的判断逻辑。不包含复杂的业务判断逻辑。因为，不同的业务判断最佳实践是单独封装一个方法。\r\n</p>', '2018-07-19 10:50:50', '2018-07-19 10:50:50');
INSERT INTO `ms_news_data` VALUES ('12', '<h2>\r\n	PHP C 扩展安装\r\n</h2>\r\n<blockquote>\r\n	<p>\r\n		PHP扩展有两种。一种是PHP编写的扩展，通过composer安装。一种是通过C编写，通过PHP命令来安装。今天主要讲安装PHP C扩展。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	1 扩展来源\r\n</h3>\r\n<p>\r\n	扩展主要来源于三大途径：\r\n</p>\r\n<h4>\r\n	1.1 PHP 官网\r\n</h4>\r\n<p>\r\n	通常我们都会去 <a href=\"http://pecl.php.net\">pecl.php.net</a> 下载。这是PHP官方维护的。我们只需要在右上角输入想安装的扩展点击搜索即能找到想要的扩展。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	1.2 GitHub\r\n</h4>\r\n<p>\r\n	GitHub是全球最大的开源项目网站。很多出色的扩展基本上都会在这里找到最新的源代码。并且还能与项目开发者交流。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	1.3 其他\r\n</h4>\r\n<p>\r\n	比如自己开发、非PECL &amp; GitHub渠道。一些私有厂商给自己的产品开发的扩展等。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	2 安装步骤\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		我们以安装Redis扩展为例进行讲解。\r\n	</p>\r\n</blockquote>\r\n<pre># wget http://pecl.php.net/get/redis-3.1.6.tgz\r\n# tar zxvf redis-3.1.6.tgz\r\n# cd redis-3.1.6\r\n# phpize\r\n# ./configure\r\n# make\r\n# make install</pre>\r\n<h4>\r\n	2.1 phpize 做了什么？\r\n</h4>\r\n<blockquote>\r\n	<p>\r\n		phpize命令是PHP安装包中支持的一个命令工具。在Linux系统下。该命令位置PHP安装目录下的sbin目录下。它的主要工作是在安装C扩展的时候，根据当前系统信息生成对应的configure文件。configure文件是Linux系统下源码安装软件必须的文件。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	2.2 配置 php.ini\r\n</h4>\r\n<p>\r\n	默认情况下，生成的扩展会安装在 PHP 安装包的如下目录：\r\n</p>\r\n<p>\r\n	/usr/local/php71/lib/php/extensions/no-debug-non-zts-20160303/\r\n</p>\r\n<p>\r\n	其中的日期20160303是phpize执行时得到的 API 版本日期。\r\n</p>\r\n<p>\r\n	要让 Redis 生效，必须在 php.ini 文件当中添加该扩展的信息。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	找到配置文件：\r\n</p>\r\n<pre># php --ini</pre>\r\n<p>\r\n	会输出如下内容：\r\n</p>\r\n<pre>Configuration File (php.ini) Path: /usr/local/php71/etc\r\nLoaded Configuration File:         /usr/local/php71/etc/php.ini\r\nScan for additional .ini files in: /usr/local/php71/etc/php.d\r\nAdditional .ini files parsed:      (none)</pre>\r\n<p>\r\n	通过如上信息可以知道我们的配置文件在这里：/usr/local/php71/etc/php.ini。\r\n</p>\r\n<p>\r\n	在配置文件尾部增加如下代码：\r\n</p>\r\n<pre>extension = redis.so</pre>\r\n<p>\r\n	如果要像上面这样配置，必须确定你已经正确把如下配置设置好：\r\n</p>\r\n<pre>extension_dir = \"/usr/local/php71/lib/php/extensions/no-debug-non-zts-20160303\"</pre>\r\n<p>\r\n	设置好之后。PHP 才能正确去扩展目录下搜索 Redis 扩展。不然，就会报错。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	当然，你也可以这样设置扩展配置。\r\n</p>\r\n<pre>extension = \"/usr/local/php71/lib/php/extensions/no-debug-non-zts-20160303/redis.so\"</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	2.3 验证安装是否成功\r\n</h4>\r\n<p>\r\n	执行如下命令。\r\n</p>\r\n<pre># php -m|grep redis</pre>\r\n<p>\r\n	如果安装成功会输出如下内容：\r\n</p>\r\n<pre>redis</pre>\r\n<p>\r\n	如果未安装成功，将不会有任何输出。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_news_data` VALUES ('14', '<h2>\r\n	PHP程序员技术等级划分\r\n</h2>\r\n<blockquote>\r\n	<p>\r\n		该文章是转载韩天峰的文章，然后做了细微的调整。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	这个话题老生长谈了，在面试中必然考核的能力中，我个人认为解决问题能力是排第一位的，比学习能力优先级更高。解决问题的能力既能看出程序员的思维能力，应变能力，探索能力等，又可以看出他的经验。如果解决问题能力不佳是无法通过面试的。\r\n</p>\r\n<p>\r\n	这里举个例子，假如我执行了一个PHP的脚本，如php test.php，预期是可以返回一个字符串。但执行后没有任何信息输出，这时候通过什么方法能知道程序错在哪里？这里可以将解决问题能力分为8个等级，越到后面的表示能力越强。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	Lv0 查看 PHP 错误信息\r\n</h3>\r\n<p>\r\n	程序没有达到预期效果，证明代码出错了，看PHP的错误信息是第一步。如果直接忽略错误信息，表明这个人不适合担任专业的程序员岗位。有些情况下php.ini配置中关闭了错误显示，需要修改php.ini打开错误信息，或者错误信息被导出到了日志文件，这种情况可以直接tailf php_error.log来看错误信息。\r\n</p>\r\n<p>\r\n	拿到错误信息后直接定位到程序代码问题，或者到 Google/百度搜索，即可解决问题。\r\n</p>\r\n<p>\r\n	注：打开错误显示的方法是\r\n</p>\r\n<pre>- php.ini 中 display_errors / display_startup_errors 设置为 On\r\n- php.ini 中 error_reporting 设置为E_ALL\r\n- PHP 代码中设置 error_reporting(E_ALL)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	Lv1 存在多个版本的 php 或 php-cli 与 php-fpm 加载不同的配置\r\n</h3>\r\n<p>\r\n	存在多个版本的php，懂得通过which php来看是哪个PHP，或者加绝对路径制定php版本。表示此PHPer通过了此层级的 50% 考验。\r\n</p>\r\n<p>\r\n	另外一个情况就是php-cli与php-fpm得到的执行情况不一样，如在web浏览器中执行是对的，cli下执行是错的。这时候可能是2个环境加载的php.ini不同所致。cli下通过php -i |grep php.ini得到加载了哪个php.ini。而fpm下通过phpinfo()函数可以得到php.ini的绝对路径。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	Lv2 var_dump/die打印变量值信息单步调试\r\n</h3>\r\n<p>\r\n	这是惯用的程序调试手段，也是最简单粗暴有效的解决问题方法。高级一点的手段是使用PHP的Trace类/日志类，花哨一点的可以借助phpstorm+xdebug在IDE工具里进行Debug。\r\n</p>\r\n<p>\r\n	Trace工具还可以分析脚本的耗时，进行PHP程序的性能优化。\r\n</p>\r\n<p>\r\n	这3个考验全部通过，表明此程序员已经具备了专业 PHP 程序员应该有的解决问题能力了。PHP` 程序员只要过了这个等级，就足以应多大部分情况，在中小型网站中毫无压力。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	Lv3 使用 strace 工具跟踪程序执行\r\n</h3>\r\n<p>\r\n	strace 可以用来查看系统调用的执行，使用 strace php test.php，或者 strace -p 进程 ID。strace 就可以帮助你透过现象看本质，掌握程序执行的过程。这个手段是在大型网站，大公司里最常用的。如果没掌握 strace，这里只能说抱歉了，我们不接受不会 strace 的 PHPer。\r\n</p>\r\n<p>\r\n	strace其实也是对程序员基础的考验，如果不懂操作操作系统，完全不懂底层，肯定也达不到会用strace的程度。当然strace对于PHP代码里的死循环是解决不了的。比如你发现一个php-fpm进程CPU100%了，strace恐怕是解决不了的。因为strace是看系统调用，一般都是IO类操作，既然是IO密集，那CPU一定不可能是100%。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	Lv4 使用tcpdump工具分析网络通信过程\r\n</h3>\r\n<p>\r\n	tcpdump 可以抓到网卡的数据通信过程，甚至数据内容也可以抓到。使用tcpdump可以看到网络通信过程是什么样的，如何时发起了 TCP SYN3 次握手，何时发送FIN包，何时发送RST包。这是一个基本功，如果不懂tcpdump，证明不具备网络问题解决能力。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	Lv5 统计函数调用的耗时和成功率\r\n</h3>\r\n<p>\r\n	使用 xhporf/xdebug 导出 PHP 请求的调用过程，然后分析每个函数调用的过程和耗时。能够分析 PHP 程序的性能瓶颈，找出可以优化的点。\r\n</p>\r\n<p>\r\n	另外一个对于网络服务的调用，如 mysql 查询，curl，其他 API 调用等，通过记录起始和结束时 microtime，返回的是不是 false，可以得到调用是否成功，耗时多少。如果可以汇总数据，整理出调用的成功率，失败率，平均延时，证明此程序员对接口质量敏感，有大型网站项目经验。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	Lv6 gdb使用\r\n</h3>\r\n<p>\r\n	gdb 是 C/C++ 调试程序的利器，需要具备一定 C/C++ 功底的程序员才会能熟练使用 gdb。上面说的 strace 无法跟踪 php 程序 CPU100%，而 gdb 是可以跟踪的。另外 gdb 也可以解决 php 程序 core dump 的问题。\r\n</p>\r\n<p>\r\n	通过 gdb -p 进程 ID，再配合 php-src 的.gdbinit zbacktrace等工具，可以很方便地跟踪 PHP 程序的执行。像上面的 CPU100% 往往是PHP程序中发生死循环了，gdb 进行多次查看，就大致可以得到死循环的位置。具备 gdb 解决问题能力的 PHP 程序员少之又少。如果能使用 gdb 解决 PHP 问题，这个 PHPer 百分之百可以通过面试，并且可以拿到较高的技术评级。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	Lv7 查看PHP内核和扩展源码\r\n</h3>\r\n<p>\r\n	如果能熟悉 PHP 内核和扩展的源码，遇到 PHP 程序中最复杂的内存错误，也可以有解决的能力。这类 PHP 程序员就是凤毛麟角了。配合 gdb 工具和对 PHP 源码的熟悉，可以查看 opcode 的信息，execute_data 的内存，全局变量的状态等。\r\n</p>', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_news_data` VALUES ('15', '<h3>\r\n	工具安装\r\n</h3>\r\n<p>\r\n	deployer 工具支持 PHP5.x 和 PHP 7.x 版本。deployer 4.x 版本支持 PHP 5.6 版本，5.x 版本支持 PHP 7.x 版本。\r\n</p>\r\n<h4>\r\n	一、安装 deployer\r\n</h4>\r\n<pre>$ curl -LO https://deployer.org/releases/v4.3.0/deployer.phar\r\n$ mv deployer.phar /usr/local/bin/dep\r\n$ chmod +x /usr/local/bin/dep</pre>\r\n<p>\r\n	执行完上述步骤之后，我们就已经安装好了 deployer 工具。此时，我们可以在任意目录执行如下命令验证是否安装成功：\r\n</p>\r\n<pre>$ dep</pre>\r\n<p>\r\n	如果此时能输入如下内容，说明已经安装成功：\r\n</p>\r\n<pre>Deployer 4.3.0\r\n\r\nUsage:\r\n  command [options] [arguments]\r\n\r\nOptions:\r\n  -h, --help            Display this help message\r\n  -q, --quiet           Do not output any message\r\n  -V, --version         Display this application version\r\n      --ansi            Force ANSI output\r\n      --no-ansi         Disable ANSI output\r\n  -n, --no-interaction  Do not ask any interactive question\r\n  -f, --file[=FILE]     Specify Deployer file\r\n  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\r\n\r\nAvailable commands:\r\n  help         Displays help for a command\r\n  init         Initialize deployer system in your project\r\n  list         Lists commands\r\n  self-update  Updates deployer.phar to the latest version</pre>\r\n<h4>\r\n	二、升级 deployer\r\n</h4>\r\n<p>\r\n	升级 deployer 很简单：\r\n</p>\r\n<pre>$ dep self-update</pre>\r\n<h4>\r\n	三、使用 deployer\r\n</h4>\r\n<p>\r\n	这里我需要对 deployer 的机制大概说明一下。 deployer 工具的模式是通过跳板机(deployer所在服务器)对一台或多台 WEB 服务器进行的代码部署工作。\r\n</p>\r\n<p>\r\n	所以，我们此时需要在跳板机上使用 deployer 工具创建一个部署目录。以此来定义我们要部署的工作内容。\r\n</p>\r\n<h5>\r\n	1) 初始化\r\n</h5>\r\n<p>\r\n	在跳板机任意目录执行如下命令：\r\n</p>\r\n<pre>dep init</pre>\r\n<p>\r\n	在目录下面会生成一个 deploy.php 脚本。\r\n</p>\r\n<p>\r\n	我们接下来的工作就是对 deploy.php 脚本进行编辑。\r\n</p>\r\n<h4>\r\n	2) 设定要部署的 WEB 服务器\r\n</h4>\r\n<p>\r\n	我们在 deploy.php 脚本中找到类似代码:\r\n</p>\r\n<pre>server(\'production\', \'domain.com\')\r\n    -&gt;user(\'root\')\r\n    -&gt;identityFile()\r\n    -&gt;set(\'deploy_path\', \'xxxx\');</pre>\r\n<p>\r\n	server 方法的第一个参数是为我们的 WEB 服务器指定一个名字，第二个参数是 WEB 服务器的 IP 地址。\r\n</p>\r\n<p>\r\n	提供两种方式连接到 WEB 服务器。一是账号密码方式、一种是 ssh key 方式。\r\n</p>\r\n<h4>\r\n	3) 账号密码方式\r\n</h4>\r\n<p>\r\n	PHP 代码如下：\r\n</p>\r\n<pre>server(\'prod_1\', \'xxx.xxx.xxx.xxx\')\r\n    -&gt;user(\'root\')\r\n    -&gt;password(\'123456\')\r\n    -&gt;set(\'deploy_path\', \'/data/web/www.xxx.com\')\r\n    -&gt;stage(\'production\');</pre>\r\n<h4>\r\n	4) SSH KEY 方式\r\n</h4>\r\n<p>\r\n	PHP 代码如下:\r\n</p>\r\n<pre>server(\'prod_1\', \'xxx.xxx.xxx.xxx\')\r\n    -&gt;user(\'root\')\r\n    -&gt;identityFile()\r\n    -&gt;set(\'deploy_path\', \'/data/web/www.xxx.com\')\r\n    -&gt;stage(\'production\');</pre>\r\n<p>\r\n	关于 server 方法更多文档：<a href=\"https://github.com/deployphp/docs/blob/4.x/servers.md\" target=\"_blank\">https://github.com/deployphp/docs/blob/4.x/servers.md</a>\r\n</p>\r\n<h3>\r\n	三、执行部署\r\n</h3>\r\n<pre>dep deploy</pre>', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_news_data` VALUES ('16', '<h2>\r\n	Centos 6.3安装配置vsFTPd环境的FTP服务器\r\n</h2>\r\n<p>\r\n	我的电脑系统是Windows 7 64 位，用VirtualBox安装了一个最小化版的CentOS 6.3 64位的系统。最近特意想搭建一个FTP的服务器，所以，就有了如下的过程。备忘，方便你我他。 注：文章最后会附上vsftpd服务器配置文件的选项说明。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	关于vsftpd介绍如下：\r\n</h3>\r\n<p>\r\n	vsftpd 是 “very secure FTP daemon” 的缩写，安全性是它的一个最大的特点。vsftpd 是一个 UNIX 类操作系统上运行的服务器的名字，它可以运行在诸如 Linux、BSD、Solaris、 HP-UNIX等系统上面，是一个完全免费的、开发源代码的ftp服务器软件，支持很多其他的 FTP 服务器所不支持的特征。比如：非常高的安全性需求、带宽限制、良好的可伸缩性、可创建虚拟用户、支持 IPv6、速率高等。vsftpd 是一款在 Linux 发行版中最受推崇的FTP服务器程序。特点是小巧轻快，安全易用。 OK ！现在进入安装配置。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	1 安装 vsftp\r\n</h3>\r\n<p>\r\n	因为，我采用的 yum 命令安装，不是源码包安装。所以，安装和配置都非常的方便。 在这里，我要架设的是虚拟用户。所谓虚拟用户就是没有使用真实的账户，只是通过某种技术手段达到映射账户和设置权限的目的。 执行如下代码进行安装 vsftpd：\r\n</p>\r\n<pre>$ yum -y install vsftpd</pre>\r\n<p>\r\n	如果，你不确定自己的系统是否已经安装vsftpd，请用以下命令检测：\r\n</p>\r\n<pre>$ rpm -qa | grep vsftpd</pre>\r\n<p>\r\n	如果输出类似以下内容：\r\n</p>\r\n<pre>vsftpd-2.2.2-11.el6.x86_64</pre>\r\n<p>\r\n	说明你当前的系统已经安装了。这是基于yum命令进行安装的检测方法，使用源码包编译安装的检测方法不知道是不是这样，如果你知道，请留言告诉我。谢谢。 如果，什么都没有输出，说明你的系统没有安装。 因为，接下来配置 vsftpd 的需要，所以，要事先创建一个文件，命令如下：\r\n</p>\r\n<pre>$ touch /var/log/vsftpd.log</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	2 启动/重启/停止 vsftpd 服务器\r\n</h3>\r\n<p>\r\n	刚才我们安装了vsftpd 服务器，但是，这个时候，还没有启动 vsftpd 服务。以下命令启动：\r\n</p>\r\n<pre>$ service vsftpd start</pre>\r\n<p>\r\n	会出现一行启动成功的提示信息：\r\n</p>\r\n<pre>Starting vsftpd for vsftpd: [ OK ]</pre>\r\n<p>\r\n	如果，你与我一样是安装的中文语言的Centos,那么提示信息将是中文的。如果，提示信息里面没有OK出现，也没有“确定”这样的字眼出现，说明启动失败了。反正，按照我的方式，不会出现失败。 vsftpd 的 重启命令:\r\n</p>\r\n<pre>$ service vsftpd restart</pre>\r\n<p>\r\n	vsftpd 的 停止命令：\r\n</p>\r\n<pre>$ service vsftpd stop</pre>\r\n<p>\r\n	如果，你希望下次系统启动的时候，自动启动 vsftpd 服务器，执行以下命令：\r\n</p>\r\n<pre>$ chkconfig vsftpd on</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	3 与 vsftpd 服务器有关的文件和文件夹\r\n</h3>\r\n<p>\r\n	vsftpd 服务器的配置文件的是:/etc/vsftpd/vsftpd.conf\r\n</p>\r\n<p>\r\n	vsftpd 服务器的根目录，即FTP服务器的主目录:/var/ftp/pub\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	4、添加FTP本地用户（即虚拟用户，简单方案）\r\n</h3>\r\n<p>\r\n	FTP大家可能都用过，通过给定的HOST、账号、密码就可以访问服务器对应的目录空间了。但是，这个FTP账号只能访问FTP服务，不能登录服务器系统，只能访问自己的目录。这样的用户就叫虚拟用户，本质上这不叫虚拟用户，仅仅只是不能通过终端等一系列途径登录服务器系统而已。 创建一个FTP用户的命令如下：\r\n</p>\r\n<pre>$ adduser -d /opt/ftp_dir/ftp001 -g ftp -s /sbin/nologin ftp001</pre>\r\n<p>\r\n	此命令的含义： 使用 shell 命令 adduser 添加一个 ftp001 的系统账户，但是，不能登录系统(-s /sbin/nologin)，该账户的主目录在(-d /opt/ftp_dir/ftp001)，属于 ftp 这个用户组(-g ftp)。 我们创建了一个FTP账户，现在来设置账户的密码，命令如下：\r\n</p>\r\n<pre>$ passwd ftp001</pre>\r\n<p>\r\n	接着会要求你输入两次密码确认。为了避免出现不要求的错误，请尽量保证自己的密码长度大于6个字符，且是字母与数字的混合的字符串。如我的密码是：ftp123456。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	5 vsftpd 配置文件的调整\r\n</h3>\r\n<p>\r\n	anonymous_enable=NO 设定不允许匿名访问\r\n</p>\r\n<p>\r\n	local_enable=YES 设定本地用户可以访问。注：如使用虚拟宿主用户，在该项目设定为NO的情况下所有虚拟用户将无法访问。\r\n</p>\r\n<p>\r\n	chroot_list_enable=YES 使用户不能离开主目录\r\n</p>\r\n<p>\r\n	xferlog_file=/var/log/vsftpd.log 设定vsftpd的服务日志保存路径。注意，该文件默认不存在。必须要手动touch出来。我们已经一开始就已经创建了。\r\n</p>\r\n<p>\r\n	ascii_upload_enable=YES ascii_download_enable=YES 设定支持ASCII模式的上传和下载功能。\r\n</p>\r\n<p>\r\n	pam_service_name=vsftpd PAM认证文件名。PAM将根据/etc/pam.d/vsftpd进行认证 chroot_list_file 将这个配置前面的#号去掉。 以下这些是关于Vsftpd虚拟用户支持的重要CentOS FTP服务配置项目。 默认vsftpd.conf中不包含这些设定项目，需要自己手动添加CentOS FTP服务配置。\r\n</p>\r\n<p>\r\n	guest_enable=YES 设定启用虚拟用户功能。\r\n</p>\r\n<p>\r\n	guest_username=ftp 指定虚拟用户的宿主用户。CentOS中已经有内置的ftp用户了。\r\n</p>\r\n<p>\r\n	user_config_dir=/etc/vsftpd/vuser_conf 设定虚拟用户个人vsftp的CentOS FTP服务文件存放路径。存放虚拟用户个性的CentOS FTP服务文件(配置文件名=虚拟用户名) 这个目录可以这样理解，针对每一个FTP账号，我们可以在此目录下创建一个与账号同名的文件（必须同名，这是规定）。然后，在里面配置一些特殊的信息。比如：这个账号是否能上传文件，是否能下载文件，所能访问的目录空间是什么等。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	6 创建chroot list，将FTP用户加入其中\r\n</h3>\r\n<p>\r\n	我们有了FTP账号，但是，这个时候 vsftpd 服务器并不知道。所以，我们要告诉它。 执行如下命令：\r\n</p>\r\n<pre>$ touch /etc/vsftpd/chroot_list\r\n$ echo ftp001 &gt;&gt; /etc/vsftpd/chroot_list</pre>\r\n<p>\r\n	如果，你有多个FTP账户，那么请将这些账户以每行一个的方式配置在此文件中即可。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	7 账户认证\r\n</h3>\r\n<p>\r\n	首先，我们要安装Berkeley DB工具，很多人找在接下来执行db_load命令的时候，会发生找到不此命令的错误就是因为没有安装这个包。 首先查看系统中是否已经安装，命令如下：\r\n</p>\r\n<pre>$ rpm -qa|grep db4</pre>\r\n<p>\r\n	安装即会输出类似以下的信息：\r\n</p>\r\n<pre>db4-4.7.25-17.el6.x86_64\r\ndb4-utils-4.7.25-17.el6.x86_64</pre>\r\n<p>\r\n	反之，则没有安装。执行以下命令进行安装：\r\n</p>\r\n<pre>$ yum -y install db4 db4-utils</pre>\r\n<p>\r\n	安装完毕。然后我们创建用户密码文本,命令如下：\r\n</p>\r\n<pre>$ vi /etc/vsftpd/vuser_passwd.txt</pre>\r\n<p>\r\n	将我们的FTP账号密码配置进去。注意奇行是用户名，偶行是密码。如：\r\n</p>\r\n<pre>ftp001\r\nftp123456</pre>\r\n<p>\r\n	接着，生成虚拟用户认证的db文件，执行如下命令：\r\n</p>\r\n<pre>$ db_load -T -t hash -f /etc/vsftpd/vuser_passwd.txt /etc/vsftpd/vuser_passwd.db</pre>\r\n<p>\r\n	随后，编辑 vsftpd 认证文件：/etc/pam.d/vsftpd. 将此文件中所有代码注释掉，注释请用#号。然后，在文件最后增加如下两句：\r\n</p>\r\n<pre>auth required pam_userdb.so db=/etc/vsftpd/vuser_passwdaccount required pam_userdb.so db=/etc/vsftpd/vuser_passwd</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	以上两句是32位系统的添加内容，64位的系统是如下：\r\n</p>\r\n<pre>auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd\r\naccount required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	8 最后配置每个FTP用户的配置文件\r\n</h3>\r\n<p>\r\n	因为，我们要将所有与用户FTP配置文件放到如下目录下，所以，我们要创建它：\r\n</p>\r\n<pre>$ mkdir /etc/vsftpd/vuser_conf/</pre>\r\n<p>\r\n	然后，在此目录中为每个FTP用户创建一个配置文件,以我们创建和ftp001账户为例：\r\n</p>\r\n<pre>$ vi /etc/vsftpd/vuser_conf/ftp001</pre>\r\n<p>\r\n	在文件中配置如下内容：\r\n</p>\r\n<pre>local_root=/opt/ftp_dir/ftp001\r\nwrite_enable=YES\r\nanon_world_readable_only=NO\r\nanon_upload_enable=YES\r\nanon_mkdir_write_enable=YES\r\nanon_other_write_enable=YES\r\nlocal_umask=022</pre>\r\n<p>\r\n	local_root 是告诉 FTP 账户只能访问此目录。\r\n</p>\r\n<p>\r\n	以上配置完成之后，记得关闭系统防火墙。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	===以下是常见错误与解决方案===\r\n</p>\r\n<p>\r\n	安装完以后，可能发现连接ftp服务器，一般是由于SELinux的问题，原因如下： CentOS系统是Rad Hat派系的，把vsftpd安装配置OK之后，但客户端访问提示如下错误： 500 OOPS: cannot change directory:/opt/ftp_dir/ftp001 原因是CentOS系统安装了SELinux，因为默认下是没有开启FTP的支持，所以访问时都被阻止了。 查看 SELinux 设置,命令如下：\r\n</p>\r\n<pre>$ getsebool -a|grep ftp</pre>\r\n<p>\r\n	Centos6系列以前的版本在输出的结果中会有如下信息：\r\n</p>\r\n<pre>ftpd_disable_trans --&gt; offftp_home_dir--&gt;off</pre>\r\n<p>\r\n	Centos 6系列是没有ftpd_disable_trans的。 通过查看得到，ftp是关掉了。 使用setsebool命令开启，Centos 6 需要执行第一句shell命令：\r\n</p>\r\n<pre>$ setsebool ftpd_disable_trans 1setsebool ftp_home_dir 1</pre>\r\n<p>\r\n	由于操作系统一旦重启后，这种设置需要重新设置，这里使用-P参数实现. setsebool使用-P参数，无需每次开机都输入这个命令，Centos 6版本不需要执行第一句shell命令：\r\n</p>\r\n<pre>setsebool -P ftpd_disable_trans 1setsebool -P ftp_home_dir 1</pre>\r\n<p>\r\n	查看当前状态是否是on的状态,命令如下：\r\n</p>\r\n<pre>$ getsebool -a|grep ftp</pre>\r\n<p>\r\n	结果如下： ftpd_disable_trans –&gt; on ftp_home_dir–&gt;on 这时候重启 vsftpd 服务器，命令如下：\r\n</p>\r\n<pre>$ service vsftpd restart</pre>\r\n<p>\r\n	1.553 Could not create file 一般都是SELinux的问题，设置SELinux的一个值，重启服务器即可。 setsebool -P ftpd_disable_trans 1 service vsftpd restart 还有可能是所设置的目录，FTP账户没有权限访问。我在亲测的过程中就遇到过这样的问题。 2.500 OOPS: bad bool value in config file for: write_enable 注意你的CentOS FTP服务文件中保证每一行最后没有任何空格，一般出错就是在多余的空格上。 打开/etc/selinux/config将 selinux=enforcing 改成permissive 或disabled。\r\n</p>\r\n<ul>\r\n	<li>\r\n		<p>\r\n			enforcing 强制模式，只要 SELinux 不允许，就无法执行；\r\n		</p>\r\n	</li>\r\n	<li>\r\n		<p>\r\n			permissive 警告模式，将该事件记录，依然允许执行；\r\n		</p>\r\n	</li>\r\n	<li>\r\n		<p>\r\n			disabled 关闭 SELinux；\r\n		</p>\r\n	</li>\r\n	<li>\r\n		<p>\r\n			停用、启用需要重启计算机；\r\n		</p>\r\n	</li>\r\n	<li>\r\n		<p>\r\n			使用 setenforce 切换 enforcing 与 permissive 模式不需要重启计算机；\r\n		</p>\r\n	</li>\r\n	<li>\r\n		<p>\r\n			getenforce 及 sestatus 查看执行模式；\r\n		</p>\r\n		<p>\r\n			&nbsp;\r\n		</p>\r\n	</li>\r\n</ul>\r\n<p>\r\n	———– vsFTPd 配置选项说明 —————\r\n</p>\r\n<p>\r\n	在默认的配置文件中，并不会列出所有的配置项。所以，接下来可能会碰到一些在默认配置文件中没出现的配置选项，你可以根据需要自行配置使用。\r\n</p>\r\n<p>\r\n	其他\r\n</p>\r\n<p>\r\n	1、Centos 网易镜像：<a href=\"http://mirrors.163.com/centos/6.5/isos/i386/\">点击进入</a>。\r\n</p>\r\n<p>\r\n	2、vsFTP官网：<a href=\"https://security.appspot.com/vsftpd.html\">点击进入</a>。\r\n</p>', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_news_data` VALUES ('17', '<h2>\r\n	CentOS 系统更改 yum 源为 163\r\n</h2>\r\n<p>\r\n	CentOS 安装好之后，按照网上教程对 yum 源进行修改，但更新之后发现总是提示更新失败，到 163 网站上查找资源发现目前大部分网上的教程都写错地址了。<br />\r\n&nbsp;\r\n</p>\r\n<h3>\r\n	1、进入存放源配置的文件夹\r\n</h3>\r\n<pre class=\"prettyprint\">$ cd /etc/yum.repos.d</pre>\r\n<h3>\r\n	2、备份默认源\r\n</h3>\r\n<pre class=\"prettyprint\">$ mv ./CentOS-Base.repo ./CentOS-Base.repo.bak</pre>\r\n<h3>\r\n	3、使用wget下载163的源&nbsp;\r\n</h3>\r\n<p>\r\n	http://mirrors.163.com/.help/centos.html\r\n</p>\r\n<pre class=\"prettyprint\">$ wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</pre>\r\n<h3>\r\n	4、把下载下来的文件CentOS-Base-163.repo设置为默认源\r\n</h3>\r\n<pre class=\"prettyprint\">$ mv CentOS6-Base-163.repo CentOS-Base.repo</pre>\r\n<br />\r\n通过上述操作就把默认源修改为163的了。当然上述的第三、四步可以合并为如下：<br />\r\n<pre class=\"prettyprint\">$ wget http://mirrors.163.com/.help/CentOS6-Base-163.repo -O CentOS-Base.repo</pre>\r\n运行 yum makecache 生成缓存<br />\r\n<pre class=\"prettyprint\">$ yum makecache</pre>\r\n<br />\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<br />\r\n</p>', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_news_data` VALUES ('18', '<h2>\r\n	MySQL 索引优化\r\n</h2>\r\n<p>\r\n	众所周知，数据库索引会帮助我们在数据查询时提升查询性能，缩短查询时间。每一个开发人员都必须掌握 MySQL 索引的优化知识。索引有其优点及缺点。只有充分掌握之后，方能编写高效的程序。\r\n</p>\r\n<p>\r\n	我们主要从几个方面来讲述索引：\r\n</p>\r\n<ul>\r\n	<li>\r\n		索引类型。\r\n	</li>\r\n	<li>\r\n		索引的管理（添加、修改、删除）。\r\n	</li>\r\n	<li>\r\n		索引如何使用。\r\n	</li>\r\n	<li>\r\n		索引何时会失效。\r\n	</li>\r\n</ul>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	1 索引类型\r\n</h3>\r\n<p>\r\n	MySQL 目前主要有以下几种类型：\r\n</p>\r\n<ul>\r\n	<li>\r\n		普通索引。\r\n	</li>\r\n	<li>\r\n		唯一索引。\r\n	</li>\r\n	<li>\r\n		主键索引。\r\n	</li>\r\n	<li>\r\n		组合索引。\r\n	</li>\r\n	<li>\r\n		全文索引。\r\n	</li>\r\n</ul>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	2 索引管理\r\n</h3>\r\n<p>\r\n	创建索引语句：\r\n</p>\r\n<pre>CREATE TABLE table_name[col_name data type]\r\n[unique|fulltext][index|key][index_name](col_name[length])[asc|desc]</pre>\r\n<ol>\r\n	<li>\r\n		unique|fulltext 为可选参数，分别表示唯一索引、全文索引\r\n	</li>\r\n	<li>\r\n		index 和 key 为同义词，两者作用相同，用来指定创建索引\r\n	</li>\r\n	<li>\r\n		col_name 为需要创建索引的字段列，该列必须从数据表中该定义的多个列中选择\r\n	</li>\r\n	<li>\r\n		index_name 指定索引的名称，为可选参数，如果不指定，默认 col_name 为索引值\r\n	</li>\r\n	<li>\r\n		length 为可选参数，表示索引的长度，只有字符串类型的字段才能指定索引长度\r\n	</li>\r\n	<li>\r\n		asc 或 desc 指定升序或降序的索引值存储\r\n	</li>\r\n</ol>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h4>\r\n	2.1 普通索引\r\n</h4>\r\n<p>\r\n	是最基本的索引，它没有任何限制。它有以下几种创建方式：\r\n</p>\r\n<p>\r\n	<strong>（1）直接创建索引</strong> \r\n</p>\r\n<pre>CREATE INDEX index_name ON table(column(length))</pre>\r\n<p>\r\n	<strong>（2）修改表结构的方式添加索引</strong> \r\n</p>\r\n<pre>ALTER TABLE table_name ADD INDEX index_name ON (column(length))</pre>\r\n<p>\r\n	<strong>（3）创建表的时候同时创建索引</strong> \r\n</p>\r\n<pre>CREATE TABLE `table` (\r\n    `id` int(11) NOT NULL AUTO_INCREMENT ,\r\n    `title` char(255) CHARACTER NOT NULL ,\r\n    `content` text CHARACTER NULL ,\r\n    `time` int(10) NULL DEFAULT NULL ,\r\n    PRIMARY KEY (`id`),\r\n    INDEX index_name (title(length))\r\n)</pre>\r\n<p>\r\n	<strong>（4）删除索引</strong> \r\n</p>\r\n<pre>DROP INDEX index_name ON table</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	2.2 唯一索引\r\n</h4>\r\n<p>\r\n	与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：\r\n</p>\r\n<p>\r\n	<strong>（1）创建唯一索引</strong> \r\n</p>\r\n<pre>CREATE UNIQUE INDEX indexName ON table(column(length))</pre>\r\n<p>\r\n	<strong>（2）修改表结构</strong> \r\n</p>\r\n<pre>ALTER TABLE table_name ADD UNIQUE indexName ON (column(length))</pre>\r\n<p>\r\n	<strong>（3）创建表的时候直接指定</strong> \r\n</p>\r\n<pre>CREATE TABLE `table` (\r\n    `id` int(11) NOT NULL AUTO_INCREMENT ,\r\n    `title` char(255) CHARACTER NOT NULL ,\r\n    `content` text CHARACTER NULL ,\r\n    `time` int(10) NULL DEFAULT NULL ,\r\n    UNIQUE indexName (title(length))\r\n);</pre>\r\n<p>\r\n	<strong>（4）删除索引</strong> \r\n</p>\r\n<pre>DROP INDEX index_name ON table</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	2.3 主键索引\r\n</h4>\r\n<p>\r\n	是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值。一般是在建表的时候同时创建主键索引：\r\n</p>\r\n<pre>CREATE TABLE `table` (\r\n    `id` int(11) NOT NULL AUTO_INCREMENT ,\r\n    `title` char(255) NOT NULL ,\r\n    PRIMARY KEY (`id`)\r\n);</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	2.4 组合索引\r\n</h4>\r\n<p>\r\n	指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用组合索引时遵循最左前缀集合。\r\n</p>\r\n<pre>ALTER TABLE `table` ADD INDEX name_city_age (name, city, age);</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	2.5 全文索引\r\n</h4>\r\n<p>\r\n	主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext 索引跟其它索引大不相同，它更像是一个搜索引擎，而不是简单的 where 语句的参数匹配。fulltext 索引配合 match against 操作使用，而不是一般的where 语句加 like。它可以在 create table，alter table ，create index 使用，不过目前只有 char、varchar，text 列上可以创建全文索引。值得一提的是，在数据量较大时候，现将数据放入一个没有全局索引的表中，然后再用 CREATE index 创建 fulltext 索引，要比先为一张表建立 fulltext 然后再将数据写入的速度快很多。\r\n</p>\r\n<p>\r\n	<strong>（1）创建表的适合添加全文索引</strong> \r\n</p>\r\n<pre>CREATE TABLE `table` (\r\n    `id` int(11) NOT NULL AUTO_INCREMENT ,\r\n    `title` char(255) CHARACTER NOT NULL ,\r\n    `content` text CHARACTER NULL ,\r\n    `time` int(10) NULL DEFAULT NULL ,\r\n    PRIMARY KEY (`id`),\r\n    FULLTEXT (content)\r\n);</pre>\r\n<p>\r\n	<strong>（2）修改表结构添加全文索引</strong> \r\n</p>\r\n<pre>ALTER TABLE article ADD FULLTEXT index_content(content)</pre>\r\n<p>\r\n	<strong>（3）直接创建索引</strong> \r\n</p>\r\n<pre>CREATE FULLTEXT INDEX index_content ON article(content)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	3 索引缺点\r\n</h3>\r\n<ol>\r\n	<li>\r\n		虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行insert、update和delete。因为更新表时，不仅要保存数据，还要保存一下索引文件。\r\n	</li>\r\n	<li>\r\n		建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会增长很快。\r\n	</li>\r\n</ol>\r\n<p>\r\n	索引只是提高效率的一个因素，如果有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	4 索引失效\r\n</h3>\r\n<p>\r\n	正确的使用索引，能让查询速度得到质的提升。错误的使用，性能得不到提升的同时也会导致无效索引数据占用过多的本地磁盘空间。\r\n</p>\r\n<p>\r\n	以下列表了一些不正确的使用情况。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<strong>（1）索引不会包含有 NULL值的列</strong> \r\n</p>\r\n<p>\r\n	只要列中包含有 NULL 值都将不会被包含在索引中，复合索引中只要有一列含有 NULL 值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为 null。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<strong>（2）索引过长</strong> \r\n</p>\r\n<p>\r\n	对字符串列进行索引，如果可以的话，应该指定一个前缀长度。例如，如果有一个 CHAR(255) 的列，如果在前 10 个或 20 个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和 I/O 操作。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<strong>（3）索引列排序</strong> \r\n</p>\r\n<p>\r\n	查询只使用一个索引，因此如果 WHERE 子句中已经使用了索引的话，那么 ORDER BY 中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<strong>（4）LIKE 语句操作</strong> \r\n</p>\r\n<p>\r\n	一般情况下不推荐使用 like 操作，如果非使用不可，如何使用也是一个问题。LIKE “%aaa%” 不会使用索引而 LIKE “aaa%”可以使用索引。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<strong>（5）不要在列上进行运算</strong> \r\n</p>\r\n<p>\r\n	这将导致索引失效而进行全表扫描，例如：\r\n</p>\r\n<pre>SELECT * FROM table_name WHERE YEAR(column_name) &lt; 2017;</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	（6）不使用 NOT IN 和 &lt;&gt; 操作\r\n</p>\r\n<p>\r\n	MySQL 在 NOT IN 与 &lt;&gt; 是不会使用索引的。所以，应该尽量避免使用 NOT IN 和 &lt;&gt;。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	5 建议\r\n</h3>\r\n<h4>\r\n	5.1 尽量不要在经常修改的列创建索引\r\n</h4>\r\n<p>\r\n	经常修改的列创建索引的话，会导致每次修改都会对索引进行创建修改。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_news_data` VALUES ('19', '<h2>\r\n	MySQL Explain 使用详解\r\n</h2>\r\n<p>\r\n	explain 显示了 mysql 如何使用索引来处理 select 语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。\r\n</p>\r\n<p>\r\n	使用方法，在 select 语句前加上 explain 就可以了：\r\n</p>\r\n<p>\r\n	如：\r\n</p>\r\n<pre>EXPLAIN SELECT surname, first_name FROM a, b WHERE a.id=b.id</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	1 EXPLAIN 列的解释：\r\n</h3>\r\n<ul>\r\n	<li>\r\n		table：显示这一行的数据是关于哪张表的。\r\n	</li>\r\n	<li>\r\n		type：这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为 const、eq_reg、ref、range、index 和 ALL。\r\n	</li>\r\n	<li>\r\n		possible_keys：显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从 WHERE 语句中选择一个合适的语句。\r\n	</li>\r\n	<li>\r\n		key： 实际使用的索引。如果为 NULL，则没有使用索引。很少的情况下，MYSQL 会选择优化不足的索引。这种情况下，可以在 SELECT 语句中使用 USE INDEX（indexname）来强制使用一个索引或者用 IGNORE INDEX（indexname）来强制 MYSQL 忽略索引。\r\n	</li>\r\n	<li>\r\n		key_len：使用的索引的长度。在不损失精确性的情况下，长度越短越好。\r\n	</li>\r\n	<li>\r\n		ref：显示索引的哪一列被使用了，如果可能的话，是一个常数。\r\n	</li>\r\n	<li>\r\n		rows：MySQL 认为必须检查的用来返回请求数据的行数\r\n	</li>\r\n	<li>\r\n		Extra：关于MYSQL如何解析查询的额外信息。将在表4.3中讨论，但这里可以看到的坏的例子是Using temporary和Using filesort，意思MYSQL根本不能使用索引，结果是检索会很慢\r\n	</li>\r\n</ul>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	2 extra 列返回的描述的意义\r\n</h3>\r\n<ul>\r\n	<li>\r\n		Distinct : 一旦 MySQL 找到了与行相联合匹配的行，就不再搜索了。\r\n	</li>\r\n	<li>\r\n		Not exists : MySQL 优化了LEFT JOIN，一旦它找到了匹配 LEFT JOIN 标准的行，就不再搜索了。\r\n	</li>\r\n	<li>\r\n		Range checked for each Record（index map:#）: 没有找到理想的索引，因此对于从前面表中来的每一个行组合，MySQL 检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一。\r\n	</li>\r\n	<li>\r\n		Using filesort : 看到这个的时候，查询就需要优化了。MySQL 需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行。\r\n	</li>\r\n	<li>\r\n		Using index : 列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候。\r\n	</li>\r\n	<li>\r\n		Using temporary 看到这个的时候，查询需要优化了。这里，MYSQL 需要创建一个临时表来存储结果，这通常发生在对不同的列集进行 ORDER BY 上，而不是 GROUP BY 上 Where used 使用了 WHERE 从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型 ALL或 index，这就会发生，或者是查询有问题不同连接类型的解释（按照效率高低的顺序排序）。\r\n	</li>\r\n	<li>\r\n		system 表只有一行：system表。这是const连接类型的特殊情况\r\n	</li>\r\n	<li>\r\n		const : 表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为 MySQL 先读这个值然后把它当做常数来对待。\r\n	</li>\r\n	<li>\r\n		eq_ref : 在连接中，MySQL 在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用。\r\n	</li>\r\n	<li>\r\n		ref : 这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好。\r\n	</li>\r\n	<li>\r\n		range:这个连接类型使用索引返回一个范围中的行，比如使用&gt;或&lt;查找东西时发生的情况\r\n	</li>\r\n	<li>\r\n		index: 这个连接类型对前面的表中的每一个记录联合进行完全扫描（比 ALL 更好，因为索引一般小于表数据）。\r\n	</li>\r\n	<li>\r\n		ALL : 这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免\r\n	</li>\r\n</ul>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	先看一个例子：\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order; \r\n+----+-------------+---------+------+---------------+------+---------+------+--------+-------+ \r\n| id | select_type | table   | type | possible_keys | key  | key_len | ref  | rows   | Extra | \r\n+----+-------------+---------+------+---------------+------+---------+------+--------+-------+ \r\n|  1 | SIMPLE      | t_order | ALL  | NULL          | NULL | NULL    | NULL | 100453 |       | \r\n+----+-------------+---------+------+---------------+------+---------+------+--------+-------+ \r\n1 row in set (0.03 sec)</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	加上extended后之后：\r\n</p>\r\n<pre># mysql&gt; explain extended select * from t_order; \r\n+----+-------------+---------+------+---------------+------+---------+------+--------+----------+-------+ \r\n| id | select_type | table   | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra | \r\n+----+-------------+---------+------+---------------+------+---------+------+--------+----------+-------+ \r\n|  1 | SIMPLE      | t_order | ALL  | NULL          | NULL | NULL    | NULL | 100453 |   100.00 |       | \r\n+----+-------------+---------+------+---------------+------+---------+------+--------+----------+-------+ \r\n1 row in set, 1 warning (0.00 sec)</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	有必要解释一下这个长长的表格里每一列的含义：\r\n</p>\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>\r\n				<strong>id</strong> \r\n			</th>\r\n			<th>\r\n				SELECT识别符。这是SELECT的查询序列号\r\n			</th>\r\n		</tr>\r\n	</tbody>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n				<strong>select_type</strong> \r\n			</td>\r\n			<td>\r\n				SELECT类型,可以为以下任何一种:<strong>SIMPLE</strong>:简单SELECT(不使用UNION或子查询)<strong>PRIMARY</strong>:最外面的SELECT<strong>UNION</strong>:UNION中的第二个或后面的SELECT语句<strong>DEPENDENT UNION</strong>:UNION中的第二个或后面的SELECT语句,取决于外面的查询<strong>UNION RESULT</strong>:UNION 的结果<strong>SUBQUERY</strong>:子查询中的第一个SELECT<strong>DEPENDENT SUBQUERY</strong>:子查询中的第一个SELECT,取决于外面的查询<strong>DERIVED</strong>:导出表的SELECT(FROM子句的子查询)\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				<strong>table</strong> \r\n			</td>\r\n			<td>\r\n				输出的行所引用的表\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				<strong>type</strong> \r\n			</td>\r\n			<td>\r\n				联接类型。下面给出各种联接类型,按照从最佳类型到最坏类型进行排序:<strong>system</strong>:表仅有一行(=系统表)。这是const联接类型的一个特例。<strong>const</strong>:表最多有一个匹配行,它将在查询开始时被读取。因为仅有一行,在这行的列值可被优化器剩余部分认为是常数。const表很快,因为它们只读取一次!<strong>eq_ref</strong>:对于每个来自于前面的表的行组合,从该表中读取一行。这可能是最好的联接类型,除了const类型。<strong>ref</strong>:对于每个来自于前面的表的行组合,所有有匹配索引值的行将从这张表中读取。<strong>ref_or_null</strong>:该联接类型如同ref,但是添加了MySQL可以专门搜索包含NULL值的行。<strong>index_merge</strong>:该联接类型表示使用了索引合并优化方法。<strong>unique_subquery</strong>:该类型替换了下面形式的IN子查询的ref: value IN (SELECT primary_key FROM single_table WHERE some_expr) unique_subquery是一个索引查找函数,可以完全替换子查询,效率更高。<strong>index_subquery</strong>:该联接类型类似于unique_subquery。可以替换IN子查询,但只适合下列形式的子查询中的非唯一索引: value IN (SELECT key_column FROM single_table WHERE some_expr)<strong>range</strong>:只检索给定范围的行,使用一个索引来选择行。<strong>index</strong>:该联接类型与ALL相同,除了只有索引树被扫描。这通常比ALL快,因为索引文件通常比数据文件小。<strong>ALL</strong>:对于每个来自于先前的表的行组合,进行完整的表扫描。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				<strong>possible_keys</strong> \r\n			</td>\r\n			<td>\r\n				指出MySQL能使用哪个索引在该表中找到行\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				<strong>key</strong> \r\n			</td>\r\n			<td>\r\n				显示MySQL实际决定使用的键(索引)。如果没有选择索引,键是NULL。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				<strong>key_len</strong> \r\n			</td>\r\n			<td>\r\n				显示MySQL决定使用的键长度。如果键是NULL,则长度为NULL。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				<strong>ref</strong> \r\n			</td>\r\n			<td>\r\n				显示使用哪个列或常数与key一起从表中选择行。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				<strong>rows</strong> \r\n			</td>\r\n			<td>\r\n				显示MySQL认为它执行查询时必须检查的行数。多行之间的数据相乘可以估算要处理的行数。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				<strong>filtered</strong> \r\n			</td>\r\n			<td>\r\n				显示了通过条件过滤出的行数的百分比估计值。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				<strong>Extra</strong> \r\n			</td>\r\n			<td>\r\n				该列包含MySQL解决查询的详细信息<strong>Distinct</strong>:MySQL发现第1个匹配行后,停止为当前的行组合搜索更多的行。<strong>Not exists</strong>:MySQL能够对查询进行LEFT JOIN优化,发现1个匹配LEFT JOIN标准的行后,不再为前面的的行组合在该表内检查更多的行。<strong>range checked for each record (index map: #)</strong>:MySQL没有发现好的可以使用的索引,但发现如果来自前面的表的列值已知,可能部分索引可以使用。<strong>Using filesort</strong>:MySQL需要额外的一次传递,以找出如何按排序顺序检索行。<strong>Using index</strong>:从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。<strong>Using temporary</strong>:为了解决查询,MySQL需要创建一个临时表来容纳结果。<strong>Using where</strong>:WHERE 子句用于限制哪一个行匹配下一个表或发送到客户。<strong>Using sort_union(...), Using union(...), Using intersect(...)</strong>:这些函数说明如何为index_merge联接类型合并索引扫描。<strong>Using index for group-by</strong>:类似于访问表的Using index方式,Using index for group-by表示MySQL发现了一个索引,可以用来查 询GROUP BY或DISTINCT查询的所有列,而不要额外搜索硬盘访问实际的表。\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n<h3>\r\n	3 select_type的说明\r\n</h3>\r\n<h4>\r\n	3.1 UNION\r\n</h4>\r\n<p>\r\n	当通过union来连接多个查询结果时，第二个之后的select其select_type为UNION。\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order where order_id=100 union select * from t_order where order_id=200; \r\n+----+--------------+------------+-------+---------------+---------+---------+-------+------+-------+ \r\n| id | select_type  | table      | type  | possible_keys | key     | key_len | ref   | rows | Extra | \r\n+----+--------------+------------+-------+---------------+---------+---------+-------+------+-------+ \r\n|  1 | PRIMARY      | t_order    | const | PRIMARY       | PRIMARY | 4       | const |    1 |       | \r\n|  2 | UNION        | t_order    | const | PRIMARY       | PRIMARY | 4       | const |    1 |       | \r\n| NULL | UNION RESULT | &lt;union1,2&gt; | ALL   | NULL          | NULL    | NULL    | NULL  | NULL |       | \r\n+----+--------------+------------+-------+---------------+---------+---------+-------+------+-------+ \r\n3 rows in set (0.34 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	3.2 DEPENDENT UNION与DEPENDENT SUBQUERY\r\n</h4>\r\n<p>\r\n	当union作为子查询时，其中第二个 union 的 select_type 就是 DEPENDENT UNION。\r\n第一个子查询的 select_type 则是 DEPENDENT SUBQUERY。\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order where order_id in (select order_id from t_order where order_id=100 union select order_id from t_order where order_id=200); \r\n+----+--------------------+------------+-------+---------------+---------+---------+-------+--------+-------------+ \r\n| id | select_type        | table      | type  | possible_keys | key     | key_len | ref   | rows   | Extra       | \r\n+----+--------------------+------------+-------+---------------+---------+---------+-------+--------+-------------+ \r\n|  1 | PRIMARY            | t_order    | ALL   | NULL          | NULL    | NULL    | NULL  | 100453 | Using where | \r\n|  2 | DEPENDENT SUBQUERY | t_order    | const | PRIMARY       | PRIMARY | 4       | const |      1 | Using index | \r\n|  3 | DEPENDENT UNION    | t_order    | const | PRIMARY       | PRIMARY | 4       | const |      1 | Using index | \r\n| NULL | UNION RESULT       | &lt;union2,3&gt; | ALL   | NULL          | NULL    | NULL    | NULL  |   NULL |           | \r\n+----+--------------------+------------+-------+---------------+---------+---------+-------+--------+-------------+ \r\n4 rows in set (0.03 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	3.3 SUBQUERY\r\n</h4>\r\n<p>\r\n	子查询中的第一个select其select_type为SUBQUERY。\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order where order_id=(select order_id from t_order where order_id=100); \r\n+----+-------------+---------+-------+---------------+---------+---------+-------+------+-------------+ \r\n| id | select_type | table   | type  | possible_keys | key     | key_len | ref   | rows | Extra       | \r\n+----+-------------+---------+-------+---------------+---------+---------+-------+------+-------------+ \r\n|  1 | PRIMARY     | t_order | const | PRIMARY       | PRIMARY | 4       | const |    1 |             | \r\n|  2 | SUBQUERY    | t_order | const | PRIMARY       | PRIMARY | 4       |       |    1 | Using index | \r\n+----+-------------+---------+-------+---------------+---------+---------+-------+------+-------------+ \r\n2 rows in set (0.03 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	3.4 DERIVED\r\n</h4>\r\n<p>\r\n	当子查询是from子句时，其select_type为DERIVED。\r\n</p>\r\n<pre># mysql&gt; explain select * from (select order_id from t_order where order_id=100) a; \r\n+----+-------------+------------+--------+---------------+---------+---------+------+------+-------------+ \r\n| id | select_type | table      | type   | possible_keys | key     | key_len | ref  | rows | Extra       | \r\n+----+-------------+------------+--------+---------------+---------+---------+------+------+-------------+ \r\n|  1 | PRIMARY     | &lt;derived2&gt; | system | NULL          | NULL    | NULL    | NULL |    1 |             | \r\n|  2 | DERIVED     | t_order    | const  | PRIMARY       | PRIMARY | 4       |      |    1 | Using index | \r\n+----+-------------+------------+--------+---------------+---------+---------+------+------+-------------+ \r\n2 rows in set (0.03 sec)</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	4 type的说明\r\n</h3>\r\n<h4>\r\n	4.1 system，const\r\n</h4>\r\n<p>\r\n	见上面 3.4 DERIVED的例子。其中第一行的 type 就是为 system，第二行是 const，这两种联接类型是最快的。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	4.2 eq_ref\r\n</h4>\r\n<p>\r\n	在 t_order 表中的 order_id 是主键，t_order_ext 表中的 order_id 也是主键，该表可以认为是订单表的补充信息表，他们的关系是1对1，在下面的例子中可以看到b表的连接类型是 eq_ref，这是极快的联接类型。\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order a,t_order_ext b where a.order_id=b.order_id; \r\n+----+-------------+-------+--------+---------------+---------+---------+-----------------+------+-------------+ \r\n| id | select_type | table | type   | possible_keys | key     | key_len | ref             | rows | Extra       | \r\n+----+-------------+-------+--------+---------------+---------+---------+-----------------+------+-------------+ \r\n|  1 | SIMPLE      | b     | ALL    | order_id      | NULL    | NULL    | NULL            |    1 |             | \r\n|  1 | SIMPLE      | a     | eq_ref | PRIMARY       | PRIMARY | 4       | test.b.order_id |    1 | Using where | \r\n+----+-------------+-------+--------+---------------+---------+---------+-----------------+------+-------------+ \r\n2 rows in set (0.00 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	4.3 ref\r\n</h4>\r\n<p>\r\n	下面的例子在上面的例子上略作了修改，加上了条件。此时b表的联接类型变成了ref。因为所有与a表中order_id=100的匹配记录都将会从b表获取。这是比较常见的联接类型。\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order a,t_order_ext b where a.order_id=b.order_id and a.order_id=100; \r\n+----+-------------+-------+-------+---------------+----------+---------+-------+------+-------+ \r\n| id | select_type | table | type  | possible_keys | key      | key_len | ref   | rows | Extra | \r\n+----+-------------+-------+-------+---------------+----------+---------+-------+------+-------+ \r\n|  1 | SIMPLE      | a     | const | PRIMARY       | PRIMARY  | 4       | const |    1 |       | \r\n|  1 | SIMPLE      | b     | ref   | order_id      | order_id | 4       | const |    1 |       | \r\n+----+-------------+-------+-------+---------------+----------+---------+-------+------+-------+ \r\n2 rows in set (0.00 sec)</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h4>\r\n	4.4 ref_or_null\r\n</h4>\r\n<p>\r\n	user_id 字段是一个可以为空的字段，并对该字段创建了一个索引。在下面的查询中可以看到联接类型为ref_or_null，这是 mysql 为含有 null 的字段专门做的处理。在我们的表设计中应当尽量避免索引字段为 NULL，因为这会额外的耗费 mysql 的处理时间来做优化。\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order where user_id=100 or user_id is null; \r\n+----+-------------+---------+-------------+---------------+---------+---------+-------+-------+-------------+ \r\n| id | select_type | table   | type        | possible_keys | key     | key_len | ref   | rows  | Extra       | \r\n+----+-------------+---------+-------------+---------------+---------+---------+-------+-------+-------------+ \r\n|  1 | SIMPLE      | t_order | ref_or_null | user_id       | user_id | 5       | const | 50325 | Using where | \r\n+----+-------------+---------+-------------+---------------+---------+---------+-------+-------+-------------+ \r\n1 row in set (0.00 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	4.5 index_merge\r\n</h4>\r\n<p>\r\n	经常出现在使用一张表中的多个索引时。mysql 会将多个索引合并在一起，如下例:\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order where order_id=100 or user_id=10; \r\n+----+-------------+---------+-------------+-----------------+-----------------+---------+------+------+-------------------------------------------+ \r\n| id | select_type | table   | type        | possible_keys   | key             | key_len | ref  | rows | Extra                                     | \r\n+----+-------------+---------+-------------+-----------------+-----------------+---------+------+------+-------------------------------------------+ \r\n|  1 | SIMPLE      | t_order | index_merge | PRIMARY,user_id | PRIMARY,user_id | 4,5     | NULL |    2 | Using union(PRIMARY,user_id); Using where | \r\n+----+-------------+---------+-------------+-----------------+-----------------+---------+------+------+-------------------------------------------+ \r\n1 row in set (0.09 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	4.6 unique_subquery\r\n</h4>\r\n<p>\r\n	该联接类型用于替换value IN (SELECT primary_key FROM single_table WHERE some_expr)这样的子查询的ref。注意 ref 列，其中第二行显示的是 func，表明 unique_subquery 是一个函数，而不是一个普通的 ref。\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order where order_id in (select order_id from t_order where user_id=10); \r\n+----+--------------------+---------+-----------------+-----------------+---------+---------+------+--------+-------------+ \r\n| id | select_type        | table   | type            | possible_keys   | key     | key_len | ref  | rows   | Extra       | \r\n+----+--------------------+---------+-----------------+-----------------+---------+---------+------+--------+-------------+ \r\n|  1 | PRIMARY            | t_order | ALL             | NULL            | NULL    | NULL    | NULL | 100649 | Using where | \r\n|  2 | DEPENDENT SUBQUERY | t_order | unique_subquery | PRIMARY,user_id | PRIMARY | 4       | func |      1 | Using where | \r\n+----+--------------------+---------+-----------------+-----------------+---------+---------+------+--------+-------------+ \r\n2 rows in set (0.00 sec)</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h4>\r\n	4.7 index_subquery\r\n</h4>\r\n<p>\r\n	该联接类型与上面的太像了，唯一的差别就是子查询查的不是主键而是非唯一索引。\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order where user_id in (select user_id from t_order where order_id&gt;10); \r\n+----+--------------------+---------+----------------+-----------------+---------+---------+------+--------+--------------------------+ \r\n| id | select_type        | table   | type           | possible_keys   | key     | key_len | ref  | rows   | Extra                    | \r\n+----+--------------------+---------+----------------+-----------------+---------+---------+------+--------+--------------------------+ \r\n|  1 | PRIMARY            | t_order | ALL            | NULL            | NULL    | NULL    | NULL | 100649 | Using where              | \r\n|  2 | DEPENDENT SUBQUERY | t_order | index_subquery | PRIMARY,user_id | user_id | 5       | func |  50324 | Using index; Using where | \r\n+----+--------------------+---------+----------------+-----------------+---------+---------+------+--------+--------------------------+ \r\n2 rows in set (0.00 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	4.8 range\r\n</h4>\r\n<p>\r\n	按指定的范围进行检索，很常见。\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order where user_id in (100,200,300); \r\n+----+-------------+---------+-------+---------------+---------+---------+------+------+-------------+ \r\n| id | select_type | table   | type  | possible_keys | key     | key_len | ref  | rows | Extra       | \r\n+----+-------------+---------+-------+---------------+---------+---------+------+------+-------------+ \r\n|  1 | SIMPLE      | t_order | range | user_id       | user_id | 5       | NULL |    3 | Using where | \r\n+----+-------------+---------+-------+---------------+---------+---------+------+------+-------------+ \r\n1 row in set (0.00 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	4.9 index\r\n</h4>\r\n<p>\r\n	在进行统计时非常常见，此联接类型实际上会扫描索引树，仅比ALL快些。\r\n</p>\r\n<pre># mysql&gt; explain select count(*) from t_order; \r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+ \r\n| id | select_type | table   | type  | possible_keys | key     | key_len | ref  | rows   | Extra       | \r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+ \r\n|  1 | SIMPLE      | t_order | index | NULL          | user_id | 5       | NULL | 100649 | Using index | \r\n+----+-------------+---------+-------+---------------+---------+---------+------+--------+-------------+ \r\n1 row in set (0.00 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	4.10 ALL\r\n</h4>\r\n<p>\r\n	完整的扫描全表，最慢的联接类型，尽可能的避免。\r\n</p>\r\n<pre>mysql&gt; explain select * from t_order; \r\n+----+-------------+---------+------+---------------+------+---------+------+--------+-------+ \r\n| id | select_type | table   | type | possible_keys | key  | key_len | ref  | rows   | Extra | \r\n+----+-------------+---------+------+---------------+------+---------+------+--------+-------+ \r\n|  1 | SIMPLE      | t_order | ALL  | NULL          | NULL | NULL    | NULL | 100649 |       | \r\n+----+-------------+---------+------+---------------+------+---------+------+--------+-------+ \r\n1 row in set (0.00 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	5 extra的说明\r\n</h3>\r\n<h4>\r\n	5.1 Distinct\r\n</h4>\r\n<p>\r\n	MySQL 发现第1个匹配行后,停止为当前的行组合搜索更多的行。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	5.2.Not exists\r\n</h4>\r\n<p>\r\n	因为b表中的order_id是主键，不可能为NULL，所以mysql在用a表的order_id扫描t_order表，并查找b表的行时，如果在b表发现一个匹配的行就不再继续扫描b了，因为b表中的order_id字段不可能为NULL。这样避免了对b表的多次扫描。\r\n</p>\r\n<pre># mysql&gt; explain select count(1) from t_order a left join t_order_ext b on a.order_id=b.order_id where b.order_id is null;  \r\n+----+-------------+-------+-------+---------------+--------------+---------+-----------------+--------+--------------------------------------+ \r\n| id | select_type | table | type  | possible_keys | key          | key_len | ref             | rows   | Extra                                | \r\n+----+-------------+-------+-------+---------------+--------------+---------+-----------------+--------+--------------------------------------+ \r\n|  1 | SIMPLE      | a     | index | NULL          | express_type | 1       | NULL            | 100395 | Using index                          | \r\n|  1 | SIMPLE      | b     | ref   | order_id      | order_id     | 4       | test.a.order_id |      1 | Using where; Using index; Not exists | \r\n+----+-------------+-------+-------+---------------+--------------+---------+-----------------+--------+--------------------------------------+ \r\n2 rows in set (0.01 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	5.3 Range checked for each record\r\n</h4>\r\n<p>\r\n	这种情况是mysql没有发现好的索引可用，速度比没有索引要快得多。\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order t, t_order_ext s where s.order_id&gt;=t.order_id and s.order_id&lt;=t.order_id and t.express_type&gt;5; \r\n+----+-------------+-------+-------+----------------------+--------------+---------+------+------+------------------------------------------------+ \r\n| id | select_type | table | type  | possible_keys        | key          | key_len | ref  | rows | Extra                                          | \r\n+----+-------------+-------+-------+----------------------+--------------+---------+------+------+------------------------------------------------+ \r\n|  1 | SIMPLE      | t     | range | PRIMARY,express_type | express_type | 1       | NULL |    1 | Using where                                    | \r\n|  1 | SIMPLE      | s     | ALL   | order_id             | NULL         | NULL    | NULL |    1 | Range checked for each record (index map: 0x1) | \r\n+----+-------------+-------+-------+----------------------+--------------+---------+------+------+------------------------------------------------+ \r\n2 rows in set (0.00 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	5.4 Using filesort\r\n</h4>\r\n<p>\r\n	在有排序子句的情况下很常见的一种情况。此时mysql会根据联接类型浏览所有符合条件的记录，并保存排序关键字和行指针，然后排序关键字并按顺序检索行。\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order order by express_type; \r\n+----+-------------+---------+------+---------------+------+---------+------+--------+----------------+ \r\n| id | select_type | table   | type | possible_keys | key  | key_len | ref  | rows   | Extra          | \r\n+----+-------------+---------+------+---------------+------+---------+------+--------+----------------+ \r\n|  1 | SIMPLE      | t_order | ALL  | NULL          | NULL | NULL    | NULL | 100395 | Using filesort | \r\n+----+-------------+---------+------+---------------+------+---------+------+--------+----------------+ \r\n1 row in set (0.00 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	5.5 Using index\r\n</h4>\r\n<p>\r\n	这是性能很高的一种情况。当查询所需的数据可以直接从索引树中检索到时，就会出现。上面的例子中有很多这样的例子，不再多举例了。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	5.6 Using temporary\r\n</h4>\r\n<p>\r\n	发生这种情况一般都是需要进行优化的。mysql需要创建一张临时表用来处理此类查询。\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order a left join t_order_ext b on a.order_id=b.order_id group by b.order_id; \r\n+----+-------------+-------+------+---------------+----------+---------+-----------------+--------+---------------------------------+ \r\n| id | select_type | table | type | possible_keys | key      | key_len | ref             | rows   | Extra                           | \r\n+----+-------------+-------+------+---------------+----------+---------+-----------------+--------+---------------------------------+ \r\n|  1 | SIMPLE      | a     | ALL  | NULL          | NULL     | NULL    | NULL            | 100395 | Using temporary; Using filesort | \r\n|  1 | SIMPLE      | b     | ref  | order_id      | order_id | 4       | test.a.order_id |      1 |                                 | \r\n+----+-------------+-------+------+---------------+----------+---------+-----------------+--------+---------------------------------+ \r\n2 rows in set (0.00 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	5.7 Using where\r\n</h4>\r\n<p>\r\n	当有where子句时，extra 都会有说明。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<strong>8.Using sort_union(...)/Using union(...)/Using intersect(...)</strong> \r\n</p>\r\n<p>\r\n	下面的例子中user_id是一个检索范围，此时mysql会使用sort_union函数来进行索引的合并。而当user_id是一个固定值时，请参看上面type说明5.index_merge的例子，此时会使用union函数进行索引合并。\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order where order_id=100 or user_id&gt;10; \r\n+----+-------------+---------+-------------+-----------------+-----------------+---------+------+------+------------------------------------------------+ \r\n| id | select_type | table   | type        | possible_keys   | key             | key_len | ref  | rows | Extra                                          | \r\n+----+-------------+---------+-------------+-----------------+-----------------+---------+------+------+------------------------------------------------+ \r\n|  1 | SIMPLE      | t_order | index_merge | PRIMARY,user_id | user_id,PRIMARY | 5,4     | NULL |    2 | Using sort_union(user_id,PRIMARY); Using where | \r\n+----+-------------+---------+-------------+-----------------+-----------------+---------+------+------+------------------------------------------------+ \r\n1 row in set (0.00 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	对于Using intersect的例子可以参看下例，user_id与express_type发生了索引交叉合并。\r\n</p>\r\n<pre># mysql&gt; explain select * from t_order where express_type=1 and user_id=100; \r\n+----+-------------+---------+-------------+----------------------+----------------------+---------+------+------+----------------------------------------------------+ \r\n| id | select_type | table   | type        | possible_keys        | key                  | key_len | ref  | rows | Extra                                              | \r\n+----+-------------+---------+-------------+----------------------+----------------------+---------+------+------+----------------------------------------------------+ \r\n|  1 | SIMPLE      | t_order | index_merge | user_id,express_type | user_id,express_type | 5,1     | NULL |    1 | Using intersect(user_id,express_type); Using where | \r\n+----+-------------+---------+-------------+----------------------+----------------------+---------+------+------+----------------------------------------------------+ \r\n1 row in set (0.00 sec)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h4>\r\n	5.9 Using index for group-by\r\n</h4>\r\n<p>\r\n	表明可以在索引中找到分组所需的所有数据，不需要查询实际的表。\r\n</p>\r\n<pre># mysql&gt; explain select user_id from t_order group by user_id; \r\n+----+-------------+---------+-------+---------------+---------+---------+------+------+--------------------------+ \r\n| id | select_type | table   | type  | possible_keys | key     | key_len | ref  | rows | Extra                    | \r\n+----+-------------+---------+-------+---------------+---------+---------+------+------+--------------------------+ \r\n|  1 | SIMPLE      | t_order | range | NULL          | user_id | 5       | NULL |    3 | Using index for group-by | \r\n+----+-------------+---------+-------+---------------+---------+---------+------+------+--------------------------+ \r\n1 row in set (0.00 sec)</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	除了上面的三个说明，还需要注意 rows 的数值，多行之间的数值是乘积的关系，可以估算大概要处理的行数，如果乘积很大，那就很有优化的必要了。\r\n</p>', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_news_data` VALUES ('23', '<h2>\r\n	CentOS7 + RabbitMQ3.7.5 + PHP\r\n</h2>\r\n<blockquote>\r\n	<p>\r\n		MQ 全称为 Message Queue。消息队列（MQ）是一种应用程序对应用程序的通信方法。目前业界有很多 MQ 产品。它们是 RabbitMQ、Redis、ZeroMQ、KafkaMQ、ActiveMQ 等。本文今天讲的是 RabbitMQ。它是使用 Erlang 编写的一种开源的消息队列，本身支持很多的协议：AMQP、XMPP、SMTP、STOMP。也正是如此，使得它变得非常重量级，更适合企业级开发。同时实现了一个经纪人（Broker）构架，这意味着消息在发送给客户端时先在中心队列排队。对路由（Routing），负载均衡（Load balance）或者数据持久化都有很好的支持。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	一、Erlang 安装\r\n</h3>\r\n<p>\r\n	<strong>1）RabbitMQ 是用 Erlang 语言编写。</strong> \r\n</p>\r\n<p>\r\n	所以，我们在安装 RabbitMQ 之前必须安装 Erlang。\r\n</p>\r\n<pre>$ yum -y install make ncurses-devel gcc gcc-c++ unixODBC unixODBC-devel openssl openssl-devel\r\n$ wget http://erlang.org/download/otp_src_20.3.tar.gz\r\n$ tar zxvf otp_src_20.3.tar.gz\r\n$ cd otp_src_20.3\r\n$ ./configure      		  \\\r\n  --prefix=/usr/local/erlang      \\\r\n  --enable-smp-support            \\\r\n  --enable-threads                \\\r\n  --enable-sctp                   \\\r\n  --enable-kernel-poll            \\\r\n  --enable-hipe                   \\\r\n  --with-ssl\r\n$ make &amp;&amp; make install</pre>\r\n<p>\r\n	<strong>2）设置环境变量</strong> \r\n</p>\r\n<pre>$ vi /etc/profile</pre>\r\n<p>\r\n	将 Erlang 的 bin 目录添加进去。\r\n</p>\r\n<pre>ERL_HOME=/usr/local/erlang\r\nPATH=$ERL_HOME/bin:$PATH\r\nexport ERL_HOME PATH</pre>\r\n<p>\r\n	让环境变量立即生效：\r\n</p>\r\n<pre>$ source /etc/profile</pre>\r\n<h3>\r\n	二、安装 RabbitMQ\r\n</h3>\r\n<p>\r\n	Erlang安装好之后。我去RabbitMQ找到了最新的RPM包。我们就不通过源码安装了。\r\n</p>\r\n<pre>$ wget https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.5/rabbitmq-server-3.7.5-1.el7.noarch.rpm\r\n$ rpm -i --nodeps rabbitmq-server-3.7.5-1.el7.noarch.rpm</pre>\r\n<h3>\r\n	三、RabbitMQ 管理\r\n</h3>\r\n<p>\r\n	<strong>1）启动 RabbitMQ</strong> \r\n</p>\r\n<pre>$ rabbitmq-server start</pre>\r\n<p>\r\n	启动成功会输出如下信息：\r\n</p>\r\n<pre>##  ##\r\n  ##  ##      RabbitMQ 3.7.5. Copyright (C) 2007-2018 Pivotal Software, Inc.\r\n  ##########  Licensed under the MPL.  See http://www.rabbitmq.com/\r\n  ######  ##\r\n  ##########  Logs: /var/log/rabbitmq/rabbit@localhost.log\r\n                    /var/log/rabbitmq/rabbit@localhost_upgrade.log\r\n\r\n              Starting broker...\r\n completed with 0 plugins.</pre>\r\n<p>\r\n	如果需要设置为后台运行的守护进程。则：\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<pre class=\"prettyprint\">rabbitmq-server -detached</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<strong>2）停止 RabbitMQ</strong> \r\n</p>\r\n<pre>$ rabbitmqctl stop</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	四、用户管理\r\n</h3>\r\n<p>\r\n	<strong>1）添加用户</strong> \r\n</p>\r\n<p>\r\n	为当前程序新建用户admin密码为admin:\r\n</p>\r\n<pre>$ rabbitmqctl add_user admin admim</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<strong>2）删除用户</strong> \r\n</p>\r\n<pre>$ rabbitmqctl delete_user admin</pre>\r\n<p>\r\n	注意：当删除用户时，任何引用该用户访问权限条目都会从RabbitMQ权限数据库中自动删除。RabbitMQ并不会提醒你与用户相关的控制条目都被删除了。所以，删除用户时需要非常谨慎。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<strong>3）查看当前用户</strong> \r\n</p>\r\n<pre>$ rabbitmqctl list_users</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<strong>4）修改密码</strong> \r\n</p>\r\n<pre>$ rabbitmqctrl change_password admin admin123</pre>\r\n<p>\r\n	我们把用户admin的用户密码修改成了admin123。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	五、权限管理\r\n</h3>\r\n<p>\r\n	<strong>1）分配权限</strong> \r\n</p>\r\n<p>\r\n	我们现在给添加的 admin 账号赋予读写以及配置的权限。\r\n</p>\r\n<pre>$ rabbitmqctl set_permissions -p  / admin  \".*\"  \".*\" \".*\"</pre>\r\n<p>\r\n	查看权限设置结果：\r\n</p>\r\n<pre>$ rabbitmqctl list_permissions -p /</pre>\r\n<p>\r\n	会输出如下结果：\r\n</p>\r\n<pre>Listing permissions for vhost \"/\" ...\r\nadmin   .*      .*      .*\r\nguest   .*      .*      .*</pre>\r\n<p>\r\n	参数说明：\r\n</p>\r\n<pre>-p /：代表 set_permissions 控制条目应该用到哪个 vhosts 上；\r\nadmin：代表被授权的用户名字；\r\n\".*\" \".*\"  \".*\"：分别代表配置、读和写权限，而其中的 \".*\" 为正则表达式，代表匹配所有权限；</pre>\r\n<blockquote>\r\n	<p>\r\n		开发中我们为了方便，通常都会给用户最大权限。正式上线之后，会根据实际用途细化设置。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<strong>2）删除权限</strong> \r\n</p>\r\n<pre>$ rabbitmqctl clear_permissions -p / admin</pre>\r\n<p>\r\n	此时，我们再查看一下权限情况：\r\n</p>\r\n<pre>$ rabbitmqctl list_permissions -p /</pre>\r\n<p>\r\n	会输出如下结果：\r\n</p>\r\n<pre>Listing permissions for vhost \"/\" ...\r\nguest   .*      .*      .*</pre>\r\n<p>\r\n	我们发现，admin用户的权限已经被删除了。如果要查看用户所有的 RabbitMQ 服务器上的 vhosts 上的权限，请使用list_user_permissions命令。开发中，我们一般更关注解决实际的业务场景问题。所以，当需要深入去操作这块的时候可以去查看相关的手册。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	六、角色管理\r\n</h3>\r\n<p>\r\n	为用户添加权限，已经基本可以满足我们的需求了，但有时，我们可以使用系统预置的角色，为用户赋予角色，那么该用户也就拥有了该角色所赋予的所有权限了，在RabbitMQ中，角色大致分为超级管理员、监控者、策略制定者、普通管理者以及其他，它们的区别是什么？\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<strong>(1) 超级管理员(administrator)</strong> \r\n</p>\r\n<p>\r\n	可登陆管理控制台(启用managementplugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。\r\n</p>\r\n<p>\r\n	<strong>(2) 监控者(monitoring)</strong> \r\n</p>\r\n<p>\r\n	可登陆管理控制台(启用managementplugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)\r\n</p>\r\n<p>\r\n	<strong>(3) 策略制定者(policymaker)</strong> \r\n</p>\r\n<p>\r\n	可登陆管理控制台(启用managementplugin的情况下),同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。\r\n</p>\r\n<p>\r\n	<strong>(4) 普通管理者(management)</strong> \r\n</p>\r\n<p>\r\n	仅可登陆管理控制台(启用managementplugin的情况下)，无法看到节点信息，也无法对策略进行管理。\r\n</p>\r\n<p>\r\n	<strong>(5) 其他</strong> \r\n</p>\r\n<p>\r\n	无法登陆管理控制台，通常就是普通的生产者和消费者。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<strong>用户角色分配</strong> \r\n</p>\r\n<pre>$ rabbitmqctl set_user_tags admin administrator</pre>\r\n<p>\r\n	我们再来查看一下用户的情况：\r\n</p>\r\n<pre>$ rabbitmqctl list_users</pre>\r\n<p>\r\n	输出如下结果：\r\n</p>\r\n<pre>Listing users ...\r\nadmin   [administrator]\r\nguest   [administrator]</pre>\r\n<p>\r\n	我们可以看到，刚添加一个用户的时候，[] 里面的内容为空。现在变成了[administrator]。\r\n</p>\r\n<p>\r\n	如果想分配其他角色直接通过此命令操作即可。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	七、服务使用统计\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		在上面，我们使用了-p选项，旨在指定虚拟主机或路径信息，如果不添加该选项，那么rabbitmqctl会将”/”作为默认的路径访问。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<strong>1）查看队列</strong> \r\n</p>\r\n<p>\r\n	查看默认虚拟机上所有的队列列表（list_queues）：\r\n</p>\r\n<pre>$ rabbitmqctl list_queues</pre>\r\n<p>\r\n	因为，当前我刚刚安装并未进行任何的队列操作。于是，会输出如下结果：\r\n</p>\r\n<pre>Timeout: 60.0 seconds ...\r\nListing queues for vhost / ...</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<strong>2）查看队列名字、消息数目、消费者数目及内存使用情况：</strong> \r\n</p>\r\n<pre>$ rabbitmqctl list_queues name messages consumers memory</pre>\r\n<p>\r\n	跟上面一样，当前没有任何队列数据。所以，会输出如下结果：\r\n</p>\r\n<pre>Timeout: 60.0 seconds ...\r\nListing queues for vhost / ...</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	<strong>八、PHP 与 RabbitMQ 基础操作</strong> \r\n</h3>\r\n<p>\r\n	<strong>1）安装PHP php-amqplib包</strong> \r\n</p>\r\n<p>\r\n	在项目根目录创建composer.json文件。内容如下：\r\n</p>\r\n<pre>{\r\n    \"require\": {\r\n        \"php-amqplib/php-amqplib\": \"&gt;=2.6.1\"\r\n    }\r\n}</pre>\r\n<p>\r\n	然后进入到该项目下执行如下命令：\r\n</p>\r\n<pre>$ composer install</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<strong>2）发送消息到 RabbitMQ 队列当中</strong> \r\n</p>\r\n<p>\r\n	send.php\r\n</p>\r\n<pre>&lt;?php\r\nrequire_once __DIR__ . \'/vendor/autoload.php\';\r\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\r\nuse PhpAmqpLib\\Message\\AMQPMessage;\r\n\r\n// [1] 创建 RabbitMQ 连接\r\n$connection = new AMQPStreamConnection(\'localhost\', 5672, \'guest\', \'guest\');\r\n// [2] 打开一个通道。\r\n$channel    = $connection-&gt;channel();\r\n// [3] 定义一个队列。\r\n$channel-&gt;queue_declare(\'hello\', false, false, false, false);\r\n// [4] 创建一条字符串消息对象。\r\n$msg = new AMQPMessage(\'Hello World!\');\r\n// [5] 向队列当中推送一条消息。\r\n$channel-&gt;basic_publish($msg, \'\', \'hello\');\r\n\r\necho \" [x] Sent \'Hello World!\'\\n\";\r\n// [6] 关闭通道。\r\n$channel-&gt;close();\r\n// [7] 关闭连接。\r\n$connection-&gt;close();</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<strong>3）接收队列消息并消费</strong> \r\n</p>\r\n<p>\r\n	receive.php\r\n</p>\r\n<pre>require_once __DIR__ . \'/vendor/autoload.php\';\r\nuse PhpAmqpLib\\Connection\\AMQPStreamConnection;\r\n\r\n// [1] 创建 RabbitMQ 连接。\r\n$connection = new AMQPStreamConnection(\'localhost\', 5672, \'guest\', \'guest\');\r\n// [2] 打开一个通道。\r\n$channel = $connection-&gt;channel();\r\n// [3] 定义一个队列。\r\n$channel-&gt;queue_declare(\'hello\', false, false, false, false);\r\n\r\necho \' [*] Waiting for messages. To exit press CTRL+C\', \"\\n\";\r\n\r\n// [4] 定义一个匿名方法处理接收到的消息。\r\n$callback = function($msg) {\r\n    echo \" [x] Received \", $msg-&gt;body, \"\\n\";\r\n};\r\n// [5] 设置接收到的消息由谁来消息。\r\n$channel-&gt;basic_consume(\'hello\', \'\', false, true, false, false, $callback);\r\n// [6] 循环等待接收队列的消息。\r\nwhile(count($channel-&gt;callbacks)) {\r\n    $channel-&gt;wait();\r\n}</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<strong>4）启动脚本</strong> \r\n</p>\r\n<p>\r\n	分别运行这两个脚本。\r\n</p>\r\n<pre>php receive.php</pre>\r\n<p>\r\n	接收消息的脚本会一直等待有消息为止才会输出内容。\r\n</p>\r\n<pre>php send.php</pre>\r\n<p>\r\n	通过多次执行send.php脚本，可以向 RabiitMQ 队列当中发送消息。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	九、设置外网远程访问 RabbitMQ&nbsp;\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		RabbitMQ 安装的时候自带的 guest 账号，外网是不能连接的。所以，我们必须先创建一个账号并赋予它权限。再设置防火墙允许 RabbitMQ 服务的 5672 端口号访问即可。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	<strong>1）添加账号</strong> \r\n</p>\r\n<p>\r\n	添加一个 admin 用户，密码为 admin：\r\n</p>\r\n<pre class=\"prettyprint\">$ rabbitmqctl add_user admin admin</pre>\r\n<strong>2）设置权限</strong> \r\n<pre class=\"prettyprint\">$ rabbitmqctl set_permissions -p  / admin  \".*\"  \".*\" \".*\"</pre>\r\n<strong>3）分配角色</strong> \r\n<pre>$ rabbitmqctl set_user_tags admin administrator</pre>\r\n<p>\r\n	<strong>4）设置开放防火墙端口</strong>\r\n</p>\r\n<pre class=\"prettyprint\">$ /sbin/iptables -I INPUT -p tcp --dport 5672 -j ACCEPT</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<h3>\r\n	<strong>十、RabbitMQ 与 Redis 对比</strong> \r\n</h3>\r\n<p>\r\n	通过不同的资料进行综合对比得知。Redis 在单个数据不超过 10k 的情况下，性能普遍高于 RabbitMQ。当数据超过 10k 的时候，数据入队时性能会下降很多。而 RabbitMQ 数据大小对入队出队都非常稳定。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	RabbitMQ 虽然总体性能可能较低。但是，当数据大且并发量上来之后，我们可以很好的通过扩展服务器解决问题。也就是说，RabbitMQ 更适合企业级的应用。小型应用 Redis 会更适合。毕竟，企业级的应用对稳定性要求是最高的。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	Reids 支持的数据类型比 RabbitMQ 要多。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		Redis：轻量级、高并发、延迟敏感、限时数据分析、秒杀计数器、缓存等。\r\n	</p>\r\n	<p>\r\n		RabbitMQ：重量级、高并发、异步、指数据异步处理、并行任务串行化、高负载任务的负载均衡等。\r\n	</p>\r\n</blockquote>', '0000-00-00 00:00:00', '0000-00-00 00:00:00');
INSERT INTO `ms_news_data` VALUES ('28', '<h3>\r\n	一、键值设计\r\n</h3>\r\n<h4>\r\n	1 key名设计\r\n</h4>\r\n<ul>\r\n	<li>\r\n		(1)【建议】: 可读性和可管理性\r\n	</li>\r\n</ul>\r\n<p>\r\n	以业务名(或数据库名)为前缀(防止 key 冲突)，用冒号分隔，比如业务名:表名:id\r\n</p>\r\n<pre>ugc:video:1</pre>\r\n<ul>\r\n	<li>\r\n		(2)【建议】：简洁性\r\n	</li>\r\n</ul>\r\n<p>\r\n	保证语义的前提下，控制 key 的长度，当 key 较多时，内存占用也不容忽视，例如：\r\n</p>\r\n<pre>user:{uid}:friends:messages:{mid}简化为u:{uid}:fr:m:{mid}。</pre>\r\n<ul>\r\n	<li>\r\n		(3)【强制】：不要包含特殊字符\r\n	</li>\r\n</ul>\r\n<p>\r\n	反例：包含空格、换行、单双引号以及其他转义字符\r\n</p>\r\n<h4>\r\n	2. value设计\r\n</h4>\r\n<ul>\r\n	<li>\r\n		(1)【强制】：拒绝 bigkey (防止网卡流量、慢查询)\r\n	</li>\r\n</ul>\r\n<p>\r\n	string 类型控制在10KB以内，hash、list、set、zset 元素个数不要超过5000。\r\n</p>\r\n<p>\r\n	反例：一个包含 200 万个元素的list。\r\n</p>\r\n<p>\r\n	非字符串的 bigkey，不要使用 del 删除，使用 hscan、sscan、zscan 方式渐进式删除，同时要注意防止 bigkey 过期时间自动删除问题(例如一个 200 万的 zset 设置1小时过期，会触发 del 操作，造成阻塞，而且该操作不会不出现在慢查询中( latency 可查))，查找方法和删除方法\r\n</p>\r\n<ul>\r\n	<li>\r\n		(2)【推荐】：选择适合的数据类型。\r\n	</li>\r\n</ul>\r\n<p>\r\n	例如：实体类型(要合理控制和使用数据结构内存编码优化配置,例如 ziplist，但也要注意节省内存和性能之间的平衡)\r\n</p>\r\n<p>\r\n	反例：\r\n</p>\r\n<pre>set user:1:name tom\r\nset user:1:age 19\r\nset user:1:favor football</pre>\r\n<p>\r\n	正例:\r\n</p>\r\n<pre>hmset user:1 name tom age 19 favor football</pre>\r\n<h4>\r\n	3.【推荐】：控制 key 的生命周期，redis 不是垃圾桶。\r\n</h4>\r\n<p>\r\n	建议使用 expire 设置过期时间(条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注 idletime。\r\n</p>\r\n<h3>\r\n	二、命令使用\r\n</h3>\r\n<h4>\r\n	1【推荐】 O(N)命令关注N的数量\r\n</h4>\r\n<p>\r\n	例如 hgetall、lrange、smembers、zrange、sinter 等并非不能使用，但是需要明确N的值。有遍历的需求可以使用 hscan、sscan、zscan 代替。\r\n</p>\r\n<h4>\r\n	2【推荐】：禁用命令\r\n</h4>\r\n<p>\r\n	禁止线上使用 keys、flushall、flushdb 等，通过 redis 的 rename 机制禁掉命令，或者使用 scan 的方式渐进式处理。\r\n</p>\r\n<h4>\r\n	3【推荐】合理使用select\r\n</h4>\r\n<p>\r\n	redis 的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。\r\n</p>\r\n<h4>\r\n	4【推荐】使用批量操作提高效率\r\n</h4>\r\n<pre>原生命令：例如 mget、mset。\r\n非原生命令：可以使用pipeline提高效率。</pre>\r\n<p>\r\n	但要注意控制一次批量操作的<strong>元素个数</strong>(例如500以内，实际也和元素字节数有关)。\r\n</p>\r\n<p>\r\n	注意两者不同：\r\n</p>\r\n<pre>1. 原生是原子操作，pipeline是非原子操作。\r\n2. pipeline可以打包不同的命令，原生做不到\r\n3. pipeline需要客户端和服务端同时支持。</pre>\r\n<h4>\r\n	5【建议】Redis 事务功能较弱，不建议过多使用\r\n</h4>\r\n<p>\r\n	Redis 的事务功能较弱(不支持回滚)，而且集群版本(自研和官方)要求一次事务操作的 key 必须在一个 slot 上(可以使用 hashtag 功能解决)\r\n</p>\r\n<h4>\r\n	6【建议】Redis 集群版本在使用 Lua 上有特殊要求：\r\n</h4>\r\n<ul>\r\n	<li>\r\n		1) 所有 key 都应该由 KEYS 数组来传递，redis.call/pcall 里面调用的 redis 命令，key的位置，必须是 KEYS array, 否则直接返回error，\"-ERR bad lua script for redis cluster, all the keys that the script uses should be passed using the KEYS array\"\r\n	</li>\r\n	<li>\r\n		2) 所有 key，必须在1个slot上，否则直接返回error, \"-ERR eval/evalsha command keys must in same slot\"\r\n	</li>\r\n</ul>\r\n<h4>\r\n	7【建议】必要情况下使用monitor命令时，要注意不要长时间使用。\r\n</h4>\r\n<h3>\r\n	三、客户端使用\r\n</h3>\r\n<h4>\r\n	1【推荐】\r\n</h4>\r\n<p>\r\n	避免多个应用使用一个Redis实例\r\n</p>\r\n<p>\r\n	正例：不相干的业务拆分，公共数据做服务化。\r\n</p>\r\n<h4>\r\n	2【推荐】\r\n</h4>\r\n<p>\r\n	使用带有连接池的数据库，可以有效控制连接，同时提高效率，标准使用方式：\r\n</p>\r\n<pre>执行命令如下：\r\nJedis jedis = null;\r\ntry {\r\n    jedis = jedisPool.getResource();\r\n    //具体的命令\r\n    jedis.executeCommand()\r\n} catch (Exception e) {\r\n    logger.error(\"op key {} error: \" + e.getMessage(), key, e);\r\n} finally {\r\n    //注意这里不是关闭连接，在JedisPool模式下，Jedis会被归还给资源池。\r\n    if (jedis != null) \r\n        jedis.close();\r\n}</pre>\r\n<p>\r\n	下面是 JedisPool 优化方法的文章:\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h4>\r\n	3【建议】\r\n</h4>\r\n<p>\r\n	高并发下建议客户端添加熔断功能(例如netflix hystrix)\r\n</p>\r\n<h4>\r\n	4【推荐】\r\n</h4>\r\n<p>\r\n	设置合理的密码，如有必要可以使用SSL加密访问（阿里云Redis支持）\r\n</p>\r\n<h4>\r\n	5【建议】\r\n</h4>\r\n<p>\r\n	根据自身业务类型，选好maxmemory-policy(最大内存淘汰策略)，设置好过期时间。\r\n</p>\r\n<p>\r\n	默认策略是volatile-lru，即超过最大内存后，在过期键中使用lru算法进行key的剔除，保证不过期数据不被删除，但是可能会出现OOM问题。\r\n</p>\r\n<p>\r\n	<strong>其他策略如下：</strong>\r\n</p>\r\n<ul>\r\n	<li>\r\n		allkeys-lru：根据LRU算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。\r\n	</li>\r\n	<li>\r\n		allkeys-random：随机删除所有键，直到腾出足够空间为止。\r\n	</li>\r\n	<li>\r\n		volatile-random:随机删除过期键，直到腾出足够空间为止。\r\n	</li>\r\n	<li>\r\n		volatile-ttl：根据键值对象的ttl属性，删除最近将要过期数据。如果没有，回退到noeviction策略。\r\n	</li>\r\n	<li>\r\n		noeviction：不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息\"(error) OOM command not allowed when used memory\"，此时Redis只响应读操作。\r\n	</li>\r\n</ul>', '2018-07-30 14:51:34', '2018-07-30 14:51:34');
INSERT INTO `ms_news_data` VALUES ('30', '<p>\r\n	SHOW PROCESSLIST 显示哪些线程正在运行。\r\n</p>\r\n<p>\r\n	不在 mysql 提示符下使用时用mysql -uroot  -e \'Show  processlist\'或者mysqladmin processlist。\r\n</p>\r\n<p>\r\n	如果您有 root 权限，您可以看到所有线程。否则，您只能看到登录的用户自己的线程，通常只会显示 100 条如果想看跟多的可以使用 full 修饰（show full processlist）。\r\n</p>\r\n<p>\r\n	<img src=\"D:\\我的图片\\ox01.png\" alt=\"\" /> \r\n</p>\r\n<p>\r\n	&nbsp;<img src=\"http://files.phpjieshuo.com/images/news/20180731/5b60068cd2029.png\" alt=\"\" />\r\n</p>\r\n<h3>\r\n	1 参数说明\r\n</h3>\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>\r\n				参数\r\n			</th>\r\n			<th>\r\n				说明\r\n			</th>\r\n		</tr>\r\n	</tbody>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n				Id\r\n			</td>\r\n			<td>\r\n				ID 标识，要 kill 一个语句的时候很有用\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				User\r\n			</td>\r\n			<td>\r\n				当前连接用户\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Host\r\n			</td>\r\n			<td>\r\n				显示这个连接从哪个 ip 的哪个端口上发出\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				db\r\n			</td>\r\n			<td>\r\n				数据库名\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				command\r\n			</td>\r\n			<td>\r\n				连接状态，一般是休眠（sleep），查询（query），连接（connect）\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				time\r\n			</td>\r\n			<td>\r\n				连接持续时间，单位是秒\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				state\r\n			</td>\r\n			<td>\r\n				显示当前 sql 语句的状态\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				info\r\n			</td>\r\n			<td>\r\n				显示这个sql语句\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	2 state 参数说明\r\n</h3>\r\n<p>\r\n	其中 state 的状态十分关键，下表列出 state 主要状态和描述：\r\n</p>\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>\r\n				状态\r\n			</th>\r\n			<th>\r\n				描述\r\n			</th>\r\n		</tr>\r\n	</tbody>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n				Checking table\r\n			</td>\r\n			<td>\r\n				正在检查数据表（这是自动的）。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Closing tables\r\n			</td>\r\n			<td>\r\n				正在将表中修改的数据刷新到磁盘中，同时正在关闭已经用完的表。这是一个很快的操作，如果不是这样的话，就应该确认磁盘空间是否已经满了或者磁盘是否正处于重负中。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Connect Out\r\n			</td>\r\n			<td>\r\n				复制从服务器正在连接主服务器。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Copying to tmp table on disk\r\n			</td>\r\n			<td>\r\n				由于临时结果集大于tmp_table_size，正在将临时表从内存存储转为磁盘存储以此节省内存。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Creating tmp table\r\n			</td>\r\n			<td>\r\n				正在创建临时表以存放部分查询结果。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				deleting from main table\r\n			</td>\r\n			<td>\r\n				服务器正在执行多表删除中的第一部分，刚删除第一个表。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				deleting from reference tables\r\n			</td>\r\n			<td>\r\n				服务器正在执行多表删除中的第二部分，正在删除其他表的记录。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Flushing tables\r\n			</td>\r\n			<td>\r\n				正在执行FLUSH TABLES，等待其他线程关闭数据表。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Killed\r\n			</td>\r\n			<td>\r\n				发送了一个kill请求给某线程，那么这个线程将会检查kill标志位，同时会放弃下一个kill请求。MySQL会在每次的主循环中检查kill标志位，不过有些情况下该线程可能会过一小段才能死掉。如果该线程程被其他线程锁住了，那么kill请求会在锁释放时马上生效。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Locked\r\n			</td>\r\n			<td>\r\n				被其他查询锁住了。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Sending data\r\n			</td>\r\n			<td>\r\n				正在处理SELECT查询的记录，同时正在把结果发送给客户端。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Sorting for group\r\n			</td>\r\n			<td>\r\n				正在为GROUP BY做排序。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Sorting for order\r\n			</td>\r\n			<td>\r\n				正在为ORDER BY做排序。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Opening tables\r\n			</td>\r\n			<td>\r\n				这个过程应该会很快，除非受到其他因素的干扰。例如，在执ALTER TABLE或LOCK TABLE语句行完以前，数据表无法被其他线程打开。正尝试打开一个表。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Removing duplicates\r\n			</td>\r\n			<td>\r\n				正在执行一个SELECT DISTINCT方式的查询，但是MySQL无法在前一个阶段优化掉那些重复的记录。因此，MySQL需要再次去掉重复的记录，然后再把结果发送给客户端。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Reopen table\r\n			</td>\r\n			<td>\r\n				获得了对一个表的锁，但是必须在表结构修改之后才能获得这个锁。已经释放锁，关闭数据表，正尝试重新打开数据表。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Repair by sorting\r\n			</td>\r\n			<td>\r\n				修复指令正在排序以创建索引。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Repair with keycache\r\n			</td>\r\n			<td>\r\n				修复指令正在利用索引缓存一个一个地创建新索引。它会比Repair by sorting慢些。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Searching rows for update\r\n			</td>\r\n			<td>\r\n				正在讲符合条件的记录找出来以备更新。它必须在UPDATE要修改相关的记录之前就完成了。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Sleeping\r\n			</td>\r\n			<td>\r\n				正在等待客户端发送新请求.\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				System lock\r\n			</td>\r\n			<td>\r\n				正在等待取得一个外部的系统锁。如果当前没有运行多个mysqld服务器同时请求同一个表，那么可以通过增加--skip-external-locking参数来禁止外部系统锁。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Upgrading lock\r\n			</td>\r\n			<td>\r\n				INSERT DELAYED正在尝试取得一个锁表以插入新记录。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Updating\r\n			</td>\r\n			<td>\r\n				正在搜索匹配的记录，并且修改它们。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				User Lock\r\n			</td>\r\n			<td>\r\n				正在等待GET_LOCK()。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				Waiting for tables\r\n			</td>\r\n			<td>\r\n				该线程得到通知，数据表结构已经被修改了，需要重新打开数据表以取得新的结构。然后，为了能的重新打开数据表，必须等到所有其他线程关闭这个表。以下几种情况下会产生这个通知：FLUSH TABLES tbl_name, ALTER TABLE, RENAME TABLE, REPAIR TABLE, ANALYZE TABLE,或OPTIMIZE TABLE。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				waiting for handler insert\r\n			</td>\r\n			<td>\r\n				INSERT DELAYED已经处理完了所有待处理的插入操作，正在等待新的请求。\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n<p>\r\n	更新 state 状态参见：<a href=\"https://dev.mysql.com/doc/refman/8.0/en/general-thread-states.html\" target=\"_blank\" class=\"url\">https://dev.mysql.com/doc/refman/8.0/en/general-thread-states.html</a> \r\n</p>', '2018-07-31 14:49:50', '2018-07-31 14:49:50');
INSERT INTO `ms_news_data` VALUES ('31', '<p>\r\n	简介：\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		Fail2ban 能够监控系统日志，匹配日志中的错误信息（使用正则表达式），执行相应的屏蔽动作（支持多种，一般为调用 iptables ），是一款很实用、强大的软件。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	如：攻击者不断尝试穷举 SSH 、SMTP 、FTP 密码等，只要达到预设值，fail2ban 就会调用防火墙屏蔽此 IP ，并且可以发送邮件通知系统管理员。\r\n</p>\r\n<p>\r\n	官网地址：<a href=\"http://www.fail2ban.org\" target=\"_blank\" class=\"url\">http://www.fail2ban.org</a>\r\n</p>\r\n<p>\r\n	<strong>功能、特性：</strong>\r\n</p>\r\n<p>\r\n	1）支持大量服务：sshd 、apache 、qmail 等\r\n2）支持多作动作：iptables 、tcp-wrapper 、shorewall 、mail notifications 等\r\n3）logpath 选项中支持通配符\r\n4）需要 Gamin 支持（Gamin 用于监控文件和目录是否更改）\r\n5）如果需要邮件通知，则系统事先要确保能够正常发送邮件\r\n</p>\r\n<h3>\r\n	1 fail2ban 安装\r\n</h3>\r\n<pre>shell &gt; yum -y install epel-release\r\nshell &gt; yum -y install fail2ban</pre>\r\n<h3>\r\n	2 fail2ban 结构\r\n</h3>\r\n<p>\r\n	/etc/fail2ban                  ## fail2ban 服务配置目录\r\n/etc/fail2ban/action.d     ## iptables 、mail 等动作文件目录\r\n/etc/fail2ban/filter.d       ## 条件匹配文件目录，过滤日志关键内容\r\n/etc/fail2ban/jail.conf     ## fail2ban 防护配置文件\r\n/etc/fail2ban/fail2ban.conf   ## fail2ban 配置文件，定义日志级别、日志、sock 文件位置等\r\n</p>\r\n<h3>\r\n	3 fail2ban.conf 配置\r\n</h3>\r\n<pre>shell &gt; grep -v ^# /etc/fail2ban/fail2ban.conf\r\n[Definition]\r\nloglevel  = 3 ## 定义日志级别，默认\r\nlogtarget = /var/log/fail2ban.log ## 定义 fail2ban 日志文件\r\nsocket    = /var/run/fail2ban/fail2ban.sock ## sock 文件存放位置，默认\r\npidfile   = /var/run/fail2ban/fail2ban.pid ## pid 文件存放位置，默认</pre>\r\n<h3>\r\n	4 jail.conf 防护配置\r\n</h3>\r\n<pre>shell &gt; grep -v ^# /etc/fail2ban/jail.conf\r\n\r\n[DEFAULT] ## 全局设置，优先级最小\r\nignoreip = 127.0.0.1/8 ## 不受限制的 IP ，多组用空格分割\r\nbantime = 600 ## 非法 IP 被屏蔽时间（秒），-1 代表永远封锁\r\nfindtime = 600 ## 设置多长时间（秒）内超过 maxretry 限制次数即被封锁\r\nmaxretry = 3 ## 最大尝试次数\r\nbackend = auto ## 日志修改检测机制（gamin 、polling 、auto 三种）\r\nusedns = warn\r\n[ssh-iptables] ## 分类设置（基于 SSHD 服务的防护）\r\nenabled = true ## 是否开启防护，false 为关闭\r\nfilter = sshd ## 过滤规则 filter 名称，对应 filter.d 目录下的 sshd.conf\r\naction = iptables[name=SSH, port=ssh, protocol=tcp] ## 动作参数\r\nsendmail-whois[name=SSH, dest=you@example.com, sender=fail2ban@example.com, sendername=\"Fail2Ban\"]\r\nlogpath = /var/log/secure ## 检测系统登陆日志文件\r\nmaxretry = 5 ## 最大尝试次数</pre>\r\n<p>\r\n	## 默认此配置文件中还有大量的服务防护配置，只不过默认都是关闭（false）状态，不用理会。\r\n</p>\r\n<h3>\r\n	5 fail2ban 启动、测试 SSHD 防护\r\n</h3>\r\n<pre>shell &gt; service fail2ban start ## 如果重启 iptables ，必须重启 fail2ban\r\n\r\nshell &gt; fail2ban-client status ## 可以看到有一个实例已经开始监控\r\nStatus\r\n|- Number of jail: 1\r\n`- Jail list: ssh-iptables\r\n\r\nshell &gt; iptables -nL ## iptables 也加入了一条规则\r\n\r\nfail2ban-SSH tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:22</pre>\r\n<p>\r\n	## 同时，管理员邮箱也收到一封邮件..\r\n</p>\r\n<pre>[Fail2Ban] SSH: started on localhost.localdomain\r\n\r\n发件人：Fail2Ban\r\n收件人：1355*******\r\n时&emsp;间：2015-06-05 23:58:5\r\n\r\nHi,\r\n\r\nThe jail SSH has been started successfully.\r\n\r\nRegards,\r\n\r\nFail2Ban</pre>\r\n<p>\r\n	## 这时客户端尝试登陆本机，故意输入五次密码，就会看到如下日志：\r\n</p>\r\n<pre>shell &gt; tail -1 /var/log/fail2ban.log\r\n\r\n2015-06-05 17:39:19,647 fail2ban.actions[1313]: WARNING [ssh-iptables] Ban 192.168.214.1</pre>\r\n<p>\r\n	## 可以看到：192.168.214.1 被 Ban 掉了。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<pre>shell &gt; cat /var/log/secure ## 系统登陆日志\r\n\r\nJun 5 17:39:01 localhost sshd[1341]: Failed password for root from 192.168.214.1 port 2444 ssh2\r\nJun 5 17:39:06 localhost sshd[1341]: Failed password for root from 192.168.214.1 port 2444 ssh2\r\nJun 5 17:39:11 localhost sshd[1341]: Failed password for root from 192.168.214.1 port 2444 ssh2\r\nJun 5 17:39:14 localhost sshd[1341]: Failed password for root from 192.168.214.1 port 2444 ssh2\r\nJun 5 17:39:18 localhost sshd[1341]: Failed password for root from 192.168.214.1 port 2444 ssh2\r\nJun 5 17:41:39 localhost login: pam_unix(login:session): session opened for user root by LOGIN(uid=0)</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	## 收到的邮件通知\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<pre>[Fail2Ban] SSH: banned 192.168.214.1 from localhost.localdomain\r\n\r\n发件人：Fail2Ban\r\n收件人：1355*******\r\n时&emsp;间：2015-06-06 00:05:45\r\n\r\nHi,\r\n\r\nThe IP 192.168.214.1 has just been banned by Fail2Ban after\r\n5 attempts against SSH.\r\n\r\nHere is more information about 192.168.214.1:\r\n\r\nmissing whois program\r\n\r\nRegards,\r\n\r\nFail2Ban</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	## 测试成功 ！\r\n</p>\r\n<p>\r\n	6、加入 Nginx 防护（ httpd 代替 ）\r\n</p>\r\n<p>\r\n	## 目的是把规定时间内达到限定访问次数的 IP 封锁（例如，一分钟内有几百次请求）\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<pre>shell &gt; vim /etc/fail2ban/jail.conf\r\n\r\n[nginx] ## nginx 防护\r\n\r\nenabled = true\r\nfilter = nginx  ## 访问规则定义文件，位置在 /etc/fail2ban/filter.d/nginx.conf\r\naction = iptables[name=nginx, port=http, protocol=tcp]\r\nsendmail-whois[name=nginx, dest=1355*******@139.com, sender=fail2ban@aoath.com, sendername=\"Fail2Ban\"]\r\n\r\nlogpath = /var/log/httpd/access_log ## nginx 访问日志\r\n\r\nbantime = 86400 ## 符合规则的屏蔽一天，如果参数值与全局有冲突，优先级大于全局配置\r\nfindtime = 600  ## 10 分钟内访问超过 maxretry 次数的封锁 IP \r\nmaxretry = 1000 ## 最大尝试次数\r\n\r\nshell &gt; vim /etc/fail2ban/filter.d/nginx.conf\r\n\r\n[Definition]\r\nfailregex =&lt;HOST&gt;.*-.*-.*$ ## &lt;HOST&gt; 表示访问 IP ，其余的其实是最简单匹配了。因为这里没有要匹配精确的 URL ，只是限制访问次数\r\nignoreregex =\r\n\r\nshell &gt; fail2ban-regex /var/log/httpd/access_log /etc/fail2ban/filter.d/nginx.conf ## 可以测试条件规则是否可用\r\n\r\nshell &gt; service fail2ban restart ## 重启服务\r\n\r\nshell &gt; fail2ban-client status ## 可以看到有两个实例在监控中\r\nStatus\r\n|- Number of jail: 2\r\n`- Jail list: nginx, ssh-iptables</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	## 开始测试，通过脚本或者不管刷新页面测试 Nginx 防护（ 便于测试，可以将 maxretry 的值调为 10 ）\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<pre>shell &gt; fail2ban-client status nginx ## 可以看到被 Ban 掉的 IP\r\nStatus for the jail: nginx\r\n|- filter\r\n| |- File list: /var/log/httpd/access_log\r\n| |- Currently failed: 1\r\n| `- Total failed: 39\r\n`- action\r\n|- Currently banned: 1\r\n| `- IP list: 192.168.214.1\r\n`- Total banned: 1</pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	## 同时也有对应的邮件通知\r\n</p>\r\n<pre>[Fail2Ban] nginx: banned 192.168.214.1 from localhost.localdomain\r\n\r\n发件人：Fail2Ban\r\n收件人：1355*******\r\n时&emsp;间：2015-06-06 01:04:11\r\n\r\nHi,\r\n\r\nThe IP 192.168.214.1 has just been banned by Fail2Ban after\r\n20 attempts against nginx.\r\n\r\n\r\nHere is more information about 192.168.214.1:\r\n\r\nmissing whois program\r\n\r\nRegards,\r\n\r\nFail2Ban\r\n\r\nshell &gt; tail -1 /var/log/fail2ban.log ## fail2ban 的日志信息\r\n\r\n2015-06-05 19:04:11,705 fail2ban.actions[2592]: WARNING [nginx] Ban 192.168.214.1</pre>\r\n<p>\r\n	## OK ，这就是 fail2ban 。很强大 ！！！\r\n</p>', '2018-08-01 09:19:47', '2018-08-01 09:19:47');
INSERT INTO `ms_news_data` VALUES ('32', '<h3>\r\n	1 简介\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		lsof(list open files) 是一个列出当前系统打开文件的工具。\r\n	</p>\r\n	<p>\r\n		在 linux 环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过 lsof 工具能够查看这个列表对系统监测以及排错将是很有帮助的。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	2 命令使用\r\n</h3>\r\n<pre>lsof [选项] [绝对路径的文件名]</pre>\r\n<p>\r\n	<strong>选项：</strong>\r\n</p>\r\n<pre>-a：列出打开文件存在的进程；\r\n-c&lt;进程名&gt;：列出指定进程所打开的文件；\r\n-g：列出GID号进程详情；\r\n-d&lt;文件号&gt;：列出占用该文件号的进程；\r\n+d&lt;目录&gt;：列出目录下被打开的文件；\r\n+D&lt;目录&gt;：递归列出目录下被打开的文件；\r\n-n&lt;目录&gt;：列出使用NFS的文件；\r\n-i&lt;条件&gt;：列出符合条件的进程。（4、6、协议、:端口、 @ip ）\r\n-p&lt;进程号&gt;：列出指定进程号所打开的文件；\r\n-u：列出UID号进程详情；\r\n-h：显示帮助信息；\r\n-v：显示版本信息。</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	显示示例：\r\n</p>\r\n<pre>[root@localhost public]# lsof /usr/local/php71/sbin/php-fpm \r\nCOMMAND  PID USER  FD   TYPE DEVICE SIZE/OFF    NODE NAME\r\nphp-fpm 1544 root txt    REG  253,0 40770864 1506860 /usr/local/php71/sbin/php-fpm\r\nphp-fpm 1545  www txt    REG  253,0 40770864 1506860 /usr/local/php71/sbin/php-fpm\r\nphp-fpm 1546  www txt    REG  253,0 40770864 1506860 /usr/local/php71/sbin/php-fpm\r\nphp-fpm 1547  www txt    REG  253,0 40770864 1506860 /usr/local/php71/sbin/php-fpm\r\nphp-fpm 1548  www txt    REG  253,0 40770864 1506860 /usr/local/php71/sbin/php-fpm\r\nphp-fpm 1549  www txt    REG  253,0 40770864 1506860 /usr/local/php71/sbin/php-fpm\r\nphp-fpm 1550  www txt    REG  253,0 40770864 1506860 /usr/local/php71/sbin/php-fpm\r\n......</pre>\r\n<p>\r\n	每行显示一个打开的文件，默认如果后面不跟任何东西，将打开系统打开的所有文件。\r\n</p>\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>\r\n				参数\r\n			</th>\r\n			<th>\r\n				说明\r\n			</th>\r\n		</tr>\r\n	</tbody>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n				COMMAND\r\n			</td>\r\n			<td>\r\n				进程名称\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				PID\r\n			</td>\r\n			<td>\r\n				进程标识符\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				USER\r\n			</td>\r\n			<td>\r\n				进程所有者\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				FD\r\n			</td>\r\n			<td>\r\n				文件描述符，应用程序通过文件描述符识别到该文件。如 cwd、txt 等。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				TYPE\r\n			</td>\r\n			<td>\r\n				文件类型，如 REG、DIR、CHR、BLK、UNIX、FIFO、IPV4。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				DEVICE\r\n			</td>\r\n			<td>\r\n				指定磁盘名称\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				SIZE\r\n			</td>\r\n			<td>\r\n				文件大小。单位（字节）。\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n<blockquote>\r\n	<p>\r\n		补充：FD 列中的文件描述 cwd 值表示应用程序的当前工作目录，这是该程序启动的目录，除非它本身对这个目录进行更改。txt 类型的是程序代码，如应用程序二进制文件本身或者共享库。其次数值表示应用程序的文件描述符，这是打开文件时一个返回的一个整数。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	3 TYPE 说明\r\n</h3>\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>\r\n				参数\r\n			</th>\r\n			<th>\r\n				说明\r\n			</th>\r\n		</tr>\r\n	</tbody>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n				REG\r\n			</td>\r\n			<td>\r\n				文件。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				DIR\r\n			</td>\r\n			<td>\r\n				目录。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				CHR\r\n			</td>\r\n			<td>\r\n				字符设备。命令行终端。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				BLK\r\n			</td>\r\n			<td>\r\n				块设备。如硬盘、内存。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				UNIX\r\n			</td>\r\n			<td>\r\n				UNIX 域套接字。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				FIFO\r\n			</td>\r\n			<td>\r\n				先进先出 (FIFO) 队列。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				IPV4\r\n			</td>\r\n			<td>\r\n				网际协议 (IP) 套接字。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				NODE\r\n			</td>\r\n			<td>\r\n				索引节点（文件在磁盘上的标识） 。\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	4 FD 说明\r\n</h3>\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>\r\n				参数\r\n			</th>\r\n			<th>\r\n				说明\r\n			</th>\r\n		</tr>\r\n	</tbody>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n				cwd\r\n			</td>\r\n			<td>\r\n				表示current&nbsp;work&nbsp;dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改 。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				txt\r\n			</td>\r\n			<td>\r\n				该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的&nbsp;/sbin/init&nbsp;程序 。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				lnn\r\n			</td>\r\n			<td>\r\n				library&nbsp;references&nbsp;(AIX)。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				er\r\n			</td>\r\n			<td>\r\n				FD&nbsp;information&nbsp;error&nbsp;(see&nbsp;NAME&nbsp;column) 。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				jld\r\n			</td>\r\n			<td>\r\n				jail&nbsp;directory&nbsp;(FreeBSD) 。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				ltx\r\n			</td>\r\n			<td>\r\n				shared&nbsp;library&nbsp;text&nbsp;(code&nbsp;and&nbsp;data) 。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				mxx\r\n			</td>\r\n			<td>\r\n				hex&nbsp;memory-mapped&nbsp;type&nbsp;number&nbsp;xx。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				m86\r\n			</td>\r\n			<td>\r\n				DOS&nbsp;Merge&nbsp;mapped&nbsp;file。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				mem\r\n			</td>\r\n			<td>\r\n				memory-mapped&nbsp;file。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				mmap\r\n			</td>\r\n			<td>\r\n				memory-mapped&nbsp;device。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				pd\r\n			</td>\r\n			<td>\r\n				parent&nbsp;directory。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				rtd\r\n			</td>\r\n			<td>\r\n				root&nbsp;directory。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				tr\r\n			</td>\r\n			<td>\r\n				kernel&nbsp;trace&nbsp;file&nbsp;(OpenBSD) 。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				v86\r\n			</td>\r\n			<td>\r\n				VP/ix&nbsp;mapped&nbsp;file。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				0\r\n			</td>\r\n			<td>\r\n				表示标准输出。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				1\r\n			</td>\r\n			<td>\r\n				表示标准输入。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				2\r\n			</td>\r\n			<td>\r\n				表示标准错误。\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<strong>一般在标准输出、标准错误、标准输入后还跟着文件状态模式</strong> \r\n</p>\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>\r\n				参数\r\n			</th>\r\n			<th>\r\n				说明\r\n			</th>\r\n		</tr>\r\n	</tbody>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n				u\r\n			</td>\r\n			<td>\r\n				表示该文件被打开并处于读取/写入模式。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				r\r\n			</td>\r\n			<td>\r\n				表示该文件被打开并处于只读模式。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				w\r\n			</td>\r\n			<td>\r\n				表示该文件被打开并处于写入模式。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				空格\r\n			</td>\r\n			<td>\r\n				表示该文件的状态模式为 unknow，且没有锁定。\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n				-\r\n			</td>\r\n			<td>\r\n				表示该文件的状态模式为 unknow，且被锁定。\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	5 调试 PHP\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		以下示例来源于网络整理。目的是解决进程卡死的情况。经验证，示例当中步骤以及命令无误。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	5.1) 首先获取该进程 ID\r\n</p>\r\n<pre>ps -aux | grep QueryABC.php\r\n \r\nsync360  11115  0.0  0.0   6564   864 ?        Ss   14:00   0:00 /bin/sh -c /usr/local/bin/php /home/QueryABC.php BILL99DF 10-8&gt;&gt; /home\r\nsync360  11124  0.0  0.4 361628 17296 ?        S    14:00   0:04 /usr/local/bin/php /home/QueryABC.php BILL99DF 10-8\r\nsync360  25230  0.0  0.0  63384   872 pts/0    S+   15:28   0:00 grep QueryABC.php</pre>\r\n<p>\r\n	5.2) strace 查看该进程正在持续的状态\r\n</p>\r\n<pre>sudo strace -T -tt -e trace=all -p 11124\r\n[sudo] password for ancongcong: \r\nProcess 11124 attached - interrupt to quit\r\n15:33:07.259044 read(9,</pre>\r\n<p>\r\n	5.3) lsof 查看进程的所有使用的文件\r\n</p>\r\n<pre>lsof -p 11124\r\n \r\n....\r\nphp     11124 sync360  mem    REG        8,1    23736    3211320 /lib64/libnss_dns-2.5.so\r\nphp     11124 sync360    0r  FIFO        0,6          1522728709 pipe\r\nphp     11124 sync360    1w   REG        8,1  4088819    1869737 /home/logs/QueryABC.log\r\nphp     11124 sync360    2w  FIFO        0,6          1522728710 pipe\r\nphp     11124 sync360    3w   CHR        1,3                 982 /dev/null\r\nphp     11124 sync360    4u  IPv4 1522728838                 TCP 211.151.122.234:46004-&gt;10.117.128.47:rtmp-port (CLOSE_WAIT)\r\nphp     11124 sync360    5wW  REG        8,1        0    2704363 /home/lockfile/QueryABC.php.BILL99DF.10-8\r\nphp     11124 sync360    6u  IPv4 1522728841                 TCP 211.151.122.234:51019-&gt;10.117.128.46:rtmp-port (CLOSE_WAIT)\r\nphp     11124 sync360    7w   REG        8,1 31960384    1869789 /home/logs/XXXX_info.log.20180118\r\nphp     11124 sync360    8w   REG        8,1 18151722    1869806 /home/logs/XXXX_QRY_info.log.20180118\r\nphp     11124 sync360    9u  IPv4 1522729884                 TCP 211.151.122.234:54976-&gt;61.152.114.130:https (ESTABLISHED)</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<pre>sudo netstat -tunpa | grep 11124\r\ntcp        0      0 211.151.122.234:54976       61.152.114.130:443          ESTABLISHED 11124/php           \r\ntcp        1      0 211.151.122.234:51019       10.117.128.46:3500          CLOSE_WAIT  11124/php           \r\ntcp        1      0 211.151.122.234:46004       10.117.128.47:3500          CLOSE_WAIT  11124/php</pre>\r\n<p>\r\n	可以发现最终是停留在 https 的链接建立，等待获取数据，查看此处代码 :\r\n</p>\r\n<pre>ini_set(\'default_socket_timeout\',30);\r\n$scOptions = array(\'connection_timeout\' =&gt; 30);\r\n$clientObj = new SoapClient( $wsdl , $scOptions);</pre>\r\n<p>\r\n	当前版本 php 较老，这里是有个 bug 的在 https 链接请求时 SOAPClient 的超时时间是不生效。导致一直连接不释放，当请求量上来的时候，会导致服务器陷入高负载状态。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	6 查询 PHP 进程状态\r\n</h3>\r\n<p>\r\n	所谓状态，指的是我们在启动 PHP 的时候，PHP-FPM 加载的系统库、PHP 扩展、以及其他日志文件等的状态信息。\r\n</p>\r\n<p>\r\n	6.1) 查询 PHP-FPM 进程的 PID\r\n</p>\r\n<pre>[root@localhost ~]# ps -aux|grep php-fpm\r\nroot      1544  0.0  0.8 291448 16244 ?        Ss   Jul30   0:06 php-fpm: master process\r\nwww       1545  0.0  0.9 291920 17340 ?        S    Jul30   0:00 php-fpm: pool www\r\nwww       1546  0.0  0.9 292136 17856 ?        S    Jul30   0:00 php-fpm: pool www\r\nwww       1547  0.0  0.9 291908 17336 ?        S    Jul30   0:00 php-fpm: pool www\r\nwww       1548  0.0  0.9 291916 17308 ?        S    Jul30   0:00 php-fpm: pool www\r\nwww       1549  0.0  0.9 292272 17880 ?        S    Jul30   0:00 php-fpm: pool www\r\nwww       1550  0.0  0.9 292616 18132 ?        S    Jul30   0:00 php-fpm: pool www\r\n......</pre>\r\n<p>\r\n	可以获知我们的 PHP-FPM 主进程的 PID 为 1544。\r\n</p>\r\n<p>\r\n	6.2) 查询进程状态\r\n</p>\r\n<pre>[root@localhost ~]# lsof -p 1544\r\nCOMMAND  PID USER   FD      TYPE             DEVICE  SIZE/OFF     NODE NAME\r\nphp-fpm 1544 root  cwd       DIR              253,0       271       64 /\r\nphp-fpm 1544 root  rtd       DIR              253,0       271       64 /\r\nphp-fpm 1544 root  txt       REG              253,0  40770864  1506860 /usr/local/php71/sbin/php-fpm\r\nphp-fpm 1544 root  mem       REG              253,0     62184   482957 /usr/lib64/libnss_files-2.17.so\r\nphp-fpm 1544 root  mem       REG              253,0   4194305 16881237 /tmp/phptrace.ctrl\r\nphp-fpm 1544 root  mem       REG              253,0   1850464    41259 /usr/lib64/libdb-5.3.so\r\nphp-fpm 1544 root  mem       REG              253,0     28216 33654797 /usr/lib64/sasl2/libsasldb.so.3.0.0\r\nphp-fpm 1544 root  mem       REG              253,0     19968 33654794 /usr/lib64/sasl2/libanonymous.so.3.0.0\r\nphp-fpm 1544 root  DEL       REG                0,4              18634 /dev/zero\r\nphp-fpm 1544 root  mem       REG              253,0    159600 51987804 /usr/local/php71/lib/php/extensions/no-debug-non-zts-20160303/trace.so\r\nphp-fpm 1544 root  mem       REG              253,0   4414480 50968175 /usr/local/php71/lib/php/extensions/no-debug-non-zts-20160303/mongodb.so\r\nphp-fpm 1544 root  mem       REG              253,0    851128 50666307 /usr/local/lib/libevent_core-2.1.so.6.0.2\r\nphp-fpm 1544 root  mem       REG              253,0    502032 50666311 /usr/local/lib/libevent_extra-2.1.so.6.0.2\r\nphp-fpm 1544 root  mem       REG              253,0    116088 50666319 /usr/local/lib/libevent_openssl-2.1.so.6.0.2\r\nphp-fpm 1544 root  mem       REG              253,0    883440 52435182 /usr/local/php71/lib/php/extensions/no-debug-non-zts-20160303/event.so\r\nphp-fpm 1544 root  mem       REG              253,0    121320    41640 /usr/lib64/libsasl2.so.3.0.0\r\nphp-fpm 1544 root  mem       REG              253,0   5662520 51023034 /usr/local/lib/librdkafka.so.1\r\nphp-fpm 1544 root  mem       REG              253,0    440512 51861780 /usr/local/php71/lib/php/extensions/no-debug-non-zts-20160303/rdkafka.so\r\nphp-fpm 1544 root  mem       REG              253,0   4408400 50919001 /usr/local/php71/lib/php/extensions/no-debug-non-zts-20160303/swoole.so\r\nphp-fpm 1544 root  mem       REG              253,0   1426032 52419266 /usr/local/php71/lib/php/extensions/no-debug-non-zts-20160303/yaf.so\r\nphp-fpm 1544 root  mem       REG              253,0   3618280 51005421 /usr/local/php71/lib/php/extensions/no-debug-non-zts-20160303/fileinfo.so\r\nphp-fpm 1544 root  mem       REG              253,0   1734168 52419246 /usr/local/php71/lib/php/extensions/no-debug-non-zts-20160303/redis.so\r\nphp-fpm 1544 root  mem       REG              253,0   1310320 51861871 /usr/local/php71/lib/php/extensions/no-debug-non-zts-20160303/xdebug.so\r\nphp-fpm 1544 root  mem       REG              253,0   1631520 51851520 /usr/local/php71/lib/php/extensions/no-debug-non-zts-20160303/opcache.so\r\nphp-fpm 1544 root  mem       REG              253,0 106070960 50918862 /usr/lib/locale/locale-archive\r\nphp-fpm 1544 root  mem       REG              253,0    402384    41228 /usr/lib64/libpcre.so.1.2.0\r\nphp-fpm 1544 root  mem       REG              253,0    155784   264930 /usr/lib64/libselinux.so.1\r\nphp-fpm 1544 root  mem       REG              253,0     15688    43432 /usr/lib64/libkeyutils.so.1.5\r\nphp-fpm 1544 root  mem       REG              253,0     58728  1528050 /usr/lib64/libkrb5support.so.0.1\r\nphp-fpm 1544 root  mem       REG              253,0    210840    44058 /usr/lib64/libk5crypto.so.3.1\r\nphp-fpm 1544 root  mem       REG              253,0     15848     1299 /usr/lib64/libcom_err.so.2.1\r\nphp-fpm 1544 root  mem       REG              253,0    963576   177761 /usr/lib64/libkrb5.so.3.3\r\nphp-fpm 1544 root  mem       REG              253,0    320408  1349437 /usr/lib64/libgssapi_krb5.so.2.2\r\nphp-fpm 1544 root  mem       REG              253,0    157424     1300 /usr/lib64/liblzma.so.5.2.2\r\nphp-fpm 1544 root  mem       REG              253,0    144792   524665 /usr/lib64/libpthread-2.17.so\r\nphp-fpm 1544 root  mem       REG              253,0     19384    41444 /usr/lib64/libgpg-error.so.0.10.0\r\nphp-fpm 1544 root  mem       REG              253,0    535064    41239 /usr/lib64/libgcrypt.so.11.8.2\r\nphp-fpm 1544 root  mem       REG              253,0     11464     1231 /usr/lib64/libfreebl3.so\r\nphp-fpm 1544 root  mem       REG              253,0   2173512     1485 /usr/lib64/libc-2.17.so\r\nphp-fpm 1544 root  mem       REG              253,0     88720  1499604 /usr/lib64/libgcc_s-4.8.5-20150702.so.1\r\nphp-fpm 1544 root  mem       REG              253,0   1419360 51389508 /usr/local/lib/libiconv.so.2.6.0\r\nphp-fpm 1544 root  mem       REG              253,0    258344  1577528 /usr/lib64/libxslt.so.1.1.28\r\nphp-fpm 1544 root  mem       REG              253,0     57136  1579626 /usr/lib64/libicuio.so.50.1.2\r\nphp-fpm 1544 root  mem       REG              253,0  20789896  1579622 /usr/lib64/libicudata.so.50.1.2\r\nphp-fpm 1544 root  mem       REG              253,0   1539392  1579636 /usr/lib64/libicuuc.so.50.1.2\r\nphp-fpm 1544 root  mem       REG              253,0   2096056  1579624 /usr/lib64/libicui18n.so.50.1.2\r\nphp-fpm 1544 root  mem       REG              253,0    691736  1349410 /usr/lib64/libfreetype.so.6.10.0\r\nphp-fpm 1544 root  mem       REG              253,0    472672 51303927 /usr/local/lib/libcurl.so.4.4.0\r\nphp-fpm 1544 root  mem       REG              253,0   2512832  1528053 /usr/lib64/libcrypto.so.1.0.2k\r\nphp-fpm 1544 root  mem       REG              253,0    470360  1528055 /usr/lib64/libssl.so.1.0.2k\r\nphp-fpm 1544 root  mem       REG              253,0   1509376    41480 /usr/lib64/libxml2.so.2.9.1\r\nphp-fpm 1544 root  mem       REG              253,0    117680   482950 /usr/lib64/libnsl-2.17.so\r\nphp-fpm 1544 root  mem       REG              253,0   1139680   177756 /usr/lib64/libm-2.17.so\r\nphp-fpm 1544 root  mem       REG              253,0    285296     5399 /usr/lib64/libjpeg.so.62.1.0\r\nphp-fpm 1544 root  mem       REG              253,0    179296     5419 /usr/lib64/libpng15.so.15.13.0\r\nphp-fpm 1544 root  mem       REG              253,0    995840  1337428 /usr/lib64/libstdc++.so.6.0.19\r\nphp-fpm 1544 root  mem       REG              253,0     19776      858 /usr/lib64/libdl-2.17.so\r\nphp-fpm 1544 root  mem       REG              253,0    662504 50758820 /usr/local/lib/libmcrypt.so.4.4.8\r\nphp-fpm 1544 root  mem       REG              253,0     44448     1254 /usr/lib64/librt-2.17.so\r\nphp-fpm 1544 root  mem       REG              253,0    106848   524736 /usr/lib64/libresolv-2.17.so\r\nphp-fpm 1544 root  mem       REG              253,0     87368  1577526 /usr/lib64/libexslt.so.0.8.17\r\nphp-fpm 1544 root  mem       REG              253,0     90664    41257 /usr/lib64/libz.so.1.2.7\r\nphp-fpm 1544 root  mem       REG              253,0     41080      854 /usr/lib64/libcrypt-2.17.so\r\nphp-fpm 1544 root  mem       REG              253,0    164240  1517336 /usr/lib64/ld-2.17.so\r\nphp-fpm 1544 root  DEL       REG                0,4              20579 /dev/zero\r\nphp-fpm 1544 root    0u      CHR                1,3       0t0     1028 /dev/null\r\nphp-fpm 1544 root    1u      CHR                1,3       0t0     1028 /dev/null\r\nphp-fpm 1544 root    2w      REG              253,0   1998396 36911463 /usr/local/php71/var/log/php71-fpm.log\r\nphp-fpm 1544 root    3w      REG              253,0   1998396 36911463 /usr/local/php71/var/log/php71-fpm.log\r\nphp-fpm 1544 root    4u     unix 0xffff886c38c9c000       0t0    20580 socket\r\nphp-fpm 1544 root    5r     FIFO                0,9       0t0    20585 pipe\r\nphp-fpm 1544 root    6u     unix 0xffff886c38c9d400       0t0    20581 socket\r\nphp-fpm 1544 root    7u     unix 0xffff886c38c9c800       0t0    20582 /dev/shm/php71-cgi.sock\r\nphp-fpm 1544 root    8u  a_inode               0,10         0     6123 [eventpoll]</pre>\r\n<p>\r\n	通过以上信息，我们可以明确知道我们的这个进程对应的 PHP-FPM 的绝对路径。以及它加载了系统的哪些类库，和加载了 PHP 的哪些类库。\r\n</p>\r\n<pre>php-fpm 1544 root    0u      CHR                1,3       0t0     1028 /dev/null\r\nphp-fpm 1544 root    1u      CHR                1,3       0t0     1028 /dev/null\r\nphp-fpm 1544 root    2w      REG              253,0   1998396 36911463 /usr/local/php71/var/log/php71-fpm.log</pre>\r\n<p>\r\n	通过此项，我们可以看到，标准输出（0u）丢弃了（/dev/null）。标准转入（1u）也丢弃了（/dev/null）。标准的错误（2w）转出到了/usr/local/php71/var/log/php71-fpm.log文件。\r\n</p>\r\n<h3>\r\n	7 其它用法\r\n</h3>\r\n<p>\r\n	7.1) 列出所有打开的文件：\r\n</p>\r\n<pre>lsof</pre>\r\n<blockquote>\r\n	<p>\r\n		备注: 如果不加任何参数，就会打开所有被打开的文件，建议加上一下参数来具体定位。<strong>通常我们不会这样直接用。</strong>\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.2) 查看谁正在使用某个文件：\r\n</p>\r\n<pre>lsof /usr/local/php53/var/log/php-fpm.log</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.3) 递归查看某个目录的文件信息：\r\n</p>\r\n<pre>lsof +D /usr/local/php53/var/log/</pre>\r\n<blockquote>\r\n	<p>\r\n		备注: 使用了+D，对应目录下的所有子目录和文件都会被列出\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.4) 列出某个用户打开的文件信息\r\n</p>\r\n<pre>lsof -u www</pre>\r\n<blockquote>\r\n	<p>\r\n		备注: -u 选项，u 其实是 user 的缩写。该示例在笔者电脑上是列出 nginx/php-fpm 打开的文件信息。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.5) 列出某个程序所打开的文件信息\r\n</p>\r\n<pre>lsof -c mysql\r\nlsof -c php-fpm</pre>\r\n<blockquote>\r\n	<p>\r\n		备注: -c 选项将会列出所有以 mysql 开头的程序的文件。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.6） 列出多个程序多打开的文件信息\r\n</p>\r\n<pre>lsof -c mysql -c apache</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.7) 列出某个用户以及某个程序所打开的文件信息\r\n</p>\r\n<pre>lsof -u root -c mysql</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.8) 列出除了某个用户外的被打开的文件信息\r\n</p>\r\n<pre>lsof -u ^root</pre>\r\n<blockquote>\r\n	<p>\r\n		备注：^这个符号在用户名之前，将会把是 root 用户打开的进程不让显示。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.9) 通过某个进程号显示该进行打开的文件\r\n</p>\r\n<pre>lsof -p 进程 ID</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.10) 列出多个进程号对应的文件信息\r\n</p>\r\n<pre>lsof -p 进程ID,进程ID,进程ID</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.11) 列出除了某个进程号，其他进程号所打开的文件信息\r\n</p>\r\n<pre>lsof -p ^1</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.12) 列出所有的网络连接\r\n</p>\r\n<pre>lsof -i</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.13) 列出所有 tcp 网络连接信息\r\n</p>\r\n<pre>lsof -i tcp</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.14) 列出所有udp网络连接信息\r\n</p>\r\n<pre>lsof -i udp</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.15) 列出谁在使用某个端口\r\n</p>\r\n<pre>[root@localhost ~]# lsof -i :6379\r\nCOMMAND    PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\r\nredis-ser 1344 redis    4u  IPv4  19521      0t0  TCP localhost:6379 (LISTEN)</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.16) 列出谁在使用某个特定的udp端口\r\n</p>\r\n<pre>lsof -i udp:55</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.17) 列出谁在使用某个特定的tcp端口\r\n</p>\r\n<pre>lsof -i tcp:80</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.18) 列出某个用户的所有活跃的网络端口\r\n</p>\r\n<pre>lsof -a -u root -i</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.19) 列出所有网络文件系统\r\n</p>\r\n<pre>lsof -N</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	7.20) 域名 socket 文件\r\n</p>\r\n<pre>lsof -u</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	8 总结\r\n</h3>\r\n<p>\r\n	lsof 命令可以用来查看我们的进程打开的文件、目录、网络设置、网络连接等。在排查 PHP 性能问题的时候，可以起到一个直接或间接的佐证工具。让我们能快速定位问题并解决问题。\r\n</p>\r\n<p>\r\n	<br />\r\n</p>', '2018-08-01 16:07:11', '2018-08-01 16:07:11');
INSERT INTO `ms_news_data` VALUES ('33', '<blockquote><p><strong>find命令</strong>用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。 </p>\r\n</blockquote>\r\n<h3>1 语法</h3>\r\n<blockquote><p>find (选项) (参数)</p>\r\n</blockquote>\r\n<h3>2 选项</h3>\r\n<pre><code>-amin&lt;分钟&gt;：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；\r\n-anewer&lt;参考文件或目录&gt;：查找其存取时间较指定文件或目录的存取时间更接近现在的文件或目录；\r\n-atime&lt;24小时数&gt;：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；\r\n-cmin&lt;分钟&gt;：查找在指定时间之时被更改过的文件或目录；\r\n-cnewer&lt;参考文件或目录&gt;查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；\r\n-ctime&lt;24小时数&gt;：查找在指定时间之时被更改的文件或目录，单位以24小时计算；\r\n-daystart：从本日开始计算时间；\r\n-depth：从指定目录下最深层的子目录开始查找；\r\n-expty：寻找文件大小为0 Byte的文件，或目录下没有任何子目录或文件的空目录；\r\n-exec&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令；\r\n-false：将find指令的回传值皆设为False；\r\n-fls&lt;列表文件&gt;：此参数的效果和指定“-ls”参数类似，但会把结果保存为指定的列表文件；\r\n-follow：排除符号连接；\r\n-fprint&lt;列表文件&gt;：此参数的效果和指定“-print”参数类似，但会把结果保存成指定的列表文件；\r\n-fprint0&lt;列表文件&gt;：此参数的效果和指定“-print0”参数类似，但会把结果保存成指定的列表文件；\r\n-fprintf&lt;列表文件&gt;&lt;输出格式&gt;：此参数的效果和指定“-printf”参数类似，但会把结果保存成指定的列表文件；\r\n-fstype&lt;文件系统类型&gt;：只寻找该文件系统类型下的文件或目录；\r\n-gid&lt;群组识别码&gt;：查找符合指定之群组识别码的文件或目录；\r\n-group&lt;群组名称&gt;：查找符合指定之群组名称的文件或目录；\r\n-help或——help：在线帮助；\r\n-ilname&lt;范本样式&gt;：此参数的效果和指定“-lname”参数类似，但忽略字符大小写的差别；\r\n-iname&lt;范本样式&gt;：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；\r\n-inum&lt;inode编号&gt;：查找符合指定的inode编号的文件或目录；\r\n-ipath&lt;范本样式&gt;：此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别；\r\n-iregex&lt;范本样式&gt;：此参数的效果和指定“-regexe”参数类似，但忽略字符大小写的差别；\r\n-links&lt;连接数目&gt;：查找符合指定的硬连接数目的文件或目录；\r\n-iname&lt;范本样式&gt;：指定字符串作为寻找符号连接的范本样式；\r\n-ls：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出；\r\n-maxdepth&lt;目录层级&gt;：设置最大目录层级；\r\n-mindepth&lt;目录层级&gt;：设置最小目录层级；\r\n-mmin&lt;分钟&gt;：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；\r\n-mount：此参数的效果和指定“-xdev”相同；\r\n-mtime&lt;24小时数&gt;：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；\r\n-name&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；\r\n-newer&lt;参考文件或目录&gt;：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；\r\n-nogroup：找出不属于本地主机群组识别码的文件或目录；\r\n-noleaf：不去考虑目录至少需拥有两个硬连接存在；\r\n-nouser：找出不属于本地主机用户识别码的文件或目录；\r\n-ok&lt;执行指令&gt;：此参数的效果和指定“-exec”类似，但在执行指令之前会先询问用户，若回答“y”或“Y”，则放弃执行命令；\r\n-path&lt;范本样式&gt;：指定字符串作为寻找目录的范本样式；\r\n-perm&lt;权限数值&gt;：查找符合指定的权限数值的文件或目录；\r\n-print：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“./”字符串；\r\n-print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行；\r\n-printf&lt;输出格式&gt;：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定；\r\n-prune：不寻找字符串作为寻找文件或目录的范本样式;\r\n-regex&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；\r\n-size&lt;文件大小&gt;：查找符合指定的文件大小的文件；\r\n-true：将find指令的回传值皆设为True；\r\n-typ&lt;文件类型&gt;：只寻找符合指定的文件类型的文件；\r\n-uid&lt;用户识别码&gt;：查找符合指定的用户识别码的文件或目录；\r\n-used&lt;日数&gt;：查找文件或目录被更改之后在指定时间曾被存取过的文件或目录，单位以日计算；\r\n-user&lt;拥有者名称&gt;：查找符和指定的拥有者名称的文件或目录；\r\n-version或——version：显示版本信息；\r\n-xdev：将范围局限在先行的文件系统中；\r\n-xtype&lt;文件类型&gt;：此参数的效果和指定“-type”参数类似，差别在于它针对符号连接检查。\r\n</code></pre>\r\n<h3>3 参数</h3>\r\n<p>起始目录：查找文件的起始目录。 </p>\r\n<h3>4 实例</h3>\r\n<p>4.1) 列出当前目录及子目录下所有文件和文件夹 </p>\r\n<pre><code>find .\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.2) 在 <code>/home</code> 目录下查找以 .txt 结尾的文件名 </p>\r\n<pre><code>find /home -name &quot;*.txt&quot;\r\n</code></pre>\r\n<p>同上，但忽略大小写 </p>\r\n<pre><code>find /home -iname &quot;*.txt&quot;\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.3) 当前目录及子目录下查找所有以.txt和.pdf结尾的文件</p>\r\n<pre><code>find . \\( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \\)\r\n\r\n或\r\n\r\nfind . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.4) 匹配文件路径或者文件</p>\r\n<pre><code>find /usr/ -path &quot;*local*&quot;\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.5) 基于正则表达式匹配文件路径</p>\r\n<pre><code>find . -regex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot;\r\n</code></pre>\r\n<p>同上，但忽略大小写 </p>\r\n<pre><code>find . -iregex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot;\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.6) 找出 <code>/home</code>下不是以 .txt 结尾的文件 </p>\r\n<pre><code>find /home ! -name &quot;*.txt&quot;\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.7) 根据文件类型进行搜索</p>\r\n<pre><code>find . -type 类型参数\r\n</code></pre>\r\n<p>类型参数列表：</p>\r\n<ul>\r\n<li><strong>f</strong> 普通文件</li>\r\n<li><strong>l</strong> 符号连接</li>\r\n<li><strong>d</strong> 目录</li>\r\n<li><strong>c</strong> 字符设备</li>\r\n<li><strong>b</strong> 块设备</li>\r\n<li><strong>s</strong> 套接字</li>\r\n<li><strong>p</strong> Fifo</li>\r\n\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>4.8)  向下最大深度限制为3 </p>\r\n<pre><code>find . -maxdepth 3 -type f\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.9) 搜索出深度距离当前目录至少2个子目录的所有文件</p>\r\n<pre><code>find . -mindepth 2 -type f\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.10) 根据文件时间戳进行搜索</p>\r\n<pre><code>find . -type f 时间戳\r\n</code></pre>\r\n<p>UNIX/Linux文件系统每个文件都有三种时间戳：</p>\r\n<ul>\r\n<li><strong>访问时间</strong>（-atime/天，-amin/分钟）：用户最近一次访问时间。</li>\r\n<li><strong>修改时间</strong>（-mtime/天，-mmin/分钟）：文件最后一次修改时间。</li>\r\n<li><strong>变化时间</strong>（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。</li>\r\n\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>4.11) 搜索最近七天内被访问过的所有文件</p>\r\n<pre><code>find . -type f -atime -7\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.12) 搜索恰好在七天前被访问过的所有文件</p>\r\n<pre><code>find . -type f -atime 7\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.13) 搜索超过七天内被访问过的所有文件</p>\r\n<pre><code>find . -type f -atime +7\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.14) 搜索访问时间超过10分钟的所有文件</p>\r\n<pre><code>find . -type f -amin +10\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.15) 找出比 <code>file.log</code> 修改时间更长的所有文件</p>\r\n<pre><code>find . -type f -newer file.log\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.16) 根据文件大小进行匹配</p>\r\n<pre><code>find . -type f -size 文件大小单元\r\n</code></pre>\r\n<p>文件大小单元：</p>\r\n<ul>\r\n<li><strong>b</strong> —— 块（512字节）</li>\r\n<li><strong>c</strong> —— 字节</li>\r\n<li><strong>w</strong> —— 字（2字节）</li>\r\n<li><strong>k</strong> —— 千字节</li>\r\n<li><strong>M</strong> —— 兆字节</li>\r\n<li><strong>G</strong> —— 吉字节</li>\r\n\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>4.17)  搜索大于10KB的文件</p>\r\n<pre><code>find . -type f -size +10k\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.18) 搜索小于10KB的文件</p>\r\n<pre><code>find . -type f -size -10k\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.19) 搜索等于10KB的文件</p>\r\n<pre><code>find . -type f -size 10k\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.20) 删除当前目录下所有.txt文件</p>\r\n<pre><code>find . -type f -name &quot;*.txt&quot; -delete\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.21) 当前目录下搜索出权限为777的文件</p>\r\n<pre><code>find . -type f -perm 777\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.22) 找出当前目录下权限不是644的 php 文件</p>\r\n<pre><code>find . -type f -name &quot;*.php&quot; ! -perm 644\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.23) 找出当前目录用户tom拥有的所有文件</p>\r\n<pre><code>find . -type f -user tom\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.24) 找出当前目录用户组sunk拥有的所有文件</p>\r\n<pre><code>find . -type f -group sunk\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>4.25) 要列出所有长度为零的文件</p>\r\n<pre><code>find . -empty\r\n</code></pre>\r\n<p>&nbsp;</p>', '2018-08-01 16:46:03', '2018-08-01 16:46:03');
INSERT INTO `ms_news_data` VALUES ('34', '<p>网站性能压力测试是服务器网站性能调优过程中必不可缺少的一环。只有让服务器处在高压情况下，才能真正体现出软件、硬件等各种设置不当所暴露出的问题。</p>\r\n<p>性能测试工具目前最常见的有以下几种：ab、http_load、webbench、siege。</p>\r\n<p>今天我们专门来介绍 ab。</p>\r\n<p>ab 是 Apache 自带的压力测试工具。ab 非常实用，它不仅可以对 apache 服务器进行网站访问压力测试，也可以对或其它类型的服务器进行压力测试。比如 Nginx、Tomcat、IIS 等。</p>\r\n<h3>1 ab 的原理</h3>\r\n<p>ab是 Apache Bench 命令的缩写。</p>\r\n<p>ab 的原理：ab 命令会创建多个并发访问线程，模拟多个访问者同时对某一 URL 地址进行访问。它的测试目标是基于 URL 的。因此，它既可以用来测试 Apache 的负载压力，也可以测试 Nginx、Lighthttp、Tomcat、IIS 等其它Web 服务器的压力。</p>\r\n<p>ab 命令对发出负载的计算机要求很低，它既不会占用很高 CPU，也不会占用很多内存。但却会给目标服务器造成巨大的负载，其原理类似 CC 攻击。自己测试使用也需要注意，否则一次上太多的负载。可能造成目标服务器资源耗完，严重时甚至导致死机。</p>\r\n<h3>2 ab的安装</h3>\r\n<p>ab 的安装非常简单，如果是源码安装 Apache 的话，那就更简单了。Apache 安装完毕后 ab 命令存放在 Apache 安装目录的 bin 目录下。</p>\r\n<p>如果 Apache 是通过 yum 的 RPM 包方式安装的话，ab 命令默认存放在 /usr/bin 目录下。如下：</p>\r\n<pre><code>$ which ab\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>注意：如果不想安装 Apache 但是又想使用 ab 命令的话，我们可以直接安装 Apache 的工具包 httpd-tools。如下：</p>\r\n<pre><code>$ yum -y install httpd-tools\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>查看 ab 是否安装成功，可以切换到上述目录下，使用 ab –V 命令进行检测。如下：</p>\r\n<pre><code>[root@localhost bin]# ab -V\r\nThis is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;\r\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\r\nLicensed to The Apache Software Foundation, http://www.apache.org/\r\n</code></pre>\r\n<p>如果 ab 安装成功，通过 ab –V 命令则会显示 ab 的相应版本，如上所示。</p>\r\n<p>&nbsp;</p>\r\n<p>注意以上是在 linux 平台下进行安装的。如果是 windows 平台下，我们也可以下载对应的 Apache 版本进行安装。</p>\r\n<p>&nbsp;</p>\r\n<h3>3 ab参数说明</h3>\r\n<p>有关 ab 命令的使用，我们可以通过帮助命令进行查看。如下：</p>\r\n<pre><code>[root@localhost bin]# ab --help\r\nab: wrong number of arguments\r\nUsage: ab [options] [http[s]://]hostname[:port]/path\r\nOptions are:\r\n    -n requests     Number of requests to perform\r\n    -c concurrency  Number of multiple requests to make at a time\r\n    -t timelimit    Seconds to max. to spend on benchmarking\r\n                    This implies -n 50000\r\n    -s timeout      Seconds to max. wait for each response\r\n                    Default is 30 seconds\r\n    -b windowsize   Size of TCP send/receive buffer, in bytes\r\n    -B address      Address to bind to when making outgoing connections\r\n    -p postfile     File containing data to POST. Remember also to set -T\r\n    -u putfile      File containing data to PUT. Remember also to set -T\r\n    -T content-type Content-type header to use for POST/PUT data, eg.\r\n                    &#39;application/x-www-form-urlencoded&#39;\r\n                    Default is &#39;text/plain&#39;\r\n    -v verbosity    How much troubleshooting info to print\r\n    -w              Print out results in HTML tables\r\n    -i              Use HEAD instead of GET\r\n    -x attributes   String to insert as table attributes\r\n    -y attributes   String to insert as tr attributes\r\n    -z attributes   String to insert as td or th attributes\r\n    -C attribute    Add cookie, eg. &#39;Apache=1234&#39;. (repeatable)\r\n    -H attribute    Add Arbitrary header line, eg. &#39;Accept-Encoding: gzip&#39;\r\n                    Inserted after all normal header lines. (repeatable)\r\n    -A attribute    Add Basic WWW Authentication, the attributes\r\n                    are a colon separated username and password.\r\n    -P attribute    Add Basic Proxy Authentication, the attributes\r\n                    are a colon separated username and password.\r\n    -X proxy:port   Proxyserver and port number to use\r\n    -V              Print version number and exit\r\n    -k              Use HTTP KeepAlive feature\r\n    -d              Do not show percentiles served table.\r\n    -S              Do not show confidence estimators and warnings.\r\n    -q              Do not show progress when doing more than 150 requests\r\n    -g filename     Output collected data to gnuplot format file.\r\n    -e filename     Output CSV file with percentages served\r\n    -r              Don&#39;t exit on socket receive errors.\r\n    -h              Display usage information (this message)\r\n    -Z ciphersuite  Specify SSL/TLS cipher suite (See openssl ciphers)\r\n    -f protocol     Specify SSL/TLS protocol\r\n                    (SSL3, TLS1, TLS1.1, TLS1.2 or ALL)\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>下面我们对这些参数，进行相关说明。如下：</p>\r\n<figure><table>\r\n<thead>\r\n<tr><th style=\'text-align:center;\' >参数</th><th>说明</th></tr></thead>\r\n<tbody><tr><td style=\'text-align:center;\' >-n</td><td>在测试会话中所执行的请求个数。默认时，仅执行一个请求。</td></tr><tr><td style=\'text-align:center;\' >-c</td><td>一次产生的请求个数。默认是一次一个。</td></tr><tr><td style=\'text-align:center;\' >-t</td><td>测试所进行的最大秒数。其内部隐含值是 -n 50000，它可以使对服务器的测试限制在一个固定的总时间以内。默认时，没有时间限制。</td></tr><tr><td style=\'text-align:center;\' >-p</td><td>包含了需要 POST 的数据的文件。</td></tr><tr><td style=\'text-align:center;\' >-P</td><td>对一个中转代理提供 BASIC 认证信任。用户名和密码由一个:隔开，并以 base64 编码形式发送。无论服务器是否需要(即, 是否发送了 401 认证需求代码)，此字符串都会被发送。</td></tr><tr><td style=\'text-align:center;\' >-T</td><td>POST数据所使用的 Content-type 头信息。</td></tr><tr><td style=\'text-align:center;\' >-v</td><td>设置显示信息的详细程度 -4 或更大值会显示头信息，3 或更大值可以显示响应代码(404, 200等), 2或更大值可以显示警告和其他信息。</td></tr><tr><td style=\'text-align:center;\' >-V</td><td>显示版本号并退出。</td></tr><tr><td style=\'text-align:center;\' >-w</td><td>以 HTML 表的格式输出结果。默认时，它是白色背景的两列宽度的一张表。</td></tr><tr><td style=\'text-align:center;\' >-i</td><td>执行 HEAD 请求，而不是 GET。</td></tr><tr><td style=\'text-align:center;\' >-X</td><td>对请求使用代理服务器。</td></tr><tr><td style=\'text-align:center;\' >-x</td><td>设置 <code>&lt;table&gt;</code> 属性的字符串。</td></tr><tr><td style=\'text-align:center;\' >-y</td><td>设置 <code>&lt;tr&gt;</code> 属性的字符串。</td></tr><tr><td style=\'text-align:center;\' >-z</td><td>设置 <code>&lt;td&gt;</code> 属性的字符串。</td></tr><tr><td style=\'text-align:center;\' >-C</td><td>对请求附加一个 Cookie 行。其典型形式是 name=value 的一个参数对，此参数可以重复。</td></tr><tr><td style=\'text-align:center;\' >-H</td><td>对请求附加额外的头信息。此参数的典型形式是一个有效的头信息行，其中包含了以冒号分隔的字段和值的对(如,&quot;Accept-Encoding:zip/zop;8bit&quot;)。</td></tr><tr><td style=\'text-align:center;\' >-A</td><td>对服务器提供 BASIC 认证信任。用户名和密码由一个:隔开，并以 base64 编码形式发送。无论服务器是否需要(即,是否发送了401认证需求代码)，此字符串都会被发送。</td></tr><tr><td style=\'text-align:center;\' >-h</td><td>显示使用方法。</td></tr><tr><td style=\'text-align:center;\' >-d</td><td>不显示 &quot;percentage served within XX [ms] table&quot; 的消息(为以前的版本提供支持)。</td></tr><tr><td style=\'text-align:center;\' >-e</td><td>产生一个以逗号分隔的(CSV)文件，其中包含了处理每个相应百分比的请求所需要(从1%到100%)的相应百分比的(以微妙为单位)时间。由于这种格式已经“二进制化”，所以比 gnuplot 格式更有用。</td></tr><tr><td style=\'text-align:center;\' >-g</td><td>把所有测试结果写入一个 gnuplot 或者TSV(以Tab分隔的)文件。此文件可以方便地导入到Gnuplot,IDL,Mathematica,Igor 甚至 Excel 中。其中的第一行为标题。</td></tr><tr><td style=\'text-align:center;\' >-k</td><td>启用 HTTP KeepAlive 功能，即在一个 HTTP 会话中执行多个请求。默认时，不启用 KeepAlive 功能。</td></tr><tr><td style=\'text-align:center;\' >-q</td><td>如果处理的请求数大于 150，ab 每处理大约 10% 或者 100 个请求时，会在 stderr 输出一个进度计数。此 -q 标记可以抑制这些信息。</td></tr></tbody>\r\n</table></figure>\r\n<p>&nbsp;</p>\r\n<h3>4 ab性能指标</h3>\r\n<p>在进行性能测试过程中有几个指标比较重要：</p>\r\n<h4>4.1 吞吐率（Requests per second）</h4>\r\n<p>服务器并发处理能力的量化描述，单位是 reqs/s，指的是在某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。</p>\r\n<p>记住：吞吐率是基于并发用户数的。这句话代表了两个含义：</p>\r\n<p>a、吞吐率和并发用户数相关</p>\r\n<p>b、不同的并发用户数下，吞吐率一般是不同的</p>\r\n<p>计算公式：总请求数/处理完成这些请求数所花费的时间，即</p>\r\n<p>Request per second=Complete requests/Time taken for tests</p>\r\n<p>必须要说明的是，这个数值表示当前机器的整体性能，值越大越好。</p>\r\n<p>&nbsp;</p>\r\n<h4>4.2 并发连接数（The number of concurrent connections）</h4>\r\n<p>并发连接数指的是某个时刻服务器所接受的请求数目，简单的讲，就是一个会话。</p>\r\n<p>&nbsp;</p>\r\n<h4>4.3 并发用户数（Concurrency Level）</h4>\r\n<p>要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话，也即连接数。在HTTP/1.1下，IE7 支持两个并发连接，IE8 支持 6 个并发连接，FireFox3 支持 4 个并发连接。所以相应的，我们的并发用户数就得除以这个基数。</p>\r\n<p>&nbsp;</p>\r\n<h4>4.4 用户平均请求等待时间（Time per request）</h4>\r\n<p>计算公式：处理完成所有请求数所花费的时间/（总请求数/并发用户数），即：</p>\r\n<p>Time per request=Time taken for tests/（Complete requests/Concurrency Level）</p>\r\n<p>&nbsp;</p>\r\n<h4>4.5 服务器平均请求等待时间（Time per request:across all concurrent requests）</h4>\r\n<p>计算公式：处理完成所有请求数所花费的时间/总请求数，即：</p>\r\n<p>Time taken for/testsComplete requests</p>\r\n<p>可以看到，它是吞吐率的倒数。</p>\r\n<p>同时，它也等于用户平均请求等待时间/并发用户数，即</p>\r\n<p>Time per request/Concurrency Level</p>\r\n<p>&nbsp;</p>\r\n<h3>5 ab实际使用</h3>\r\n<p>ab 的命令参数比较多，我们经常使用的是 -c 和 -n 参数。</p>\r\n<p>假设我们要对域名为 <code>www.test.com</code>  的网站进行性能测试。</p>\r\n<pre><code>ab -c 10 -n 100 http://www.test.com/index.php\r\n</code></pre>\r\n<p>-c10 表示并发用户数为 10</p>\r\n<p>-n100 表示请求总数为 100</p>\r\n<p>此命令表示同时处理 100 个请求并运行 10 次 index.php 文件。</p>\r\n<pre><code>This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;\r\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\r\nLicensed to The Apache Software Foundation, http://www.apache.org/\r\n\r\nBenchmarking api.itfangtan.com (be patient).....done\r\n\r\n\r\nServer Software:        nginx\r\nServer Hostname:        www.test.com\r\nServer Port:            80\r\n\r\nDocument Path:          /index.php\r\nDocument Length:        42 bytes\r\n\r\nConcurrency Level:      10\r\nTime taken for tests:   0.854 seconds\r\nComplete requests:      100\r\nFailed requests:        0\r\nWrite errors:           0\r\nTotal transferred:      21900 bytes\r\nHTML transferred:       4200 bytes\r\nRequests per second:    117.03 [#/sec] (mean)\r\nTime per request:       85.446 [ms] (mean)\r\nTime per request:       8.545 [ms] (mean, across all concurrent requests)\r\nTransfer rate:          25.03 [Kbytes/sec] received\r\n\r\nConnection Times (ms)\r\n              min  mean[+/-sd] median   max\r\nConnect:        4    6   5.5      5      46\r\nProcessing:    45   69  57.1     53     269\r\nWaiting:       45   69  57.1     53     269\r\nTotal:         50   75  57.0     58     273\r\n\r\nPercentage of the requests served within a certain time (ms)\r\n  50%     58\r\n  66%     60\r\n  75%     61\r\n  80%     65\r\n  90%     87\r\n  95%    264\r\n  98%    270\r\n  99%    273\r\n 100%    273 (longest request)\r\n</code></pre>\r\n<p>&nbsp;</p>\r\n<p>通过上图，测试结果也一目了然，Apache 测试出的吞吐率为：<code>Requests per second: 117.03[#/sec] (mean)</code></p>\r\n<p>除此之外还有其他一些信息，需要说明下，如下：</p>\r\n<p>Server Software 表示被测试的 Web 服务器软件名称。</p>\r\n<p>Server Hostname 表示请求的 URL 主机名。</p>\r\n<p>Server Port 表示被测试的 Web 服务器软件的监听端口。</p>\r\n<p>Document Path 表示请求的 URL中的根绝对路径，通过该文件的后缀名，我们一般可以了解该请求的类型。</p>\r\n<p>Document Length 表示HTTP响应数据的正文长度。</p>\r\n<p>Concurrency Level 表示并发用户数，这是我们设置的参数之一。</p>\r\n<p>Time taken for tests 表示所有这些请求被处理完成所花费的总时间。</p>\r\n<p>Complete requests 表示总请求数量，这是我们设置的参数之一。</p>\r\n<p>Failed requests 表示失败的请求数量，这里的失败是指请求在连接服务器、发送数据等环节发生异常，以及无响应后超时的情况。如果接收到的 HTTP 响应数据的头信息中含有 2xx 以外的状态码，则会在测试结果中显示另一个名为“Non-2xx responses”的统计项，用于统计这部分请求数，这些请求并不算在失败的请求中。</p>\r\n<p>Total transferred 表示所有请求的响应数据长度总和，包括每个 HTTP 响应数据的头信息和正文数据的长度。注意这里不包括 HTTP请求数据的长度，仅仅为 Web 服务器流向用户 PC 的应用层数据总长度。</p>\r\n<p>HTML transferred 表示所有请求的响应数据中正文数据的总和，也就是减去了 Total transferred 中 HTTP 响应数据中的头信息的长度。</p>\r\n<p>Requests per second 吞吐率，计算公式：Complete requests/Time taken for tests</p>\r\n<p>Time per request 用户平均请求等待时间，计算公式：Time token for tests/（Complete requests/Concurrency Level）。</p>\r\n<p>Time per requet(across all concurrent request) 服务器平均请求等待时间，计算公式：Time taken for tests/Complete requests，正好是吞吐率的倒数。也可以这么统计：Time per request/Concurrency Level。</p>\r\n<p>Transfer rate 表示这些请求在单位时间内从服务器获取的数据长度，计算公式：Total trnasferred/ Time taken for tests，这个统计很好的说明服务器的处理能力达到极限时，其出口宽带的需求量。</p>\r\n<p>Percentage of requests served within a certain time（ms）这部分数据用于描述每个请求处理时间的分布情况，比如以上测试，80%的请求处理时间都不超过6ms，这个处理时间是指前面的 Time per request，即对于单个用户而言，平均每个请求的处理时间。</p>', '2018-08-02 09:49:30', '2018-08-02 09:49:30');
INSERT INTO `ms_news_data` VALUES ('35', '<p>\r\n	PHP 性能优化在中大型项目当中是非常重要的一件事情。\r\n</p>\r\n<p>\r\n	PHP 性能优化分为代码级和配置级两个部分。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	一、PHP 代码级优化建议\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		1）用单引号代替双引号\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	因为 PHP 会在双引号包含的字符串中搜索变量，单引号不会。在单引号当中，PHP 不会自动搜索变量、转义字符等。因此效率上快很多。特别是在一些大内容的字符串的情景下，单引号性能更优异。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		2）$row[\'id\']的速度是$row[id]的 7 倍。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	在一些旧版不严格的 PHP 当中，$row[\'id\']写成$row[id]也是能正确解析的。新版这样会提示 notice 错误。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		3）使用 for 对数组循环之前确定数组元素的长度\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	虽然像 count、strlen 这样的操作时间复杂度是O(1)，不会有太大的性能消耗。当然避免每次都循环计算是一个良好的习惯。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		4）unset 那些不用的变量及大数组。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	大小项目当中性能可能并不明显。但是在大项目且并发量高的时候，变量占用的内存如果不及时注销回收，会导致内存负载很高。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		5）尽量使用伪函数（语言结构 ）\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	常用的语言结构有 echo、isset、unset 等。它们比函数性能要高很多。常见的 isset 替换掉 array_key_exists。如何判断一个方法是语言结构还是普通方法？\r\n</p>\r\n<p>\r\n	方式一：\r\n</p>\r\n<pre>&lt;?php\r\nvar_dump(function_exists(\'echo\'));</pre>\r\n<p>\r\n	方式二：\r\n</p>\r\n<pre>// 在 PHP 命令行操作\r\n$ php --rf echo</pre>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		6）类静态方法比普通类成员方法性能好。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	这个性能差异在旧版表现明显，在 PHP 5.6+ 之后，这个差异并不是很明显了。当然，静态方法在调用的时候更易操作。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		7）尽量避免使用魔术方法。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	通过对魔术方法测试魔术方法比普通的方法性能在压力很高的环境下相差成倍呈现。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		8）加载文件时尽量使用绝对路径。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	PHP 加载相对路径会从可能的库位置进行尝试加载。可能的库位置由 php.ini 配置文件当中的include_path配置决定。这里的路径配置越多，那么相对路径的加载就会越慢。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		9）函数代替正则表达式完成相同的功能。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	与之相关的功能有：strtok、strstr、strpos、str_replace、substr、explode、implode。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		10）尽量避免使用 @ 屏蔽错误消息的做法。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	我们应该使用使用 error_reporting(0) 关闭错误，使用使用 error_log 把错误写入日志文件。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		11）尽量避免程序抛出 notice 错误消息。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	错误消息对性能影响很大。即使通过 error_reporting(0) 关闭了也不行。所以，我们要尽量避免错误的产生。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		12）能用 PHP 内置方法解决就不要自己用代码实现\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	内置方法比自定义方法速度快。在自己实现之前，请检查 PHP 内置方法已经提供。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		13）用尽量少的代码实现功能。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	很明显，代码越长不仅不易维护，而且 PHP 词法解析器与语法语法解析器会用更多的时间去翻译，挺累的。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		14）自增/自减局部变量比全局变量快。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	本身从变量所处内存位置亦可知局部变量比全局变量要快。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		15）派生类中的方法运行起来要快于在基类中定义的同样方法。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	从 PHP 原理来说，首先从当前类查找该方法，找不到再找父类。假如此时当前类是一个多级的子孙类。那么，就会导致向上查找。从而性能会下降。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		16）并非要用类实现所有的数据结构，数组也很有用。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	类比对象会消耗更多的内存。很多人在 PHP 开发过程中会过度的像 Java 这种语言一样面向对象。把一些复杂参数的传递封装成一个对象。其实大多数情况下没有必要。直接传数据就很好。性能表现也非常好。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		17）尽量少的进行文件操作。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	在任何语言下，对文件的操作都会对性能产生影响。操作的文件越多性能越差。毕竟，最终性能都会反应在系统 IO 上。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		18）尽量使用 file_get_contents/file_put_contents 代替 fopen/fget 等相关的文件读写函数。除非需要对文件更精细的操作。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		19）尽量少的对数据库进行 INSERT/UPDATE/DELETE 操作。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	众所周知，INSERT/UPDATE/DELETE 对数据库造成 IO 压力。操作越频繁，压力越大。通常在一个项目中 20% 是写入操作，80% 是读操作。这就是所谓的二八原则。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		20）对函数/方法内 global 的变量，应该用完就 unset 掉。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	global 的变量，unset 的时候只会在当前函数或方法内部被清除掉。并不会把全局的变量给清除。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		21）能用缓存的地方尽量使用缓存。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	众所周知，缓存可以帮助我们挡掉一部分调用数据库以及逻辑运算部分的工作。所以，性能肯定是快快的。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		22）\"用 i+=1代替 i=i+1。符合 c/c++ 的习惯，效率还高 \"。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		23）多维数组尽量不要循环嵌套赋值。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	翻译过来就是不要在循环过程中动态在数据内部创建一个元素。然后，再次循环在的时候在这个元素内部再动态创建一个元素。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		24）如不是特殊需要，参数传递都建议使用传值而不是传引用。当然，如果参数是很大的数组且需要修改时可以考虑引用传递。\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<h3>\r\n	二、PHP 配置级优化建议\r\n</h3>\r\n<blockquote>\r\n	<p>\r\n		1) 禁用高风险 PHP 函数\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	disable_functions = 该选项可以设置哪些 PHP 函数是禁止使用的。PHP 中有一些函数的风险性还是相当大的，可以直接执行一些系统级脚本命令。如果允许这些函数执行，当 PHP 程序出现漏洞时，损失是非常严重的！以下我们给出推荐的禁用函数设置：\r\n</p>\r\n<pre>disable_functions = phpinfo,passthru,exec,system,popen,chroot,escapeshellcmd,escapeshellarg,shell_exec,proc_open,proc_get_status</pre>\r\n<p>\r\n	需注意：如果您的服务器中含有一些系统状态检测的 PHP 程序，则不要禁用shell_exec,proc_open,proc_get_status 等函数。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		2) 优化 PHP 脚本执行时间\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	max_execution_time = 30\r\n</p>\r\n<p>\r\n	该选项设定 PHP 程序的最大执行时间，如果一个 PHP 脚本被请求，且该 PHP 脚本在 max_execution_time 时间内没能执行完毕，则 PHP 不再继续执行，直接给客户端返回超时错误。没有特殊需要该选项可保持默认设置 30秒。如果您的 PHP 脚本确实需要长执行时间则可以适当增大该时间设置。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		3) 优化 PHP 脚本处理内存占用\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	memory_limit = 8M\r\n</p>\r\n<p>\r\n	该选项指定 PHP 脚本处理所能占用的最大内存，默认为 8MB，如果您的服务器内存为 1GB 以上，则该选项可以设置为 12MB 以获得更快的 PHP 脚本处理效率。\r\n</p>\r\n<p>\r\n	如果此值设置过小，那么一些大型的耗时的框架，比如像 Laravel/wordpress  就会导致报 \"Fatal Error: Allowed memory size of xxxxxx bytes exhausted \" 的错误。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		4) PHP上传文件大小限制：\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	upload_max_filesize = 2M\r\n</p>\r\n<p>\r\n	该选项设定PHP所能允许最大上传文件大小，默认为 2MB。根据实际应用需求，可以适当增大该设置。一定要谨防此值设置过大，导致遭遇大文件上传把服务器资源吃尽导致服务器瘫痪。\r\n</p>\r\n<p>\r\n	比如，我们设置此值允许最大上传 1GB。一个普通用户上传一个 1GB 的文件需要 30 分钟。那么假如一个恶意用户模拟 1000 个正常用户上传文件。那么此时服务器同一时刻会面临 1000 上传与服务器对接。造成服务器 30 分钟内不能响应其他正常请求。导致服务器陷入瘫痪之境。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<blockquote>\r\n	<p>\r\n		5) Session存储介质\r\n	</p>\r\n</blockquote>\r\n<p>\r\n	session.save_path\r\n</p>\r\n<p>\r\n	在小应用当中，通常 session 都存储到服务器文件当中。就是由此选项决定。如果你用的是一些 PHP 框架。那么，可能此值会在框架当中被修改。\r\n</p>\r\n<p>\r\n	一般大型应用会将 session 写入到类似如 Redis 这样的缓存当中。以此降低 session 写入/删除时对服务器性能造成 IO 压力。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>', '2018-08-02 17:05:09', '2018-08-02 17:05:09');
INSERT INTO `ms_news_data` VALUES ('37', '<h2>PHP 能做什么</h2>\r\n<p>PHP 做为当今流行的 Web 开发语言。常年占据开发语言的榜单前 6 名的位置。那么，PHP 是什么？它能做什么？</p>\r\n<h3>一、PHP 是什么？</h3>\r\n<p>我们从 <a href=\'http://php.net\'>PHP 官网</a> 找到了对它的解释：</p>\r\n<pre><code>PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML.\r\n</code></pre>\r\n<p>翻译过来如下：</p>\r\n<blockquote><p>PHP（“<em>PHP: Hypertext Preprocessor</em>”，超文本预处理器的字母缩写）是一种被广泛应用的开放源代码的多用途脚本语言，它可嵌入到 HTML中，尤其适合 web 开发。 </p>\r\n</blockquote>\r\n<p>&nbsp;</p>\r\n<p>这里有两个关键点：</p>\r\n<ul>\r\n<li>超文本</li>\r\n<li>脚本语言</li>\r\n\r\n</ul>\r\n<p>&nbsp;</p>\r\n<h4>1）超文本</h4>\r\n<p>所谓超文本就是所谓的 HTML 。HTML 里面目前主要使用两个版本 HTML4 &amp; HTML5 。关于对这两个版本的细节，可以通过百度百科获悉。这里要讲的是，HTML 它是中文本名称叫做超文本标记语言。超文本指的是我们通过浏览器打开的页面内包含图片、链接，音乐、视频、程序等非文字元素。</p>\r\n<h4>2）脚本语言</h4>\r\n<p>脚本语言通常指的是基于其他语言开发的解释器并调用第三方底层系统功能的扩展语言。脚本语言又属于解释型语言的一种。相对于解释型语言，还有一种称为编译型语言。有计算机相关理论知识的同学对此应该有一个深刻的认识。如果你没有这方面的理论知识，可以通过百度百科获悉。解释型语言包含：PHP、JavaScript、Python 等。编译型语言包含：C、C++、Java、Go 等。编译型语言通常又属于强类型语言。它们在编译过程中会对程序代码中的类型进行强制性验证。所以，相对来说解释型语言更具备灵活性。但，这并不是绝对的。</p>\r\n<p>&nbsp;</p>\r\n<h3>二、PHP 能做什么？</h3>\r\n<p>在学习任何东西，不仅限于软件编程语言。我们通常都会关注这个东西到底能做什么。以便自己做出评估是否适合自己，能否为自己带来经济上的收益。</p>\r\n<p>那么，PHP 到底能做什么呢？</p>\r\n<ul>\r\n<li>服务端脚本。\r\n这是 PHP 最传统，也是最主要的目标领域。开展这项工作需要具备以下三点：PHP 解析器（CGI 或者服务器模块）、web 服务器和 web 浏览器。需要在运行 web 服务器时，安装并配置 PHP，然后，可以用 web 浏览器来访问 PHP 程序的输出，即浏览服务端的 PHP 页面。如果只是实验 PHP 编程，所有的这些都可以运行在自己家里的电脑中。 （注：这是 PHP 官方文档的解释）</li>\r\n<li>命令行脚本。\r\n可以编写一段 PHP 脚本，并且不需要任何服务器或者浏览器来运行它。通过这种方式，仅仅只需要 PHP 解析器来执行。这种用法对于依赖 cron（Unix 或者 Linux 环境）或者 Task Scheduler（Windows 环境）的日常运行的脚本来说是理想的选择。这些脚本也可以用来处理简单的文本。 （注：这是 PHP 官方文档的解释）</li>\r\n<li>编写桌面应用程序。 对于有着图形界面的桌面应用程序来说，PHP 或许不是一种最好的语言，但是如果用户非常精通 PHP，并且希望在客户端应用程序中使用 PHP 的一些高级特性，可以利用 PHP-GTK 来编写这些程序。用这种方法，还可以编写跨平台的应用程序。PHP-GTK 是 PHP 的一个扩展，在通常发布的 PHP 包中并不包含它。 （注：这是 PHP 官方文档的解释。我曾经也试过。但是，这并不是 PHP 的强项。）</li>\r\n\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>以上三点是 PHP 官方文档对 PHP 能做什么的解释。但是，我觉得这解释过于生硬和学术化。我们来点不一样的解释：</p>\r\n<ul>\r\n<li><p>PHP 开发一个网站。\r\n比如：政府网站、企业网站、论坛、电商系统(淘宝) 等。凡是可以通过浏览器访问的网站，我们 PHP 基本上都可以胜任，并且能完成得又快又好。</p>\r\n</li>\r\n<li><p>为手机 APP 提供 API 接口数据：\r\n在几乎人手一部智能手机的时代。每个人的手机里面都会装上不少的软件。而软件里面展示的各种数据（天气、新闻、笑话、视频、歌曲）都是从服务器获取的。而服务器端的数据又可以通过 PHP 提取并发送给手机 APP 软件。</p>\r\n</li>\r\n<li><p>微信公众号开发\r\n其实这个不应该单独拿出来讲。应该它属于“开发一个网站”里面的内容。但是，为了更形象让大家知道 PHP 到底是做什么的就单独拎出来说了。我们经常使用微信。在微信里面我们关注的公众号里面推送的文章以及其他一些服务功能。我们 PHP 都可以搞定哟。</p>\r\n</li>\r\n<li><p>微信小程序开发\r\n这个与 提供 API 接口数据 类似。</p>\r\n</li>\r\n<li><p>发送定时消息\r\n给某某人发送一条短信。给某某手机发送一条 APP 消息推送。给某某邮箱发送一封邮件等等。PHP 依然也可以搞定。</p>\r\n</li>\r\n<li><p>其他</p>\r\n<p>电脑软件、客服系统、类似QQ聊天软件、图片处理（截取、水印、二维码、模糊）等。</p>\r\n</li>\r\n\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>以上通过应用层面讲述了 PHP 到底能做什么。希望对大家深入了解 PHP 有帮助。</p>\r\n<p>&nbsp;</p>', '2018-09-04 11:14:37', '2018-09-04 11:14:37');
INSERT INTO `ms_news_data` VALUES ('38', '<p>学习任何东西，不仅限于软件编程语言。都需要我们具备一定的基础知识。每一种技能对基础知识要求又不尽相同。今天我们就来了解一下，学习 PHP 语言到底要具备哪些基础知识。</p>\r\n<h3>一、英文水平</h3>\r\n<p>相信很多人看到这四个字的标题内心着实一紧。觉得自己英文水平很菜。估计学习编程语言已经没戏了。曾经的我也是如此。那时候我学习 C、Java 的时候，没有任何人做引导。老师每天只讲书本内容。根本不会跟你讲学习方法。</p>\r\n<p>其实学习编程语言，掌握初中的英文能力就够了。编程语言里面的单词加起来不足 500 个（不完全统计）。并且这 500 个里面大多数都是初中英文当中就已经接触过的。当然，要想把编程语言钻石得更深入，初中的水平显然是不够的。但是，我们现在可以借助像有道词典，以及各种中文资料文献。依然可以使我们能很好掌握 PHP 或其他编程语言。英文好的同学，可以不借助这些软件，直接阅读或在线跟国外的大牛交流。在这些方面会比我们有优势。</p>\r\n<p>在当前中国这个大环境下。其他很多时候，我们的英文水平已经足够在工作中站稳脚跟儿。在工作中，我们也可以慢慢学习啃掉一些经常遇到的英文单词。长此以往，我们也可以慢慢走向更高的技术层次。只是比英文水平好的同学多花一些时间和汗水而已。</p>\r\n<p>&nbsp;</p>\r\n<h3>二、数学</h3>\r\n<p>为什么编程对数学知识有特殊要求呢？因为，计算机基础及理论以及各种编程语言都是基于数学之上的具体形态。比如，二进制、八进制、十六进制、位移、加减乘除、取模。以及底层信号的传输都是0101这种格式。所以，数学的基础知识一定要牢。一般来讲，高中水平足也。当涉及专业知识的时候。比如金融领域的系统开发。就会涉及到利息的计算。此时，我们只需要定点学习这块的知识就够了。</p>\r\n<p>&nbsp;</p>\r\n<p>这里我说一个题外话，我数学基础一直都是特别好。很多都是工作之中慢慢强化学习巩固的。有一次遇到一个错误：0 不能作为被除数。在计算机领域也是与数学一一对应的。我把 0 当成被除数进行了操作。导致程序报错异常。如果我的数学基础扎实的话，就会规避这个情况了。</p>\r\n<p>&nbsp;</p>\r\n<h3>三、耐心与毅力</h3>\r\n<p>其实耐心与毅力并不属于文化知识的范畴。之所以拿出来与之并论。是因为我们的主题旨在怎样把 PHP 学好的基调上。</p>\r\n<p>耐心是人的一种心态。做事不急躁，能不厌其烦去做一件事儿。遇到困难也能平复稳住心态继续前行。</p>\r\n<p>毅力也是人的一种心态表现。是人的忍耐力持久力。</p>\r\n<p>在学习 PHP 或其他任何东西的过程当中，肯定会遇到困惑、困难。以及，学习本身是一件枯燥且长时间的事情。三心二意、半途而废的人肯定是不适合在这一行干的。IT 领域目前的薪资水平的确是所有行业里面偏中上的。在享受高薪资的同时，我们前期也要经历很多困苦磨练。</p>\r\n<p>&nbsp;</p>\r\n<h3>四、学习方法</h3>\r\n<p>具备了以上三点。说明我们已经具备了学习 PHP 的基础积累。但是，如果能提高我们的学习方式，让我们事半功倍，那么何乐而不为呢？</p>\r\n<p>本小节我们就来讲一讲学习方法。</p>\r\n<p>所谓学习方法，是指正常情况的学习方法，遇到问题时的学习方法。</p>\r\n<p>正常情况下，我们很顺利。那么，只需要按部就班即可。每天定好学习的步骤，长此往不断坚持下去即可。那么，当我们遇到困难的时候怎么办呢？</p>\r\n<p>通常我们在学习过程中遇到的问题基本上都可以在百度找到想要的信息。搜索的时候一定要选好关键词。关键词一定要专业。不能以口水话的形式搜索。否则，只会得到更多无效的搜索结果。浪费自己的学习时间。同时也会让自己陷入沮丧的境地。</p>\r\n<p>&nbsp;</p>', '2018-09-04 11:57:06', '2018-09-04 11:57:06');

-- ----------------------------
-- Table structure for ms_user
-- ----------------------------
DROP TABLE IF EXISTS `ms_user`;
CREATE TABLE `ms_user` (
  `user_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '用户ID',
  `username` char(20) NOT NULL COMMENT '账号',
  `password` char(32) NOT NULL COMMENT '密码',
  `salt` char(6) NOT NULL COMMENT '密码盐',
  `mobilephone` char(11) NOT NULL DEFAULT '' COMMENT '手机号码',
  `mobilephone_ok` tinyint(1) NOT NULL DEFAULT '0' COMMENT '手机验证状态：0未验证、1已验证',
  `mobilephone_time` datetime DEFAULT NULL COMMENT '手机验证通过时间',
  `email` char(50) NOT NULL DEFAULT '' COMMENT '邮箱',
  `email_ok` tinyint(1) NOT NULL DEFAULT '0' COMMENT '邮箱验证状态：0未验证、1已验证',
  `email_time` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '邮箱验证通过时间',
  `last_login_time` datetime NOT NULL COMMENT '最后登录时间',
  `created_time` datetime NOT NULL COMMENT '注册时间/创建时间',
  `modified_time` datetime NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `username_unique` (`username`),
  KEY `mobilephone_key` (`mobilephone`),
  KEY `email_key` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户表';

-- ----------------------------
-- Records of ms_user
-- ----------------------------

-- ----------------------------
-- Table structure for ms_user_blacklist
-- ----------------------------
DROP TABLE IF EXISTS `ms_user_blacklist`;
CREATE TABLE `ms_user_blacklist` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` int(11) unsigned NOT NULL COMMENT '用户ID',
  `username` char(20) NOT NULL COMMENT '账号',
  `ban_type` smallint(1) NOT NULL COMMENT '禁用类型：1永久封禁、2临时封禁',
  `ban_start_time` datetime DEFAULT NULL COMMENT '封禁开始时间',
  `ban_end_time` datetime DEFAULT NULL COMMENT '封禁截止时间',
  `ban_reason` char(255) NOT NULL DEFAULT '' COMMENT '账号封禁原因',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '记录状态：0失效、1生效',
  `created_by` int(11) unsigned NOT NULL COMMENT '创建人',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间',
  `modified_by` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '修改人',
  `modified_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`),
  KEY `username` (`username`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户黑名单表';

-- ----------------------------
-- Records of ms_user_blacklist
-- ----------------------------

-- ----------------------------
-- Table structure for ms_user_data
-- ----------------------------
DROP TABLE IF EXISTS `ms_user_data`;
CREATE TABLE `ms_user_data` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `user_id` int(11) unsigned NOT NULL COMMENT '用户ID',
  `nickname` char(10) NOT NULL DEFAULT '' COMMENT '昵称',
  `realname` char(10) NOT NULL DEFAULT '' COMMENT '真实姓名',
  `avatar` char(150) NOT NULL DEFAULT '' COMMENT '头像地址',
  `mobilephone` char(11) NOT NULL DEFAULT '' COMMENT '手机号码',
  `signature` char(50) NOT NULL DEFAULT '' COMMENT '个性签名',
  `birthday` char(10) NOT NULL DEFAULT '0000-00-00' COMMENT '生日',
  `sex` tinyint(1) NOT NULL DEFAULT '0' COMMENT '性别：1男、2女、0保密',
  `email` char(50) NOT NULL DEFAULT '' COMMENT '邮箱',
  `created_time` datetime DEFAULT NULL COMMENT '创建时间',
  `modified_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户副表';

-- ----------------------------
-- Records of ms_user_data
-- ----------------------------

-- ----------------------------
-- Table structure for ms_user_login
-- ----------------------------
DROP TABLE IF EXISTS `ms_user_login`;
CREATE TABLE `ms_user_login` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `user_id` int(11) unsigned NOT NULL COMMENT '用户ID',
  `login_ip` char(50) NOT NULL COMMENT '登录IP',
  `login_entry` tinyint(1) NOT NULL COMMENT '登录入口：1PC、2APP、3WAP',
  `modified_time` datetime NOT NULL COMMENT '更新时间/登录时间',
  `created_time` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户登录历史表';

-- ----------------------------
-- Records of ms_user_login
-- ----------------------------
